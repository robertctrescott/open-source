CCS PCM C Compiler, Version 4.084, 46866               04-Oct-09 10:41

               Filename: main.lst

               ROM used: 253 words (6%)
                         Largest free fragment is 2048
               RAM used: 18 (7%) at main() level
                         20 (8%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0BE
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  26
0008:  MOVF   7F,W
0009:  MOVWF  25
000A:  MOVF   0A,W
000B:  MOVWF  2D
000C:  CLRF   0A
000D:  SWAPF  25,F
000E:  MOVF   04,W
000F:  MOVWF  27
0010:  MOVF   20,W
0011:  MOVWF  28
0012:  MOVF   21,W
0013:  MOVWF  29
0014:  MOVF   22,W
0015:  MOVWF  2A
0016:  MOVF   23,W
0017:  MOVWF  2B
0018:  MOVF   24,W
0019:  MOVWF  2C
001A:  BCF    03.7
001B:  BCF    03.5
001C:  BTFSS  0B.3
001D:  GOTO   020
001E:  BTFSC  0B.0
001F:  GOTO   033
0020:  MOVF   27,W
0021:  MOVWF  04
0022:  MOVF   28,W
0023:  MOVWF  20
0024:  MOVF   29,W
0025:  MOVWF  21
0026:  MOVF   2A,W
0027:  MOVWF  22
0028:  MOVF   2B,W
0029:  MOVWF  23
002A:  MOVF   2C,W
002B:  MOVWF  24
002C:  MOVF   2D,W
002D:  MOVWF  0A
002E:  SWAPF  26,W
002F:  MOVWF  03
0030:  SWAPF  7F,F
0031:  SWAPF  7F,W
0032:  RETFIE
0033:  BCF    0A.3
0034:  GOTO   035
.................... /* main.c 
....................  
.................... 	10/04/09 by Robert Trescott Jr. 
.................... 	(C)2009 Analogic 
....................  
.................... 	Microchip MPLAB ICD2 Emulation 
....................  
.................... 	History: 
.................... 		01/31/08 - ORIGINAL WORK for PCB01220801 - rct 
....................  
.................... */ 
....................  
.................... // compiler and hardware special settings 
.................... // *** Microchip stores "little-endian" ex. $4F52 = 0x52 0x4F in memory *** 
.................... // *** DO NOT USE ICD2 THROUGH USB HUB! ********** 
.................... // *** PIC16F690 REQUIRES ICD2 HEADER BOARD! ***** 
....................  
.................... #case 
.................... //#define ICD2 
....................  
.................... #include <16F690.h> 
.................... //////// Standard Header file for the PIC16F690 device //////////////// 
.................... #device PIC16F690 
.................... #list 
....................  
.................... #device *=16 
....................  
.................... #ifdef ICD2 
.................... #fuses HS,NOWDT,NOPROTECT,NOPUT,NOBROWNOUT,NOCPD,MCLR,NOIESO,NOFCMEN 
.................... #else 
.................... #fuses HS,NOWDT,PROTECT,PUT,NOBROWNOUT,CPD,MCLR 
.................... #endif 
....................  
.................... #use delay(clock=20000000) 
*
003B:  MOVLW  32
003C:  MOVWF  04
003D:  BCF    03.7
003E:  MOVF   00,W
003F:  BTFSC  03.2
0040:  GOTO   04E
0041:  MOVLW  06
0042:  MOVWF  21
0043:  CLRF   20
0044:  DECFSZ 20,F
0045:  GOTO   044
0046:  DECFSZ 21,F
0047:  GOTO   043
0048:  MOVLW  7B
0049:  MOVWF  20
004A:  DECFSZ 20,F
004B:  GOTO   04A
004C:  DECFSZ 00,F
004D:  GOTO   041
004E:  RETLW  00
....................  
.................... #include "PIC16F690.inc" 
.................... #list 
....................  
....................  
.................... #define false			0 
.................... #define true			1 
.................... #define byte			int 
.................... #define boolean			short int 
....................  
.................... #define	LONG_DELAY		15 
.................... #define DOOR_OPEN		0 
.................... #define CYCLES			5 
....................  
.................... #BIT FUEL_DOOR			= PORTB.6 
.................... #BIT IGNITION			= PORTB.5 
.................... #BIT ALARM_OUT			= PORTB.4 
....................  
....................  
.................... char portb; 
.................... static int mins 		= 0; 
*
00D4:  CLRF   2F
....................  
....................  
.................... // main routines follow 
.................... void InitHardware() 
.................... { 
.................... 	delay_ms(500); 
*
004F:  MOVLW  02
0050:  MOVWF  30
0051:  MOVLW  FA
0052:  MOVWF  32
0053:  CALL   03B
0054:  DECFSZ 30,F
0055:  GOTO   051
.................... 	 
.................... 	setup_adc(ADC_OFF); 
0056:  BCF    1F.0
....................  	TRISA		= 0xFF;			// set port A I/O 
0057:  MOVLW  FF
0058:  BSF    03.5
0059:  MOVWF  05
....................  	TRISB		= 0xEF;			// set port B I/O 
005A:  MOVLW  EF
005B:  MOVWF  06
....................  	TRISC		= 0xFF;			// set port C I/O 
005C:  MOVLW  FF
005D:  MOVWF  07
.................... 	PORTB		= 0x00;			// set io port initial levels 
005E:  BCF    03.5
005F:  CLRF   06
.................... 	IOCB		= 0x60;			// interrupt on change of ignition and fuel door sense 
0060:  MOVLW  60
0061:  BSF    03.6
0062:  MOVWF  16
.................... 	portb		= PORTB; 
0063:  BCF    03.6
0064:  MOVF   06,W
0065:  MOVWF  2E
.................... 	RABIF		= false; 
0066:  BCF    0B.0
....................  
.................... 	// fire up interrupts 
.................... 	enable_interrupts(INT_RB5); 
0067:  BSF    0B.3
0068:  BSF    03.6
0069:  BSF    16.5
.................... 	enable_interrupts(INT_RB6); 
006A:  BCF    03.6
006B:  BSF    0B.3
006C:  BSF    03.6
006D:  BSF    16.6
.................... 	enable_interrupts(GLOBAL);	// allow all other interrupts 
006E:  MOVLW  C0
006F:  BCF    03.6
0070:  IORWF  0B,F
.................... } 
0071:  BCF    0A.3
0072:  GOTO   0D6 (RETURN)
....................  
.................... void wait1minute() 
.................... { 
.................... 	int	secs; 
.................... 	for (secs=0; secs<60; secs++){ 
*
00AE:  CLRF   30
00AF:  MOVF   30,W
00B0:  SUBLW  3B
00B1:  BTFSS  03.0
00B2:  GOTO   0BC
.................... 		delay_ms(1000); 
00B3:  MOVLW  04
00B4:  MOVWF  31
00B5:  MOVLW  FA
00B6:  MOVWF  32
00B7:  CALL   03B
00B8:  DECFSZ 31,F
00B9:  GOTO   0B5
.................... 	} 
00BA:  INCF   30,F
00BB:  GOTO   0AF
.................... } 
00BC:  BCF    0A.3
00BD:  GOTO   0F7 (RETURN)
....................  
.................... void doAlarm() 
.................... { 
.................... 	int count = CYCLES; 
*
0073:  MOVLW  05
0074:  MOVWF  30
.................... 	 
.................... 	while (count && !IGNITION){ 
0075:  MOVF   30,F
0076:  BTFSC  03.2
0077:  GOTO   0AC
0078:  BTFSC  06.5
0079:  GOTO   0AC
.................... 		ALARM_OUT = true; 
007A:  BSF    06.4
.................... 		delay_ms(500); 
007B:  MOVLW  02
007C:  MOVWF  31
007D:  MOVLW  FA
007E:  MOVWF  32
007F:  CALL   03B
0080:  DECFSZ 31,F
0081:  GOTO   07D
.................... 		ALARM_OUT = false; 
0082:  BCF    06.4
.................... 		delay_ms(300); 
0083:  MOVLW  02
0084:  MOVWF  31
0085:  MOVLW  96
0086:  MOVWF  32
0087:  CALL   03B
0088:  DECFSZ 31,F
0089:  GOTO   085
.................... 		ALARM_OUT = true; 
008A:  BSF    06.4
.................... 		delay_ms(500); 
008B:  MOVLW  02
008C:  MOVWF  31
008D:  MOVLW  FA
008E:  MOVWF  32
008F:  CALL   03B
0090:  DECFSZ 31,F
0091:  GOTO   08D
.................... 		ALARM_OUT = false; 
0092:  BCF    06.4
.................... 		delay_ms(300); 
0093:  MOVLW  02
0094:  MOVWF  31
0095:  MOVLW  96
0096:  MOVWF  32
0097:  CALL   03B
0098:  DECFSZ 31,F
0099:  GOTO   095
.................... 		ALARM_OUT = true; 
009A:  BSF    06.4
.................... 		delay_ms(1000); 
009B:  MOVLW  04
009C:  MOVWF  31
009D:  MOVLW  FA
009E:  MOVWF  32
009F:  CALL   03B
00A0:  DECFSZ 31,F
00A1:  GOTO   09D
.................... 		ALARM_OUT = false; 
00A2:  BCF    06.4
.................... 		delay_ms(300); 
00A3:  MOVLW  02
00A4:  MOVWF  31
00A5:  MOVLW  96
00A6:  MOVWF  32
00A7:  CALL   03B
00A8:  DECFSZ 31,F
00A9:  GOTO   0A5
.................... 		count--; 
00AA:  DECF   30,F
.................... 	} 
00AB:  GOTO   075
.................... } 
00AC:  BCF    0A.3
00AD:  GOTO   0E5 (RETURN)
....................  
.................... /* Operation: 
.................... 	Activating Ignition resets timer to LONG DELAY period. 
.................... 	After timeout, alarm will test fuel door for 1 second, if still opened alarm will sound. 
.................... 	Ignition will cancel alarm in progress and reset to LONG DELAY. 
.................... 	Alarm will repeat for CYCLES count and then quiet. After 1 minute if fuel door is still open, 
.................... 		alarm will sound again. If door is closed it will sleep, but alarm immediatley if reopened  
....................  
....................  
.................... */ 
....................  
....................  
.................... void main() 
.................... {				 
*
00BE:  CLRF   04
00BF:  BCF    03.7
00C0:  MOVLW  1F
00C1:  ANDWF  03,F
00C2:  BSF    03.6
00C3:  BCF    1F.0
00C4:  BCF    1F.1
00C5:  BCF    1F.2
00C6:  BCF    1F.3
00C7:  BCF    03.6
00C8:  BCF    1F.6
00C9:  MOVLW  00
00CA:  BSF    03.6
00CB:  MOVWF  1E
00CC:  CLRF   19
00CD:  CLRF   1A
00CE:  BSF    03.5
00CF:  CLRF   1E
00D0:  BCF    03.5
00D1:  CLRF   1B
00D2:  BCF    03.6
00D3:  BCF    0D.5
.................... 	InitHardware(); 
*
00D5:  GOTO   04F
....................  
.................... 	for (;;){ 
.................... 		if ((FUEL_DOOR==DOOR_OPEN) && (mins==0)){		// we got an alarm condition 
00D6:  BTFSC  06.6
00D7:  GOTO   0EC
00D8:  MOVF   2F,F
00D9:  BTFSS  03.2
00DA:  GOTO   0EC
.................... 			delay_ms(1000);								// debounce for 1 second 
00DB:  MOVLW  04
00DC:  MOVWF  30
00DD:  MOVLW  FA
00DE:  MOVWF  32
00DF:  CALL   03B
00E0:  DECFSZ 30,F
00E1:  GOTO   0DD
.................... 			if (FUEL_DOOR==DOOR_OPEN){					// are we still opened 
00E2:  BTFSC  06.6
00E3:  GOTO   0EB
.................... 				doAlarm();								// make noise for a while 
00E4:  GOTO   073
.................... 				if (FUEL_DOOR==DOOR_OPEN)				// after a while 
00E5:  BTFSC  06.6
00E6:  GOTO   0EA
.................... 					mins=1;								// reset timer to 1 minute alarm period  
00E7:  MOVLW  01
00E8:  MOVWF  2F
.................... 				else sleep();							// but sleep and be quite if door is closed 
00E9:  GOTO   0EB
00EA:  SLEEP
.................... 			} 
....................  
.................... 		} else if (IGNITION){		// keep the timer a full delay while ignition is on 
00EB:  GOTO   0FB
00EC:  BTFSS  06.5
00ED:  GOTO   0F1
.................... 			mins = LONG_DELAY; 
00EE:  MOVLW  0F
00EF:  MOVWF  2F
....................  
.................... 		} else if (!IGNITION){		// we are going to start timers and count down to arm the fuel door 
00F0:  GOTO   0FB
00F1:  BTFSC  06.5
00F2:  GOTO   0FB
.................... 			if (mins>0){ 
00F3:  MOVF   2F,F
00F4:  BTFSC  03.2
00F5:  GOTO   0FA
.................... 				wait1minute(); 
00F6:  GOTO   0AE
.................... 				mins-=1; 
00F7:  MOVLW  01
00F8:  SUBWF  2F,F
.................... 			} 
.................... 			else sleep();			// after timeout then sleep (the door is armed and will alarm if opened) 
00F9:  GOTO   0FB
00FA:  SLEEP
.................... 		} 
.................... 	} 
00FB:  GOTO   0D6
.................... } 
....................  
.................... #INT_RB 
.................... void ignition_isr() 
00FC:  SLEEP
.................... { 
.................... 	portb = PORTB;		// wake up sleeping processor on change in ignition or fuel door 
*
0035:  MOVF   06,W
0036:  MOVWF  2E
.................... 	RABIF = false; 
0037:  BCF    0B.0
.................... } 
0038:  BCF    0B.0
0039:  BCF    0A.3
003A:  GOTO   020

Configuration Fuses:
   Word  1: 3C22   HS PROTECT NOBROWNOUT MCLR CPD NOWDT PUT IESO FCMEN
