;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 3/15/2013 12:22:39 AM
;----------------------------------------------

;Address Opcode 	ASM
____SysVT:
0x0000	0x4FFC2000  	536891388
0x0004	0x19110000  	6417
0x0008	0x18490000  	6217
0x000C	0x18490000  	6217
0x0010	0x18490000  	6217
0x0014	0x18490000  	6217
0x0018	0x18490000  	6217
0x001C	0x18490000  	6217
0x0020	0x18490000  	6217
0x0024	0x18490000  	6217
0x0028	0x18490000  	6217
0x002C	0x18490000  	6217
0x0030	0x18490000  	6217
0x0034	0x18490000  	6217
0x0038	0x18490000  	6217
0x003C	0x18490000  	6217
0x0040	0x18490000  	6217
0x0044	0x18490000  	6217
0x0048	0x18490000  	6217
0x004C	0x18490000  	6217
0x0050	0x18490000  	6217
0x0054	0x18490000  	6217
0x0058	0x18490000  	6217
0x005C	0x18490000  	6217
0x0060	0x18490000  	6217
0x0064	0x18490000  	6217
0x0068	0x18490000  	6217
0x006C	0x18490000  	6217
0x0070	0x18490000  	6217
0x0074	0x18490000  	6217
0x0078	0x18490000  	6217
0x007C	0x18490000  	6217
0x0080	0x18490000  	6217
0x0084	0x18490000  	6217
0x0088	0x18490000  	6217
0x008C	0x18490000  	6217
0x0090	0x18490000  	6217
0x0094	0x18490000  	6217
0x0098	0x18490000  	6217
0x009C	0x18490000  	6217
0x00A0	0x18490000  	6217
0x00A4	0x18490000  	6217
0x00A8	0x18490000  	6217
0x00AC	0x18490000  	6217
0x00B0	0x18510000  	6225
0x00B4	0x18490000  	6217
0x00B8	0x18490000  	6217
0x00BC	0x18490000  	6217
0x00C0	0x18490000  	6217
0x00C4	0x18490000  	6217
0x00C8	0x18490000  	6217
0x00CC	0x18490000  	6217
0x00D0	0x18490000  	6217
0x00D4	0x189D0000  	6301
0x00D8	0x18490000  	6217
0x00DC	0x18490000  	6217
0x00E0	0x18490000  	6217
0x00E4	0x18490000  	6217
0x00E8	0x18490000  	6217
0x00EC	0x18490000  	6217
0x00F0	0x18490000  	6217
0x00F4	0x18490000  	6217
0x00F8	0x18490000  	6217
0x00FC	0x18490000  	6217
0x0100	0x18490000  	6217
0x0104	0x18490000  	6217
0x0108	0x18490000  	6217
0x010C	0x18490000  	6217
0x0110	0x18490000  	6217
0x0114	0x18490000  	6217
0x0118	0x18490000  	6217
0x011C	0x18490000  	6217
0x0120	0x18490000  	6217
0x0124	0x18490000  	6217
0x0128	0x18490000  	6217
0x012C	0x18490000  	6217
; end of ____SysVT
_main:
;main.c, 198 :: 		void main(void)
0x1910	0xB081    SUB	SP, SP, #4
0x1912	0xF000F845  BL	6560
0x1916	0xF000FC57  BL	8648
0x191A	0xF000F8B3  BL	6788
0x191E	0xF000FC13  BL	8520
;main.c, 202 :: 		Delay_ms(200);
0x1922	0xF64967FF  MOVW	R7, #40703
0x1926	0xF2C00724  MOVT	R7, #36
L_main51:
0x192A	0x1E7F    SUBS	R7, R7, #1
0x192C	0xD1FD    BNE	L_main51
0x192E	0xBF00    NOP
0x1930	0xBF00    NOP
0x1932	0xBF00    NOP
0x1934	0xBF00    NOP
0x1936	0xBF00    NOP
;main.c, 203 :: 		GPIO_Configure();
0x1938	0xF7FFFC06  BL	_GPIO_Configure+0
;main.c, 204 :: 		InitUART1();
0x193C	0xF7FFFCA0  BL	_InitUART1+0
;main.c, 205 :: 		InitTimers();
0x1940	0xF7FFFF58  BL	_InitTimers+0
;main.c, 206 :: 		LCD_Initial();
0x1944	0xF7FFFD94  BL	_LCD_Initial+0
;main.c, 207 :: 		Clear_Screen(BLACK);
0x1948	0x2000    MOVS	R0, #0
0x194A	0xF7FFFEC9  BL	_Clear_Screen+0
;main.c, 208 :: 		Display_Str(2, 2, WHITE,PRN, "Terminal rev 1.0");
0x194E	0x4812    LDR	R0, [PC, #72]
0x1950	0xB401    PUSH	(R0)
0x1952	0x2300    MOVS	R3, #0
0x1954	0xF64F72FF  MOVW	R2, #65535
0x1958	0x2102    MOVS	R1, #2
0x195A	0x2002    MOVS	R0, #2
0x195C	0xF7FFFCC6  BL	_Display_Str+0
0x1960	0xB001    ADD	SP, SP, #4
;main.c, 209 :: 		Delay_ms(2000);
0x1962	0xF24357FF  MOVW	R7, #13823
0x1966	0xF2C0176E  MOVT	R7, #366
L_main53:
0x196A	0x1E7F    SUBS	R7, R7, #1
0x196C	0xD1FD    BNE	L_main53
0x196E	0xBF00    NOP
0x1970	0xBF00    NOP
0x1972	0xBF00    NOP
0x1974	0xBF00    NOP
0x1976	0xBF00    NOP
;main.c, 210 :: 		Clear_Screen(BLACK);
0x1978	0x2000    MOVS	R0, #0
0x197A	0xF7FFFEB1  BL	_Clear_Screen+0
;main.c, 212 :: 		while (1){
L_main55:
;main.c, 213 :: 		Handle_UART_Input();
0x197E	0xF7FFFEC5  BL	_Handle_UART_Input+0
;main.c, 214 :: 		if (b20ms){
0x1982	0x4906    LDR	R1, [PC, #24]
0x1984	0x6808    LDR	R0, [R1, #0]
0x1986	0xB128    CBZ	R0, L_main57
;main.c, 215 :: 		b20ms = 0;
0x1988	0x2100    MOVS	R1, #0
0x198A	0xB249    SXTB	R1, R1
0x198C	0x4803    LDR	R0, [PC, #12]
0x198E	0x6001    STR	R1, [R0, #0]
;main.c, 216 :: 		HandleKeyPress();
0x1990	0xF7FFFA26  BL	_HandleKeyPress+0
;main.c, 217 :: 		}
L_main57:
;main.c, 218 :: 		}
0x1994	0xE7F3    B	L_main55
;main.c, 219 :: 		}
L_end_main:
L__main_end_loop:
0x1996	0xE7FE    B	L__main_end_loop
0x1998	0x21120000  	?lstr_1_main+0
0x199C	0x14042200  	_b20ms+0
; end of _main
_GPIO_Configure:
;HW_V1_Config.c, 12 :: 		void GPIO_Configure(void)
0x1148	0xB081    SUB	SP, SP, #4
;HW_V1_Config.c, 14 :: 		IOPAEN_bit = 1;     // !!!!!!!! VERY IMPORTANT TO ACTIVATE THE APB2 PERIPHERAL CLOCK ENABLES FIRST  !!!!!!!!!!!
0x114A	0x2201    MOVS	R2, #1
0x114C	0xB252    SXTB	R2, R2
0x114E	0x4821    LDR	R0, [PC, #132]
0x1150	0x6002    STR	R2, [R0, #0]
;HW_V1_Config.c, 23 :: 		+------------ Nib7  KR    Pull up input */
0x1152	0x4921    LDR	R1, [PC, #132]
0x1154	0x4821    LDR	R0, [PC, #132]
0x1156	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 32 :: 		+------------ Nib15 TDI   Pull up input*/
0x1158	0x4921    LDR	R1, [PC, #132]
0x115A	0x4822    LDR	R0, [PC, #136]
0x115C	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 33 :: 		GPIOA_ODR = 0x0FFFF;
0x115E	0xF64F71FF  MOVW	R1, #65535
0x1162	0x4821    LDR	R0, [PC, #132]
0x1164	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 35 :: 		IOPBEN_bit = 1;
0x1166	0x4821    LDR	R0, [PC, #132]
0x1168	0x6002    STR	R2, [R0, #0]
;HW_V1_Config.c, 44 :: 		+------------ Nib7  NC    Pull up input  */
0x116A	0x4921    LDR	R1, [PC, #132]
0x116C	0x4821    LDR	R0, [PC, #132]
0x116E	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 53 :: 		+------------ Nib15 MOSI  Alternate output*/
0x1170	0x4921    LDR	R1, [PC, #132]
0x1172	0x4822    LDR	R0, [PC, #136]
0x1174	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 54 :: 		GPIOB_ODR = 0x0FFFF;
0x1176	0xF64F71FF  MOVW	R1, #65535
0x117A	0x4821    LDR	R0, [PC, #132]
0x117C	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 56 :: 		IOPCEN_bit = 1;
0x117E	0x4821    LDR	R0, [PC, #132]
0x1180	0x6002    STR	R2, [R0, #0]
;HW_V1_Config.c, 65 :: 		+------------ Nib7  NC    Pull up input */
0x1182	0x4921    LDR	R1, [PC, #132]
0x1184	0x4821    LDR	R0, [PC, #132]
0x1186	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 74 :: 		+------------ Nib15 NC    Pull up input*/
0x1188	0x4921    LDR	R1, [PC, #132]
0x118A	0x4822    LDR	R0, [PC, #136]
0x118C	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 75 :: 		GPIOC_ODR = 0x0FFF0;
0x118E	0xF64F71F0  MOVW	R1, #65520
0x1192	0x4821    LDR	R0, [PC, #132]
0x1194	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 77 :: 		IOPDEN_bit = 1;
0x1196	0x4821    LDR	R0, [PC, #132]
0x1198	0x6002    STR	R2, [R0, #0]
;HW_V1_Config.c, 86 :: 		+------------ Nib7  nCS   Hight speed output*/
0x119A	0x4921    LDR	R1, [PC, #132]
0x119C	0x4821    LDR	R0, [PC, #132]
0x119E	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 95 :: 		+------------ Nib15 NC    Pull up input*/
0x11A0	0x4921    LDR	R1, [PC, #132]
0x11A2	0x4822    LDR	R0, [PC, #136]
0x11A4	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 96 :: 		GPIOD_ODR = 0x0FF7F;
0x11A6	0xF64F717F  MOVW	R1, #65407
0x11AA	0x4821    LDR	R0, [PC, #132]
0x11AC	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 98 :: 		IOPEEN_bit = 1;
0x11AE	0x4821    LDR	R0, [PC, #132]
0x11B0	0x6002    STR	R2, [R0, #0]
;HW_V1_Config.c, 99 :: 		GPIOE_CRL = 0x33333333;   //Bit0-7  Hight speed output£¨LCD_DB0-7 £©
0x11B2	0xF04F3133  MOV	R1, #858993459
0x11B6	0x4820    LDR	R0, [PC, #128]
0x11B8	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 100 :: 		GPIOE_CRH = 0x33333333;   //Bit8-15 Hight speed output£¨LCD_DB8-15£©
0x11BA	0xF04F3133  MOV	R1, #858993459
0x11BE	0x481F    LDR	R0, [PC, #124]
0x11C0	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 102 :: 		AFIOEN_bit = 1;
0x11C2	0x481F    LDR	R0, [PC, #124]
0x11C4	0x6002    STR	R2, [R0, #0]
;HW_V1_Config.c, 107 :: 		++++--------- Reset value */
0x11C6	0xF2412100  MOVW	R1, #4608
0x11CA	0x481E    LDR	R0, [PC, #120]
0x11CC	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 108 :: 		}
L_end_GPIO_Configure:
0x11CE	0xB001    ADD	SP, SP, #4
0x11D0	0x4770    BX	LR
0x11D2	0xBF00    NOP
0x11D4	0x03084242  	IOPAEN_bit+0
0x11D8	0x80808888  	#-2004320128
0x11DC	0x08004001  	GPIOA_CRL+0
0x11E0	0x488B8884  	#-2004596597
0x11E4	0x08044001  	GPIOA_CRH+0
0x11E8	0x080C4001  	GPIOA_ODR+0
0x11EC	0x030C4242  	IOPBEN_bit+0
0x11F0	0x84118888  	#-2004319215
0x11F4	0x0C004001  	GPIOB_CRL+0
0x11F8	0xB488BBB1  	#-1145981816
0x11FC	0x0C044001  	GPIOB_CRH+0
0x1200	0x0C0C4001  	GPIOB_ODR+0
0x1204	0x03104242  	IOPCEN_bit+0
0x1208	0x88818411  	#-2079225727
0x120C	0x10004001  	GPIOC_CRL+0
0x1210	0x88848888  	#-2004318076
0x1214	0x10044001  	GPIOC_CRH+0
0x1218	0x100C4001  	GPIOC_ODR+0
0x121C	0x03144242  	IOPDEN_bit+0
0x1220	0x88383833  	#942901304
0x1224	0x14004001  	GPIOD_CRL+0
0x1228	0x8884888B  	#-2004121468
0x122C	0x14044001  	GPIOD_CRH+0
0x1230	0x140C4001  	GPIOD_ODR+0
0x1234	0x03184242  	IOPEEN_bit+0
0x1238	0x18004001  	GPIOE_CRL+0
0x123C	0x18044001  	GPIOE_CRH+0
0x1240	0x03004242  	AFIOEN_bit+0
0x1244	0x00044001  	AFIO_MAPR+0
; end of _GPIO_Configure
_InitUART1:
;HW_V1_Config.c, 110 :: 		void InitUART1(void)
0x1280	0xB081    SUB	SP, SP, #4
0x1282	0xF8CDE000  STR	LR, [SP, #0]
;HW_V1_Config.c, 113 :: 		UART1_Init_Advanced(19200,_UART_8_BIT_DATA,_UART_NOPARITY,_UART_ONE_STOPBIT,&_GPIO_MODULE_USART1_PA9_10); // simple uart
0x1286	0x4812    LDR	R0, [PC, #72]
0x1288	0xB401    PUSH	(R0)
0x128A	0xF2400300  MOVW	R3, #0
0x128E	0xF2400200  MOVW	R2, #0
0x1292	0xF2400100  MOVW	R1, #0
0x1296	0xF6443000  MOVW	R0, #19200
0x129A	0xF7FFFD8D  BL	_UART1_Init_Advanced+0
0x129E	0xB001    ADD	SP, SP, #4
;HW_V1_Config.c, 114 :: 		NVIC_IntEnable(IVT_INT_USART1);
0x12A0	0xF2400035  MOVW	R0, #53
0x12A4	0xF7FFFD2E  BL	_NVIC_IntEnable+0
;HW_V1_Config.c, 115 :: 		TCIE_USART1_CR1_bit = 0;        // no interrupts with xmit
0x12A8	0x2200    MOVS	R2, #0
0x12AA	0xB252    SXTB	R2, R2
0x12AC	0x4809    LDR	R0, [PC, #36]
0x12AE	0x6002    STR	R2, [R0, #0]
;HW_V1_Config.c, 116 :: 		UE_bit = 1;                     // enable USART1
0x12B0	0x2101    MOVS	R1, #1
0x12B2	0xB249    SXTB	R1, R1
0x12B4	0x4808    LDR	R0, [PC, #32]
0x12B6	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 117 :: 		RE_bit = 1;                     // receiver 1 enable
0x12B8	0x4808    LDR	R0, [PC, #32]
0x12BA	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 118 :: 		RXNEIE_USART1_CR1_bit = 1;      // rx interrupts on
0x12BC	0x4808    LDR	R0, [PC, #32]
0x12BE	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 119 :: 		TXEIE_USART1_CR1_bit = 0;
0x12C0	0x4808    LDR	R0, [PC, #32]
0x12C2	0x6002    STR	R2, [R0, #0]
;HW_V1_Config.c, 120 :: 		TE_bit = 1;                     // tx 1 always enabled
0x12C4	0x4808    LDR	R0, [PC, #32]
0x12C6	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 121 :: 		}
L_end_InitUART1:
0x12C8	0xF8DDE000  LDR	LR, [SP, #0]
0x12CC	0xB001    ADD	SP, SP, #4
0x12CE	0x4770    BX	LR
0x12D0	0x208C0000  	__GPIO_MODULE_USART1_PA9_10+0
0x12D4	0x01984227  	TCIE_USART1_CR1_bit+0
0x12D8	0x01B44227  	UE_bit+0
0x12DC	0x01884227  	RE_bit+0
0x12E0	0x01944227  	RXNEIE_USART1_CR1_bit+0
0x12E4	0x019C4227  	TXEIE_USART1_CR1_bit+0
0x12E8	0x018C4227  	TE_bit+0
; end of _InitUART1
_UART1_Init_Advanced:
;__Lib_UART_123_45.c, 372 :: 		
; stop_bits start address is: 12 (R3)
; parity start address is: 8 (R2)
; data_bits start address is: 4 (R1)
0x0DB8	0xB081    SUB	SP, SP, #4
0x0DBA	0xF8CDE000  STR	LR, [SP, #0]
; stop_bits end address is: 12 (R3)
; parity end address is: 8 (R2)
; data_bits end address is: 4 (R1)
; data_bits start address is: 4 (R1)
; parity start address is: 8 (R2)
; stop_bits start address is: 12 (R3)
; module start address is: 20 (R5)
0x0DBE	0x9D01    LDR	R5, [SP, #4]
;__Lib_UART_123_45.c, 374 :: 		
0x0DC0	0x462C    MOV	R4, R5
; module end address is: 20 (R5)
0x0DC2	0xB410    PUSH	(R4)
; parity end address is: 8 (R2)
0x0DC4	0xB408    PUSH	(R3)
0x0DC6	0xB293    UXTH	R3, R2
0x0DC8	0xB28A    UXTH	R2, R1
; data_bits end address is: 4 (R1)
0x0DCA	0x4601    MOV	R1, R0
0x0DCC	0x4803    LDR	R0, [PC, #12]
; stop_bits end address is: 12 (R3)
0x0DCE	0xF7FFFC1D  BL	__Lib_UART_123_45_UARTx_Init_Advanced+0
0x0DD2	0xB002    ADD	SP, SP, #8
;__Lib_UART_123_45.c, 375 :: 		
L_end_UART1_Init_Advanced:
0x0DD4	0xF8DDE000  LDR	LR, [SP, #0]
0x0DD8	0xB001    ADD	SP, SP, #4
0x0DDA	0x4770    BX	LR
0x0DDC	0x38004001  	USART1_SR+0
; end of _UART1_Init_Advanced
__Lib_UART_123_45_UARTx_Init_Advanced:
;__Lib_UART_123_45.c, 294 :: 		
; parity start address is: 12 (R3)
; baud_rate start address is: 4 (R1)
0x060C	0xB08A    SUB	SP, SP, #40
0x060E	0xF8CDE000  STR	LR, [SP, #0]
0x0612	0x4683    MOV	R11, R0
0x0614	0xB298    UXTH	R0, R3
0x0616	0x468C    MOV	R12, R1
; parity end address is: 12 (R3)
; baud_rate end address is: 4 (R1)
; UART_Base start address is: 44 (R11)
; baud_rate start address is: 48 (R12)
; stop_bits start address is: 4 (R1)
0x0618	0xF8BD1028  LDRH	R1, [SP, #40]
; module start address is: 24 (R6)
0x061C	0x9E0B    LDR	R6, [SP, #44]
;__Lib_UART_123_45.c, 298 :: 		
0x061E	0xAC04    ADD	R4, SP, #16
0x0620	0xF8AD1004  STRH	R1, [SP, #4]
0x0624	0xF8AD0008  STRH	R0, [SP, #8]
0x0628	0x4620    MOV	R0, R4
0x062A	0xF7FFFF9D  BL	_RCC_GetClocksFrequency+0
0x062E	0xF8BD0008  LDRH	R0, [SP, #8]
0x0632	0xF8BD1004  LDRH	R1, [SP, #4]
;__Lib_UART_123_45.c, 301 :: 		
0x0636	0x4C65    LDR	R4, [PC, #404]
0x0638	0x45A3    CMP	R11, R4
0x063A	0xD112    BNE	L___Lib_UART_123_45_UARTx_Init_Advanced15
;__Lib_UART_123_45.c, 302 :: 		
0x063C	0x2501    MOVS	R5, #1
0x063E	0xB26D    SXTB	R5, R5
0x0640	0x4C63    LDR	R4, [PC, #396]
0x0642	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 303 :: 		
0x0644	0x4D63    LDR	R5, [PC, #396]
0x0646	0x4C64    LDR	R4, [PC, #400]
0x0648	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 304 :: 		
0x064A	0x4D64    LDR	R5, [PC, #400]
0x064C	0x4C64    LDR	R4, [PC, #400]
0x064E	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 305 :: 		
0x0650	0x4D64    LDR	R5, [PC, #400]
0x0652	0x4C65    LDR	R4, [PC, #404]
0x0654	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 306 :: 		
0x0656	0x4D65    LDR	R5, [PC, #404]
0x0658	0x4C65    LDR	R4, [PC, #404]
0x065A	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 307 :: 		
0x065C	0x9C07    LDR	R4, [SP, #28]
0x065E	0x9403    STR	R4, [SP, #12]
;__Lib_UART_123_45.c, 308 :: 		
0x0660	0xE056    B	L___Lib_UART_123_45_UARTx_Init_Advanced16
L___Lib_UART_123_45_UARTx_Init_Advanced15:
;__Lib_UART_123_45.c, 309 :: 		
0x0662	0x4C64    LDR	R4, [PC, #400]
0x0664	0x45A3    CMP	R11, R4
0x0666	0xD112    BNE	L___Lib_UART_123_45_UARTx_Init_Advanced17
;__Lib_UART_123_45.c, 310 :: 		
0x0668	0x2501    MOVS	R5, #1
0x066A	0xB26D    SXTB	R5, R5
0x066C	0x4C62    LDR	R4, [PC, #392]
0x066E	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 311 :: 		
0x0670	0x4D62    LDR	R5, [PC, #392]
0x0672	0x4C59    LDR	R4, [PC, #356]
0x0674	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 312 :: 		
0x0676	0x4D62    LDR	R5, [PC, #392]
0x0678	0x4C59    LDR	R4, [PC, #356]
0x067A	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 313 :: 		
0x067C	0x4D61    LDR	R5, [PC, #388]
0x067E	0x4C5A    LDR	R4, [PC, #360]
0x0680	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 314 :: 		
0x0682	0x4D61    LDR	R5, [PC, #388]
0x0684	0x4C5A    LDR	R4, [PC, #360]
0x0686	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 315 :: 		
0x0688	0x9C06    LDR	R4, [SP, #24]
0x068A	0x9403    STR	R4, [SP, #12]
;__Lib_UART_123_45.c, 316 :: 		
0x068C	0xE040    B	L___Lib_UART_123_45_UARTx_Init_Advanced18
L___Lib_UART_123_45_UARTx_Init_Advanced17:
;__Lib_UART_123_45.c, 317 :: 		
0x068E	0x4C5F    LDR	R4, [PC, #380]
0x0690	0x45A3    CMP	R11, R4
0x0692	0xD112    BNE	L___Lib_UART_123_45_UARTx_Init_Advanced19
;__Lib_UART_123_45.c, 318 :: 		
0x0694	0x2501    MOVS	R5, #1
0x0696	0xB26D    SXTB	R5, R5
0x0698	0x4C5D    LDR	R4, [PC, #372]
0x069A	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 319 :: 		
0x069C	0x4D5D    LDR	R5, [PC, #372]
0x069E	0x4C4E    LDR	R4, [PC, #312]
0x06A0	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 320 :: 		
0x06A2	0x4D5D    LDR	R5, [PC, #372]
0x06A4	0x4C4E    LDR	R4, [PC, #312]
0x06A6	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 321 :: 		
0x06A8	0x4D5C    LDR	R5, [PC, #368]
0x06AA	0x4C4F    LDR	R4, [PC, #316]
0x06AC	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 322 :: 		
0x06AE	0x4D5C    LDR	R5, [PC, #368]
0x06B0	0x4C4F    LDR	R4, [PC, #316]
0x06B2	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 323 :: 		
0x06B4	0x9C06    LDR	R4, [SP, #24]
0x06B6	0x9403    STR	R4, [SP, #12]
;__Lib_UART_123_45.c, 324 :: 		
0x06B8	0xE02A    B	L___Lib_UART_123_45_UARTx_Init_Advanced20
L___Lib_UART_123_45_UARTx_Init_Advanced19:
;__Lib_UART_123_45.c, 325 :: 		
0x06BA	0x4C5A    LDR	R4, [PC, #360]
0x06BC	0x45A3    CMP	R11, R4
0x06BE	0xD112    BNE	L___Lib_UART_123_45_UARTx_Init_Advanced21
;__Lib_UART_123_45.c, 326 :: 		
0x06C0	0x2501    MOVS	R5, #1
0x06C2	0xB26D    SXTB	R5, R5
0x06C4	0x4C58    LDR	R4, [PC, #352]
0x06C6	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 327 :: 		
0x06C8	0x4D58    LDR	R5, [PC, #352]
0x06CA	0x4C43    LDR	R4, [PC, #268]
0x06CC	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 328 :: 		
0x06CE	0x4D58    LDR	R5, [PC, #352]
0x06D0	0x4C43    LDR	R4, [PC, #268]
0x06D2	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 329 :: 		
0x06D4	0x4D57    LDR	R5, [PC, #348]
0x06D6	0x4C44    LDR	R4, [PC, #272]
0x06D8	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 330 :: 		
0x06DA	0x4D57    LDR	R5, [PC, #348]
0x06DC	0x4C44    LDR	R4, [PC, #272]
0x06DE	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 331 :: 		
0x06E0	0x9C06    LDR	R4, [SP, #24]
0x06E2	0x9403    STR	R4, [SP, #12]
;__Lib_UART_123_45.c, 332 :: 		
0x06E4	0xE014    B	L___Lib_UART_123_45_UARTx_Init_Advanced22
L___Lib_UART_123_45_UARTx_Init_Advanced21:
;__Lib_UART_123_45.c, 333 :: 		
0x06E6	0x4C55    LDR	R4, [PC, #340]
0x06E8	0x45A3    CMP	R11, R4
0x06EA	0xD111    BNE	L___Lib_UART_123_45_UARTx_Init_Advanced23
;__Lib_UART_123_45.c, 334 :: 		
0x06EC	0x2501    MOVS	R5, #1
0x06EE	0xB26D    SXTB	R5, R5
0x06F0	0x4C53    LDR	R4, [PC, #332]
0x06F2	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 335 :: 		
0x06F4	0x4D53    LDR	R5, [PC, #332]
0x06F6	0x4C38    LDR	R4, [PC, #224]
0x06F8	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 336 :: 		
0x06FA	0x4D53    LDR	R5, [PC, #332]
0x06FC	0x4C38    LDR	R4, [PC, #224]
0x06FE	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 337 :: 		
0x0700	0x4D52    LDR	R5, [PC, #328]
0x0702	0x4C39    LDR	R4, [PC, #228]
0x0704	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 338 :: 		
0x0706	0x4D52    LDR	R5, [PC, #328]
0x0708	0x4C39    LDR	R4, [PC, #228]
0x070A	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 339 :: 		
0x070C	0x9C06    LDR	R4, [SP, #24]
0x070E	0x9403    STR	R4, [SP, #12]
;__Lib_UART_123_45.c, 340 :: 		
L___Lib_UART_123_45_UARTx_Init_Advanced23:
L___Lib_UART_123_45_UARTx_Init_Advanced22:
L___Lib_UART_123_45_UARTx_Init_Advanced20:
L___Lib_UART_123_45_UARTx_Init_Advanced18:
L___Lib_UART_123_45_UARTx_Init_Advanced16:
;__Lib_UART_123_45.c, 342 :: 		
0x0710	0xF8AD1004  STRH	R1, [SP, #4]
; module end address is: 24 (R6)
0x0714	0xF8AD0008  STRH	R0, [SP, #8]
0x0718	0x4630    MOV	R0, R6
0x071A	0xF7FFFE9D  BL	_GPIO_Alternate_Function_Enable+0
0x071E	0xF8BD0008  LDRH	R0, [SP, #8]
0x0722	0xF8BD1004  LDRH	R1, [SP, #4]
;__Lib_UART_123_45.c, 344 :: 		
0x0726	0xF10B0510  ADD	R5, R11, #16
0x072A	0x2400    MOVS	R4, #0
0x072C	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45.c, 345 :: 		
0x072E	0xF10B0510  ADD	R5, R11, #16
0x0732	0x682C    LDR	R4, [R5, #0]
0x0734	0x430C    ORRS	R4, R1
; stop_bits end address is: 4 (R1)
0x0736	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45.c, 346 :: 		
0x0738	0xF10B050C  ADD	R5, R11, #12
0x073C	0x2400    MOVS	R4, #0
0x073E	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45.c, 348 :: 		
0x0740	0xB118    CBZ	R0, L___Lib_UART_123_45_UARTx_Init_Advanced38
;__Lib_UART_123_45.c, 349 :: 		
0x0742	0xF4406080  ORR	R0, R0, #1024
0x0746	0xB280    UXTH	R0, R0
;__Lib_UART_123_45.c, 350 :: 		
0x0748	0xE7FF    B	L___Lib_UART_123_45_UARTx_Init_Advanced24
L___Lib_UART_123_45_UARTx_Init_Advanced38:
;__Lib_UART_123_45.c, 348 :: 		
;__Lib_UART_123_45.c, 350 :: 		
L___Lib_UART_123_45_UARTx_Init_Advanced24:
;__Lib_UART_123_45.c, 352 :: 		
0x074A	0xF10B050C  ADD	R5, R11, #12
0x074E	0x682C    LDR	R4, [R5, #0]
0x0750	0x4304    ORRS	R4, R0
0x0752	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45.c, 354 :: 		
0x0754	0xF10B060C  ADD	R6, R11, #12
0x0758	0x2501    MOVS	R5, #1
0x075A	0x6834    LDR	R4, [R6, #0]
0x075C	0xF365344D  BFI	R4, R5, #13, #1
0x0760	0x6034    STR	R4, [R6, #0]
;__Lib_UART_123_45.c, 355 :: 		
0x0762	0xF10B060C  ADD	R6, R11, #12
0x0766	0x2501    MOVS	R5, #1
0x0768	0x6834    LDR	R4, [R6, #0]
0x076A	0xF36504C3  BFI	R4, R5, #3, #1
0x076E	0x6034    STR	R4, [R6, #0]
;__Lib_UART_123_45.c, 356 :: 		
0x0770	0xF10B060C  ADD	R6, R11, #12
0x0774	0x2501    MOVS	R5, #1
0x0776	0x6834    LDR	R4, [R6, #0]
0x0778	0xF3650482  BFI	R4, R5, #2, #1
0x077C	0x6034    STR	R4, [R6, #0]
;__Lib_UART_123_45.c, 357 :: 		
0x077E	0xF10B0514  ADD	R5, R11, #20
0x0782	0x2400    MOVS	R4, #0
0x0784	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45.c, 362 :: 		
0x0786	0x9D03    LDR	R5, [SP, #12]
0x0788	0x2419    MOVS	R4, #25
0x078A	0x4365    MULS	R5, R4, R5
0x078C	0xEA4F048C  LSL	R4, R12, #2
; baud_rate end address is: 48 (R12)
0x0790	0xFBB5F5F4  UDIV	R5, R5, R4
0x0794	0x4628    MOV	R0, R5
;__Lib_UART_123_45.c, 363 :: 		
0x0796	0x2464    MOVS	R4, #100
0x0798	0xFBB5F4F4  UDIV	R4, R5, R4
0x079C	0x0124    LSLS	R4, R4, #4
; tmpreg start address is: 4 (R1)
0x079E	0x4621    MOV	R1, R4
;__Lib_UART_123_45.c, 365 :: 		
0x07A0	0x0925    LSRS	R5, R4, #4
0x07A2	0x2464    MOVS	R4, #100
0x07A4	0x436C    MULS	R4, R5, R4
0x07A6	0x1B04    SUB	R4, R0, R4
;__Lib_UART_123_45.c, 366 :: 		
0x07A8	0x0124    LSLS	R4, R4, #4
0x07AA	0xF2040532  ADDW	R5, R4, #50
0x07AE	0x2464    MOVS	R4, #100
0x07B0	0xFBB5F4F4  UDIV	R4, R5, R4
0x07B4	0xF004040F  AND	R4, R4, #15
0x07B8	0xEA410404  ORR	R4, R1, R4, LSL #0
; tmpreg end address is: 4 (R1)
;__Lib_UART_123_45.c, 368 :: 		
0x07BC	0xF10B0508  ADD	R5, R11, #8
; UART_Base end address is: 44 (R11)
0x07C0	0xB2A4    UXTH	R4, R4
0x07C2	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45.c, 369 :: 		
L_end_UARTx_Init_Advanced:
0x07C4	0xF8DDE000  LDR	LR, [SP, #0]
0x07C8	0xB00A    ADD	SP, SP, #40
0x07CA	0x4770    BX	LR
0x07CC	0x38004001  	USART1_SR+0
0x07D0	0x03384242  	RCC_APB2ENR+0
0x07D4	0xFFFFFFFF  	_UART1_Write+0
0x07D8	0x00A82000  	_UART_Wr_Ptr+0
0x07DC	0xFFFFFFFF  	_UART1_Read+0
0x07E0	0x00AC2000  	_UART_Rd_Ptr+0
0x07E4	0xFFFFFFFF  	_UART1_Data_Ready+0
0x07E8	0x00B02000  	_UART_Rdy_Ptr+0
0x07EC	0xFFFFFFFF  	_UART1_Tx_Idle+0
0x07F0	0x00B42000  	_UART_Tx_Idle_Ptr+0
0x07F4	0x44004000  	USART2_SR+0
0x07F8	0x03C44242  	RCC_APB1ENR+0
0x07FC	0xFFFFFFFF  	_UART2_Write+0
0x0800	0xFFFFFFFF  	_UART2_Read+0
0x0804	0xFFFFFFFF  	_UART2_Data_Ready+0
0x0808	0xFFFFFFFF  	_UART2_Tx_Idle+0
0x080C	0x48004000  	USART3_SR+0
0x0810	0x03C84242  	RCC_APB1ENR+0
0x0814	0xFFFFFFFF  	_UART3_Write+0
0x0818	0xFFFFFFFF  	_UART3_Read+0
0x081C	0xFFFFFFFF  	_UART3_Data_Ready+0
0x0820	0xFFFFFFFF  	_UART3_Tx_Idle+0
0x0824	0x4C004000  	UART4_SR+0
0x0828	0x03CC4242  	RCC_APB1ENR+0
0x082C	0xFFFFFFFF  	_UART4_Write+0
0x0830	0xFFFFFFFF  	_UART4_Read+0
0x0834	0xFFFFFFFF  	_UART4_Data_Ready+0
0x0838	0xFFFFFFFF  	_UART4_Tx_Idle+0
0x083C	0x50004000  	UART5_SR+0
0x0840	0x03D04242  	RCC_APB1ENR+0
0x0844	0xFFFFFFFF  	_UART5_Write+0
0x0848	0xFFFFFFFF  	_UART5_Read+0
0x084C	0xFFFFFFFF  	_UART5_Data_Ready+0
0x0850	0xFFFFFFFF  	_UART5_Tx_Idle+0
; end of __Lib_UART_123_45_UARTx_Init_Advanced
_RCC_GetClocksFrequency:
;__Lib_System_101_102_103.c, 337 :: 		
; RCC_Clocks start address is: 0 (R0)
0x0568	0xB082    SUB	SP, SP, #8
0x056A	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_System_101_102_103.c, 340 :: 		
0x056E	0x4603    MOV	R3, R0
; RCC_Clocks end address is: 0 (R0)
; RCC_Clocks start address is: 12 (R3)
0x0570	0x4619    MOV	R1, R3
0x0572	0x9101    STR	R1, [SP, #4]
0x0574	0xF7FFFF1C  BL	_Get_Fosc_kHz+0
0x0578	0xF24031E8  MOVW	R1, #1000
0x057C	0xFB00F201  MUL	R2, R0, R1
0x0580	0x9901    LDR	R1, [SP, #4]
0x0582	0x600A    STR	R2, [R1, #0]
;__Lib_System_101_102_103.c, 343 :: 		
0x0584	0x491E    LDR	R1, [PC, #120]
0x0586	0x7809    LDRB	R1, [R1, #0]
0x0588	0xF3C11103  UBFX	R1, R1, #4, #4
; tmp start address is: 0 (R0)
0x058C	0xB2C8    UXTB	R0, R1
;__Lib_System_101_102_103.c, 344 :: 		
0x058E	0x491D    LDR	R1, [PC, #116]
0x0590	0x1809    ADDS	R1, R1, R0
; tmp end address is: 0 (R0)
0x0592	0x7808    LDRB	R0, [R1, #0]
; presc start address is: 0 (R0)
;__Lib_System_101_102_103.c, 346 :: 		
0x0594	0x1D1A    ADDS	R2, R3, #4
0x0596	0x6819    LDR	R1, [R3, #0]
0x0598	0x40C1    LSRS	R1, R0
; presc end address is: 0 (R0)
0x059A	0x6011    STR	R1, [R2, #0]
;__Lib_System_101_102_103.c, 348 :: 		
0x059C	0x4918    LDR	R1, [PC, #96]
0x059E	0x8809    LDRH	R1, [R1, #0]
0x05A0	0xF3C12102  UBFX	R1, R1, #8, #3
; tmp start address is: 0 (R0)
0x05A4	0xB288    UXTH	R0, R1
;__Lib_System_101_102_103.c, 349 :: 		
0x05A6	0x4917    LDR	R1, [PC, #92]
0x05A8	0x1809    ADDS	R1, R1, R0
; tmp end address is: 0 (R0)
0x05AA	0x7808    LDRB	R0, [R1, #0]
; presc start address is: 0 (R0)
;__Lib_System_101_102_103.c, 351 :: 		
0x05AC	0xF2030208  ADDW	R2, R3, #8
0x05B0	0x1D19    ADDS	R1, R3, #4
0x05B2	0x6809    LDR	R1, [R1, #0]
0x05B4	0x40C1    LSRS	R1, R0
; presc end address is: 0 (R0)
0x05B6	0x6011    STR	R1, [R2, #0]
;__Lib_System_101_102_103.c, 353 :: 		
0x05B8	0x4911    LDR	R1, [PC, #68]
0x05BA	0x8809    LDRH	R1, [R1, #0]
0x05BC	0xF3C121C2  UBFX	R1, R1, #11, #3
; tmp start address is: 0 (R0)
0x05C0	0xB288    UXTH	R0, R1
;__Lib_System_101_102_103.c, 354 :: 		
0x05C2	0x4910    LDR	R1, [PC, #64]
0x05C4	0x1809    ADDS	R1, R1, R0
; tmp end address is: 0 (R0)
0x05C6	0x7808    LDRB	R0, [R1, #0]
; presc start address is: 0 (R0)
;__Lib_System_101_102_103.c, 356 :: 		
0x05C8	0xF203020C  ADDW	R2, R3, #12
0x05CC	0x1D19    ADDS	R1, R3, #4
0x05CE	0x6809    LDR	R1, [R1, #0]
0x05D0	0x40C1    LSRS	R1, R0
; presc end address is: 0 (R0)
0x05D2	0x6011    STR	R1, [R2, #0]
;__Lib_System_101_102_103.c, 358 :: 		
0x05D4	0x490A    LDR	R1, [PC, #40]
0x05D6	0x8809    LDRH	R1, [R1, #0]
0x05D8	0xF3C13181  UBFX	R1, R1, #14, #2
; tmp start address is: 0 (R0)
0x05DC	0xB288    UXTH	R0, R1
;__Lib_System_101_102_103.c, 359 :: 		
0x05DE	0x490A    LDR	R1, [PC, #40]
0x05E0	0x1809    ADDS	R1, R1, R0
; tmp end address is: 0 (R0)
0x05E2	0x7809    LDRB	R1, [R1, #0]
; presc start address is: 0 (R0)
0x05E4	0xB2C8    UXTB	R0, R1
;__Lib_System_101_102_103.c, 361 :: 		
0x05E6	0xF2030210  ADDW	R2, R3, #16
0x05EA	0xF203010C  ADDW	R1, R3, #12
; RCC_Clocks end address is: 12 (R3)
0x05EE	0x6809    LDR	R1, [R1, #0]
0x05F0	0xFBB1F1F0  UDIV	R1, R1, R0
; presc end address is: 0 (R0)
0x05F4	0x6011    STR	R1, [R2, #0]
;__Lib_System_101_102_103.c, 362 :: 		
L_end_RCC_GetClocksFrequency:
0x05F6	0xF8DDE000  LDR	LR, [SP, #0]
0x05FA	0xB002    ADD	SP, SP, #8
0x05FC	0x4770    BX	LR
0x05FE	0xBF00    NOP
0x0600	0x10044002  	RCC_CFGRbits+0
0x0604	0x21340000  	__Lib_System_101_102_103_APBAHBPrescTable+0
0x0608	0x21440000  	__Lib_System_101_102_103_ADCPrescTable+0
; end of _RCC_GetClocksFrequency
_Get_Fosc_kHz:
;__Lib_Delays.c, 9 :: 		unsigned long Get_Fosc_kHz(){
0x03B0	0xB081    SUB	SP, SP, #4
;__Lib_Delays.c, 10 :: 		return __System_CLOCK_IN_KHZ;
0x03B2	0x4802    LDR	R0, [PC, #8]
0x03B4	0x6800    LDR	R0, [R0, #0]
;__Lib_Delays.c, 11 :: 		}
L_end_Get_Fosc_kHz:
0x03B6	0xB001    ADD	SP, SP, #4
0x03B8	0x4770    BX	LR
0x03BA	0xBF00    NOP
0x03BC	0x00A42000  	___System_CLOCK_IN_KHZ+0
; end of _Get_Fosc_kHz
_GPIO_Alternate_Function_Enable:
;__Lib_GPIO_32F10x.c, 1070 :: 		
0x0458	0xB081    SUB	SP, SP, #4
0x045A	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_GPIO_32F10x.c, 1071 :: 		
;__Lib_GPIO_32F10x.c, 1072 :: 		
;__Lib_GPIO_32F10x.c, 1074 :: 		
0x045E	0x2201    MOVS	R2, #1
0x0460	0xB252    SXTB	R2, R2
0x0462	0x493E    LDR	R1, [PC, #248]
0x0464	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 1076 :: 		
0x0466	0xF2000168  ADDW	R1, R0, #104
0x046A	0x680B    LDR	R3, [R1, #0]
0x046C	0xF06F6100  MVN	R1, #134217728
0x0470	0xEA030201  AND	R2, R3, R1, LSL #0
; gpio_remap start address is: 16 (R4)
0x0474	0x4614    MOV	R4, R2
;__Lib_GPIO_32F10x.c, 1077 :: 		
0x0476	0xF0036100  AND	R1, R3, #134217728
0x047A	0x0EC9    LSRS	R1, R1, #27
; newstate start address is: 12 (R3)
0x047C	0x460B    MOV	R3, R1
;__Lib_GPIO_32F10x.c, 1079 :: 		
0x047E	0xF0024100  AND	R1, R2, #-2147483648
0x0482	0xF1B14F00  CMP	R1, #-2147483648
0x0486	0xD102    BNE	L_GPIO_Alternate_Function_Enable66
;__Lib_GPIO_32F10x.c, 1081 :: 		
0x0488	0x4935    LDR	R1, [PC, #212]
; tmpreg start address is: 8 (R2)
0x048A	0x680A    LDR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 1082 :: 		
; tmpreg end address is: 8 (R2)
0x048C	0xE001    B	L_GPIO_Alternate_Function_Enable67
L_GPIO_Alternate_Function_Enable66:
;__Lib_GPIO_32F10x.c, 1085 :: 		
0x048E	0x4935    LDR	R1, [PC, #212]
; tmpreg start address is: 8 (R2)
0x0490	0x680A    LDR	R2, [R1, #0]
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 1086 :: 		
L_GPIO_Alternate_Function_Enable67:
;__Lib_GPIO_32F10x.c, 1088 :: 		
; tmpreg start address is: 8 (R2)
0x0492	0xF4042170  AND	R1, R4, #983040
0x0496	0x0C09    LSRS	R1, R1, #16
; tmpmask start address is: 24 (R6)
0x0498	0x460E    MOV	R6, R1
;__Lib_GPIO_32F10x.c, 1089 :: 		
0x049A	0xF64F71FF  MOVW	R1, #65535
0x049E	0xEA040101  AND	R1, R4, R1, LSL #0
; tmp start address is: 20 (R5)
0x04A2	0x460D    MOV	R5, R1
;__Lib_GPIO_32F10x.c, 1091 :: 		
0x04A4	0xF4041140  AND	R1, R4, #3145728
0x04A8	0xF5B11F40  CMP	R1, #3145728
0x04AC	0xD10D    BNE	L_GPIO_Alternate_Function_Enable68
; tmpmask end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 1093 :: 		
0x04AE	0xF06F6170  MVN	R1, #251658240
0x04B2	0xEA020101  AND	R1, R2, R1, LSL #0
; tmpreg end address is: 8 (R2)
; tmpreg start address is: 24 (R6)
0x04B6	0x460E    MOV	R6, R1
;__Lib_GPIO_32F10x.c, 1094 :: 		
0x04B8	0x492A    LDR	R1, [PC, #168]
0x04BA	0x680A    LDR	R2, [R1, #0]
0x04BC	0xF06F6170  MVN	R1, #251658240
0x04C0	0x400A    ANDS	R2, R1
0x04C2	0x4928    LDR	R1, [PC, #160]
0x04C4	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 1095 :: 		
0x04C6	0x4632    MOV	R2, R6
; tmpreg end address is: 24 (R6)
0x04C8	0xE017    B	L_GPIO_Alternate_Function_Enable69
L_GPIO_Alternate_Function_Enable68:
;__Lib_GPIO_32F10x.c, 1096 :: 		
; tmpreg start address is: 8 (R2)
; tmpmask start address is: 24 (R6)
0x04CA	0xF4041180  AND	R1, R4, #1048576
0x04CE	0xF5B11F80  CMP	R1, #1048576
0x04D2	0xD109    BNE	L_GPIO_Alternate_Function_Enable70
;__Lib_GPIO_32F10x.c, 1098 :: 		
0x04D4	0xF04F0103  MOV	R1, #3
0x04D8	0x40B1    LSLS	R1, R6
; tmpmask end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 1099 :: 		
0x04DA	0x43C9    MVN	R1, R1
0x04DC	0xEA020101  AND	R1, R2, R1, LSL #0
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 1100 :: 		
0x04E0	0xF0416170  ORR	R1, R1, #251658240
; tmpreg start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 1101 :: 		
0x04E4	0x460A    MOV	R2, R1
; tmpreg end address is: 4 (R1)
0x04E6	0xE008    B	L_GPIO_Alternate_Function_Enable71
L_GPIO_Alternate_Function_Enable70:
;__Lib_GPIO_32F10x.c, 1104 :: 		
; tmpreg start address is: 8 (R2)
0x04E8	0x0D61    LSRS	R1, R4, #21
0x04EA	0x0109    LSLS	R1, R1, #4
0x04EC	0xFA05F101  LSL	R1, R5, R1
0x04F0	0x43C9    MVN	R1, R1
0x04F2	0xEA020101  AND	R1, R2, R1, LSL #0
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 1105 :: 		
0x04F6	0xF0416270  ORR	R2, R1, #251658240
; tmpreg start address is: 8 (R2)
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 1106 :: 		
L_GPIO_Alternate_Function_Enable71:
; tmpreg start address is: 8 (R2)
; tmpreg end address is: 8 (R2)
L_GPIO_Alternate_Function_Enable69:
;__Lib_GPIO_32F10x.c, 1108 :: 		
; tmpreg start address is: 8 (R2)
0x04FA	0xB12B    CBZ	R3, L__GPIO_Alternate_Function_Enable106
; newstate end address is: 12 (R3)
;__Lib_GPIO_32F10x.c, 1110 :: 		
0x04FC	0x0D61    LSRS	R1, R4, #21
0x04FE	0x0109    LSLS	R1, R1, #4
0x0500	0xFA05F101  LSL	R1, R5, R1
; tmp end address is: 20 (R5)
0x0504	0x430A    ORRS	R2, R1
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 1111 :: 		
0x0506	0xE7FF    B	L_GPIO_Alternate_Function_Enable72
L__GPIO_Alternate_Function_Enable106:
;__Lib_GPIO_32F10x.c, 1108 :: 		
;__Lib_GPIO_32F10x.c, 1111 :: 		
L_GPIO_Alternate_Function_Enable72:
;__Lib_GPIO_32F10x.c, 1113 :: 		
; tmpreg start address is: 8 (R2)
0x0508	0xF0044100  AND	R1, R4, #-2147483648
; gpio_remap end address is: 16 (R4)
0x050C	0xF1B14F00  CMP	R1, #-2147483648
0x0510	0xD102    BNE	L_GPIO_Alternate_Function_Enable73
;__Lib_GPIO_32F10x.c, 1115 :: 		
0x0512	0x4913    LDR	R1, [PC, #76]
0x0514	0x600A    STR	R2, [R1, #0]
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 1116 :: 		
0x0516	0xE001    B	L_GPIO_Alternate_Function_Enable74
L_GPIO_Alternate_Function_Enable73:
;__Lib_GPIO_32F10x.c, 1119 :: 		
; tmpreg start address is: 8 (R2)
0x0518	0x4912    LDR	R1, [PC, #72]
0x051A	0x600A    STR	R2, [R1, #0]
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 1120 :: 		
L_GPIO_Alternate_Function_Enable74:
;__Lib_GPIO_32F10x.c, 1123 :: 		
; i start address is: 40 (R10)
0x051C	0xF2400A00  MOVW	R10, #0
; i end address is: 40 (R10)
0x0520	0x4681    MOV	R9, R0
;__Lib_GPIO_32F10x.c, 1124 :: 		
L_GPIO_Alternate_Function_Enable75:
; i start address is: 40 (R10)
; module start address is: 36 (R9)
0x0522	0xEA4F018A  LSL	R1, R10, #2
0x0526	0xEB090101  ADD	R1, R9, R1, LSL #0
0x052A	0x6809    LDR	R1, [R1, #0]
0x052C	0xF1B13FFF  CMP	R1, #-1
0x0530	0xD010    BEQ	L_GPIO_Alternate_Function_Enable76
;__Lib_GPIO_32F10x.c, 1125 :: 		
0x0532	0xF1090134  ADD	R1, R9, #52
0x0536	0xEA4F038A  LSL	R3, R10, #2
0x053A	0x18C9    ADDS	R1, R1, R3
0x053C	0x6809    LDR	R1, [R1, #0]
0x053E	0x460A    MOV	R2, R1
0x0540	0xEB090103  ADD	R1, R9, R3, LSL #0
0x0544	0x6809    LDR	R1, [R1, #0]
0x0546	0x4608    MOV	R0, R1
0x0548	0x4611    MOV	R1, R2
0x054A	0xF7FFFF39  BL	__Lib_GPIO_32F10x_GPIO_Configure_Pin+0
;__Lib_GPIO_32F10x.c, 1126 :: 		
0x054E	0xF10A0A01  ADD	R10, R10, #1
;__Lib_GPIO_32F10x.c, 1127 :: 		
; module end address is: 36 (R9)
; i end address is: 40 (R10)
0x0552	0xE7E6    B	L_GPIO_Alternate_Function_Enable75
L_GPIO_Alternate_Function_Enable76:
;__Lib_GPIO_32F10x.c, 1130 :: 		
L_end_GPIO_Alternate_Function_Enable:
0x0554	0xF8DDE000  LDR	LR, [SP, #0]
0x0558	0xB001    ADD	SP, SP, #4
0x055A	0x4770    BX	LR
0x055C	0x03004242  	RCC_APB2ENRbits+0
0x0560	0x001C4001  	AFIO_MAPR2+0
0x0564	0x00044001  	AFIO_MAPR+0
; end of _GPIO_Alternate_Function_Enable
__Lib_GPIO_32F10x_GPIO_Configure_Pin:
;__Lib_GPIO_32F10x.c, 1049 :: 		
; config start address is: 4 (R1)
0x03C0	0xB083    SUB	SP, SP, #12
0x03C2	0xF8CDE000  STR	LR, [SP, #0]
; config end address is: 4 (R1)
; config start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 1053 :: 		
0x03C6	0xF00003FF  AND	R3, R0, #255
0x03CA	0x091A    LSRS	R2, R3, #4
0x03CC	0x4610    MOV	R0, R2
;__Lib_GPIO_32F10x.c, 1054 :: 		
0x03CE	0xF003020F  AND	R2, R3, #15
; pin start address is: 12 (R3)
0x03D2	0x4613    MOV	R3, R2
;__Lib_GPIO_32F10x.c, 1057 :: 		
0x03D4	0xE014    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin57
;__Lib_GPIO_32F10x.c, 1058 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin59:
0x03D6	0x4A19    LDR	R2, [PC, #100]
0x03D8	0x9202    STR	R2, [SP, #8]
0x03DA	0xE01F    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 1059 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin60:
0x03DC	0x4A18    LDR	R2, [PC, #96]
0x03DE	0x9202    STR	R2, [SP, #8]
0x03E0	0xE01C    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 1060 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin61:
0x03E2	0x4A18    LDR	R2, [PC, #96]
0x03E4	0x9202    STR	R2, [SP, #8]
0x03E6	0xE019    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 1061 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin62:
0x03E8	0x4A17    LDR	R2, [PC, #92]
0x03EA	0x9202    STR	R2, [SP, #8]
0x03EC	0xE016    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 1062 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin63:
0x03EE	0x4A17    LDR	R2, [PC, #92]
0x03F0	0x9202    STR	R2, [SP, #8]
0x03F2	0xE013    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 1063 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin64:
0x03F4	0x4A16    LDR	R2, [PC, #88]
0x03F6	0x9202    STR	R2, [SP, #8]
0x03F8	0xE010    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 1064 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin65:
0x03FA	0x4A16    LDR	R2, [PC, #88]
0x03FC	0x9202    STR	R2, [SP, #8]
0x03FE	0xE00D    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 1065 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin57:
0x0400	0x2800    CMP	R0, #0
0x0402	0xD0E8    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin59
0x0404	0x2801    CMP	R0, #1
0x0406	0xD0E9    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin60
0x0408	0x2802    CMP	R0, #2
0x040A	0xD0EA    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin61
0x040C	0x2803    CMP	R0, #3
0x040E	0xD0EB    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin62
0x0410	0x2804    CMP	R0, #4
0x0412	0xD0EC    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin63
0x0414	0x2805    CMP	R0, #5
0x0416	0xD0ED    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin64
0x0418	0x2806    CMP	R0, #6
0x041A	0xD0EE    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin65
L___Lib_GPIO_32F10x_GPIO_Configure_Pin58:
;__Lib_GPIO_32F10x.c, 1067 :: 		
0x041C	0x2201    MOVS	R2, #1
0x041E	0xB212    SXTH	R2, R2
0x0420	0x409A    LSLS	R2, R3
; pin end address is: 12 (R3)
0x0422	0xF8AD2004  STRH	R2, [SP, #4]
; config end address is: 4 (R1)
0x0426	0x9802    LDR	R0, [SP, #8]
0x0428	0x460A    MOV	R2, R1
0x042A	0xF8BD1004  LDRH	R1, [SP, #4]
0x042E	0xF7FFFEC5  BL	_GPIO_Config+0
;__Lib_GPIO_32F10x.c, 1068 :: 		
L_end_GPIO_Configure_Pin:
0x0432	0xF8DDE000  LDR	LR, [SP, #0]
0x0436	0xB003    ADD	SP, SP, #12
0x0438	0x4770    BX	LR
0x043A	0xBF00    NOP
0x043C	0x08004001  	#1073809408
0x0440	0x0C004001  	#1073810432
0x0444	0x10004001  	#1073811456
0x0448	0x14004001  	#1073812480
0x044C	0x18004001  	#1073813504
0x0450	0x1C004001  	#1073814528
0x0454	0x20004001  	#1073815552
; end of __Lib_GPIO_32F10x_GPIO_Configure_Pin
_GPIO_Config:
;__Lib_GPIO_32F10x.c, 891 :: 		
; config start address is: 8 (R2)
; pin_mask start address is: 4 (R1)
0x01BC	0xB081    SUB	SP, SP, #4
0x01BE	0xF8CDE000  STR	LR, [SP, #0]
0x01C2	0xB28C    UXTH	R4, R1
0x01C4	0x4615    MOV	R5, R2
; config end address is: 8 (R2)
; pin_mask end address is: 4 (R1)
; pin_mask start address is: 16 (R4)
; config start address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 896 :: 		
0x01C6	0x4B77    LDR	R3, [PC, #476]
0x01C8	0xEA000303  AND	R3, R0, R3, LSL #0
; port start address is: 24 (R6)
0x01CC	0x461E    MOV	R6, R3
;__Lib_GPIO_32F10x.c, 898 :: 		
0x01CE	0x4618    MOV	R0, R3
0x01D0	0xF7FFFFAE  BL	_GPIO_Clk_Enable+0
;__Lib_GPIO_32F10x.c, 901 :: 		
0x01D4	0xF1B40FFF  CMP	R4, #255
0x01D8	0xD10C    BNE	L_GPIO_Config18
;__Lib_GPIO_32F10x.c, 902 :: 		
0x01DA	0x4B73    LDR	R3, [PC, #460]
0x01DC	0x429D    CMP	R5, R3
0x01DE	0xD103    BNE	L_GPIO_Config19
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 903 :: 		
0x01E0	0xF04F3333  MOV	R3, #858993459
0x01E4	0x6033    STR	R3, [R6, #0]
; port end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 904 :: 		
0x01E6	0xE0D9    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 905 :: 		
L_GPIO_Config19:
;__Lib_GPIO_32F10x.c, 906 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
0x01E8	0x2D42    CMP	R5, #66
0x01EA	0xD103    BNE	L_GPIO_Config20
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 907 :: 		
0x01EC	0xF04F3344  MOV	R3, #1145324612
0x01F0	0x6033    STR	R3, [R6, #0]
; port end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 908 :: 		
0x01F2	0xE0D3    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 909 :: 		
L_GPIO_Config20:
;__Lib_GPIO_32F10x.c, 910 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
L_GPIO_Config18:
;__Lib_GPIO_32F10x.c, 912 :: 		
0x01F4	0xF64F73FF  MOVW	R3, #65535
0x01F8	0x429C    CMP	R4, R3
0x01FA	0xD114    BNE	L_GPIO_Config21
;__Lib_GPIO_32F10x.c, 913 :: 		
0x01FC	0x4B6A    LDR	R3, [PC, #424]
0x01FE	0x429D    CMP	R5, R3
0x0200	0xD107    BNE	L_GPIO_Config22
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 914 :: 		
0x0202	0xF04F3333  MOV	R3, #858993459
0x0206	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_32F10x.c, 915 :: 		
0x0208	0x1D34    ADDS	R4, R6, #4
; port end address is: 24 (R6)
0x020A	0xF04F3333  MOV	R3, #858993459
0x020E	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 916 :: 		
0x0210	0xE0C4    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 917 :: 		
L_GPIO_Config22:
;__Lib_GPIO_32F10x.c, 918 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
0x0212	0x2D42    CMP	R5, #66
0x0214	0xD107    BNE	L_GPIO_Config23
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 919 :: 		
0x0216	0xF04F3344  MOV	R3, #1145324612
0x021A	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_32F10x.c, 920 :: 		
0x021C	0x1D34    ADDS	R4, R6, #4
; port end address is: 24 (R6)
0x021E	0xF04F3344  MOV	R3, #1145324612
0x0222	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 921 :: 		
0x0224	0xE0BA    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 922 :: 		
L_GPIO_Config23:
;__Lib_GPIO_32F10x.c, 923 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
L_GPIO_Config21:
;__Lib_GPIO_32F10x.c, 925 :: 		
; currentmode start address is: 4 (R1)
0x0226	0x2100    MOVS	R1, #0
;__Lib_GPIO_32F10x.c, 926 :: 		
0x0228	0x2000    MOVS	R0, #0
;__Lib_GPIO_32F10x.c, 928 :: 		
0x022A	0xF0050301  AND	R3, R5, #1
0x022E	0xB10B    CBZ	R3, L_GPIO_Config24
;__Lib_GPIO_32F10x.c, 929 :: 		
0x0230	0x2100    MOVS	R1, #0
0x0232	0xE01D    B	L_GPIO_Config25
L_GPIO_Config24:
;__Lib_GPIO_32F10x.c, 930 :: 		
0x0234	0xF0050302  AND	R3, R5, #2
0x0238	0xB133    CBZ	R3, L_GPIO_Config26
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 931 :: 		
0x023A	0xF40573C0  AND	R3, R5, #384
0x023E	0xB10B    CBZ	R3, L_GPIO_Config27
;__Lib_GPIO_32F10x.c, 932 :: 		
; currentmode start address is: 4 (R1)
0x0240	0x2108    MOVS	R1, #8
; currentmode end address is: 4 (R1)
0x0242	0xE000    B	L_GPIO_Config28
L_GPIO_Config27:
;__Lib_GPIO_32F10x.c, 934 :: 		
; currentmode start address is: 4 (R1)
0x0244	0x2104    MOVS	R1, #4
; currentmode end address is: 4 (R1)
L_GPIO_Config28:
;__Lib_GPIO_32F10x.c, 935 :: 		
; currentmode start address is: 4 (R1)
0x0246	0xE013    B	L_GPIO_Config29
L_GPIO_Config26:
;__Lib_GPIO_32F10x.c, 936 :: 		
0x0248	0xF0050304  AND	R3, R5, #4
0x024C	0xB133    CBZ	R3, L_GPIO_Config30
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 937 :: 		
0x024E	0xF0050320  AND	R3, R5, #32
0x0252	0xB10B    CBZ	R3, L_GPIO_Config31
;__Lib_GPIO_32F10x.c, 938 :: 		
; currentmode start address is: 4 (R1)
0x0254	0x2104    MOVS	R1, #4
; currentmode end address is: 4 (R1)
0x0256	0xE000    B	L_GPIO_Config32
L_GPIO_Config31:
;__Lib_GPIO_32F10x.c, 940 :: 		
; currentmode start address is: 4 (R1)
0x0258	0x2100    MOVS	R1, #0
; currentmode end address is: 4 (R1)
L_GPIO_Config32:
;__Lib_GPIO_32F10x.c, 941 :: 		
; currentmode start address is: 4 (R1)
0x025A	0xE009    B	L_GPIO_Config33
L_GPIO_Config30:
;__Lib_GPIO_32F10x.c, 942 :: 		
0x025C	0xF0050308  AND	R3, R5, #8
0x0260	0xB133    CBZ	R3, L__GPIO_Config100
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 943 :: 		
0x0262	0xF0050320  AND	R3, R5, #32
0x0266	0xB10B    CBZ	R3, L_GPIO_Config35
;__Lib_GPIO_32F10x.c, 944 :: 		
; currentmode start address is: 4 (R1)
0x0268	0x210C    MOVS	R1, #12
; currentmode end address is: 4 (R1)
0x026A	0xE000    B	L_GPIO_Config36
L_GPIO_Config35:
;__Lib_GPIO_32F10x.c, 946 :: 		
; currentmode start address is: 4 (R1)
0x026C	0x2108    MOVS	R1, #8
; currentmode end address is: 4 (R1)
L_GPIO_Config36:
;__Lib_GPIO_32F10x.c, 947 :: 		
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
0x026E	0xE7FF    B	L_GPIO_Config34
L__GPIO_Config100:
;__Lib_GPIO_32F10x.c, 942 :: 		
;__Lib_GPIO_32F10x.c, 947 :: 		
L_GPIO_Config34:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config33:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config29:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config25:
;__Lib_GPIO_32F10x.c, 949 :: 		
; currentmode start address is: 4 (R1)
0x0270	0x4B4E    LDR	R3, [PC, #312]
0x0272	0xEA050303  AND	R3, R5, R3, LSL #0
0x0276	0xB10B    CBZ	R3, L_GPIO_Config37
;__Lib_GPIO_32F10x.c, 950 :: 		
0x0278	0x2003    MOVS	R0, #3
0x027A	0xE009    B	L_GPIO_Config38
L_GPIO_Config37:
;__Lib_GPIO_32F10x.c, 951 :: 		
0x027C	0xF4057300  AND	R3, R5, #512
0x0280	0xB10B    CBZ	R3, L_GPIO_Config39
;__Lib_GPIO_32F10x.c, 952 :: 		
0x0282	0x2002    MOVS	R0, #2
0x0284	0xE004    B	L_GPIO_Config40
L_GPIO_Config39:
;__Lib_GPIO_32F10x.c, 953 :: 		
0x0286	0xF4056380  AND	R3, R5, #1024
0x028A	0xB10B    CBZ	R3, L__GPIO_Config101
;__Lib_GPIO_32F10x.c, 954 :: 		
0x028C	0x2001    MOVS	R0, #1
0x028E	0xE7FF    B	L_GPIO_Config41
L__GPIO_Config101:
;__Lib_GPIO_32F10x.c, 953 :: 		
;__Lib_GPIO_32F10x.c, 954 :: 		
L_GPIO_Config41:
L_GPIO_Config40:
L_GPIO_Config38:
;__Lib_GPIO_32F10x.c, 956 :: 		
;__Lib_GPIO_32F10x.c, 962 :: 		
0x0290	0xF005030C  AND	R3, R5, #12
0x0294	0xB10B    CBZ	R3, L__GPIO_Config102
;__Lib_GPIO_32F10x.c, 965 :: 		
0x0296	0x4301    ORRS	R1, R0
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 966 :: 		
0x0298	0xE7FF    B	L_GPIO_Config42
L__GPIO_Config102:
;__Lib_GPIO_32F10x.c, 962 :: 		
;__Lib_GPIO_32F10x.c, 966 :: 		
L_GPIO_Config42:
;__Lib_GPIO_32F10x.c, 968 :: 		
; currentmode start address is: 4 (R1)
0x029A	0xF00403FF  AND	R3, R4, #255
0x029E	0xB29B    UXTH	R3, R3
0x02A0	0x2B00    CMP	R3, #0
0x02A2	0xD03B    BEQ	L__GPIO_Config104
;__Lib_GPIO_32F10x.c, 969 :: 		
0x02A4	0x6837    LDR	R7, [R6, #0]
; tmpreg start address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 971 :: 		
0x02A6	0x2000    MOVS	R0, #0
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
; currentmode end address is: 4 (R1)
; tmpreg end address is: 28 (R7)
; port end address is: 24 (R6)
0x02A8	0xFA1FF884  UXTH	R8, R4
0x02AC	0x4632    MOV	R2, R6
0x02AE	0x462E    MOV	R6, R5
L_GPIO_Config44:
; tmpreg start address is: 28 (R7)
; currentmode start address is: 4 (R1)
; port start address is: 8 (R2)
; config start address is: 24 (R6)
; pin_mask start address is: 32 (R8)
0x02B0	0x2808    CMP	R0, #8
0x02B2	0xD22C    BCS	L_GPIO_Config45
;__Lib_GPIO_32F10x.c, 973 :: 		
0x02B4	0xF04F0301  MOV	R3, #1
0x02B8	0xFA03F400  LSL	R4, R3, R0
;__Lib_GPIO_32F10x.c, 975 :: 		
0x02BC	0xEA080304  AND	R3, R8, R4, LSL #0
;__Lib_GPIO_32F10x.c, 977 :: 		
0x02C0	0x42A3    CMP	R3, R4
0x02C2	0xD122    BNE	L__GPIO_Config103
;__Lib_GPIO_32F10x.c, 979 :: 		
0x02C4	0x0085    LSLS	R5, R0, #2
;__Lib_GPIO_32F10x.c, 981 :: 		
0x02C6	0xF04F030F  MOV	R3, #15
0x02CA	0x40AB    LSLS	R3, R5
;__Lib_GPIO_32F10x.c, 982 :: 		
0x02CC	0x43DB    MVN	R3, R3
0x02CE	0xEA070403  AND	R4, R7, R3, LSL #0
; tmpreg end address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 985 :: 		
0x02D2	0xFA01F305  LSL	R3, R1, R5
0x02D6	0xEA440303  ORR	R3, R4, R3, LSL #0
; tmpreg start address is: 20 (R5)
0x02DA	0x461D    MOV	R5, R3
;__Lib_GPIO_32F10x.c, 988 :: 		
0x02DC	0xF4067381  AND	R3, R6, #258
0x02E0	0xF5B37F81  CMP	R3, #258
0x02E4	0xD105    BNE	L_GPIO_Config48
;__Lib_GPIO_32F10x.c, 990 :: 		
0x02E6	0xF2020414  ADDW	R4, R2, #20
0x02EA	0xF04F0301  MOV	R3, #1
0x02EE	0x4083    LSLS	R3, R0
0x02F0	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 991 :: 		
L_GPIO_Config48:
;__Lib_GPIO_32F10x.c, 993 :: 		
0x02F2	0xF0060382  AND	R3, R6, #130
0x02F6	0x2B82    CMP	R3, #130
0x02F8	0xD105    BNE	L_GPIO_Config49
;__Lib_GPIO_32F10x.c, 995 :: 		
0x02FA	0xF2020410  ADDW	R4, R2, #16
0x02FE	0xF04F0301  MOV	R3, #1
0x0302	0x4083    LSLS	R3, R0
0x0304	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 996 :: 		
L_GPIO_Config49:
;__Lib_GPIO_32F10x.c, 997 :: 		
0x0306	0x462F    MOV	R7, R5
0x0308	0xE7FF    B	L_GPIO_Config47
; tmpreg end address is: 20 (R5)
L__GPIO_Config103:
;__Lib_GPIO_32F10x.c, 977 :: 		
;__Lib_GPIO_32F10x.c, 997 :: 		
L_GPIO_Config47:
;__Lib_GPIO_32F10x.c, 971 :: 		
; tmpreg start address is: 28 (R7)
0x030A	0x1C40    ADDS	R0, R0, #1
;__Lib_GPIO_32F10x.c, 998 :: 		
0x030C	0xE7D0    B	L_GPIO_Config44
L_GPIO_Config45:
;__Lib_GPIO_32F10x.c, 999 :: 		
0x030E	0x6017    STR	R7, [R2, #0]
; currentmode end address is: 4 (R1)
; port end address is: 8 (R2)
; config end address is: 24 (R6)
; pin_mask end address is: 32 (R8)
; tmpreg end address is: 28 (R7)
0x0310	0xFA1FF088  UXTH	R0, R8
0x0314	0x460F    MOV	R7, R1
0x0316	0x4631    MOV	R1, R6
0x0318	0x4616    MOV	R6, R2
;__Lib_GPIO_32F10x.c, 1001 :: 		
0x031A	0xE002    B	L_GPIO_Config43
L__GPIO_Config104:
;__Lib_GPIO_32F10x.c, 968 :: 		
0x031C	0x460F    MOV	R7, R1
0x031E	0x4629    MOV	R1, R5
0x0320	0xB2A0    UXTH	R0, R4
;__Lib_GPIO_32F10x.c, 1001 :: 		
L_GPIO_Config43:
;__Lib_GPIO_32F10x.c, 1005 :: 		
; currentmode start address is: 28 (R7)
; port start address is: 24 (R6)
; config start address is: 4 (R1)
0x0322	0xF1B00FFF  CMP	R0, #255
0x0326	0xD939    BLS	L_GPIO_Config50
;__Lib_GPIO_32F10x.c, 1007 :: 		
0x0328	0x1D33    ADDS	R3, R6, #4
0x032A	0xF8D38000  LDR	R8, [R3, #0]
; tmpreg start address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 1008 :: 		
; pinpos start address is: 8 (R2)
0x032E	0x2200    MOVS	R2, #0
; port end address is: 24 (R6)
; tmpreg end address is: 32 (R8)
; pinpos end address is: 8 (R2)
L_GPIO_Config51:
; pinpos start address is: 8 (R2)
; tmpreg start address is: 32 (R8)
; config start address is: 4 (R1)
; config end address is: 4 (R1)
; port start address is: 24 (R6)
; currentmode start address is: 28 (R7)
; currentmode end address is: 28 (R7)
0x0330	0x2A08    CMP	R2, #8
0x0332	0xD230    BCS	L_GPIO_Config52
; config end address is: 4 (R1)
; currentmode end address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 1010 :: 		
; currentmode start address is: 28 (R7)
; config start address is: 4 (R1)
0x0334	0xF2020408  ADDW	R4, R2, #8
0x0338	0xF04F0301  MOV	R3, #1
0x033C	0xFA03F404  LSL	R4, R3, R4
;__Lib_GPIO_32F10x.c, 1012 :: 		
0x0340	0xEA000304  AND	R3, R0, R4, LSL #0
;__Lib_GPIO_32F10x.c, 1013 :: 		
0x0344	0x42A3    CMP	R3, R4
0x0346	0xD124    BNE	L__GPIO_Config105
;__Lib_GPIO_32F10x.c, 1015 :: 		
0x0348	0x0095    LSLS	R5, R2, #2
;__Lib_GPIO_32F10x.c, 1017 :: 		
0x034A	0xF04F030F  MOV	R3, #15
0x034E	0x40AB    LSLS	R3, R5
;__Lib_GPIO_32F10x.c, 1018 :: 		
0x0350	0x43DB    MVN	R3, R3
0x0352	0xEA080403  AND	R4, R8, R3, LSL #0
; tmpreg end address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 1021 :: 		
0x0356	0xFA07F305  LSL	R3, R7, R5
0x035A	0xEA440803  ORR	R8, R4, R3, LSL #0
; tmpreg start address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 1024 :: 		
0x035E	0xF4017381  AND	R3, R1, #258
0x0362	0xF5B37F81  CMP	R3, #258
0x0366	0xD107    BNE	L_GPIO_Config55
;__Lib_GPIO_32F10x.c, 1026 :: 		
0x0368	0xF2060514  ADDW	R5, R6, #20
0x036C	0xF2020408  ADDW	R4, R2, #8
0x0370	0xF04F0301  MOV	R3, #1
0x0374	0x40A3    LSLS	R3, R4
0x0376	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F10x.c, 1027 :: 		
L_GPIO_Config55:
;__Lib_GPIO_32F10x.c, 1029 :: 		
0x0378	0xF0010382  AND	R3, R1, #130
0x037C	0x2B82    CMP	R3, #130
0x037E	0xD107    BNE	L_GPIO_Config56
;__Lib_GPIO_32F10x.c, 1031 :: 		
0x0380	0xF2060510  ADDW	R5, R6, #16
0x0384	0xF2020408  ADDW	R4, R2, #8
0x0388	0xF04F0301  MOV	R3, #1
0x038C	0x40A3    LSLS	R3, R4
0x038E	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F10x.c, 1032 :: 		
L_GPIO_Config56:
;__Lib_GPIO_32F10x.c, 1033 :: 		
0x0390	0xE7FF    B	L_GPIO_Config54
; tmpreg end address is: 32 (R8)
L__GPIO_Config105:
;__Lib_GPIO_32F10x.c, 1013 :: 		
;__Lib_GPIO_32F10x.c, 1033 :: 		
L_GPIO_Config54:
;__Lib_GPIO_32F10x.c, 1008 :: 		
; tmpreg start address is: 32 (R8)
0x0392	0x1C52    ADDS	R2, R2, #1
;__Lib_GPIO_32F10x.c, 1034 :: 		
; config end address is: 4 (R1)
; currentmode end address is: 28 (R7)
; pinpos end address is: 8 (R2)
0x0394	0xE7CC    B	L_GPIO_Config51
L_GPIO_Config52:
;__Lib_GPIO_32F10x.c, 1035 :: 		
0x0396	0x1D33    ADDS	R3, R6, #4
; port end address is: 24 (R6)
0x0398	0xF8C38000  STR	R8, [R3, #0]
; tmpreg end address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 1036 :: 		
L_GPIO_Config50:
;__Lib_GPIO_32F10x.c, 1037 :: 		
L_end_GPIO_Config:
0x039C	0xF8DDE000  LDR	LR, [SP, #0]
0x03A0	0xB001    ADD	SP, SP, #4
0x03A2	0x4770    BX	LR
0x03A4	0xFC00FFFF  	#-1024
0x03A8	0x00140008  	#524308
0x03AC	0x08000008  	#526336
; end of _GPIO_Config
_GPIO_Clk_Enable:
;__Lib_GPIO_32F10x.c, 850 :: 		
0x0130	0xB081    SUB	SP, SP, #4
;__Lib_GPIO_32F10x.c, 852 :: 		
0x0132	0x4919    LDR	R1, [PC, #100]
0x0134	0xEA000101  AND	R1, R0, R1, LSL #0
0x0138	0x4608    MOV	R0, R1
;__Lib_GPIO_32F10x.c, 853 :: 		
; pos start address is: 8 (R2)
0x013A	0x2200    MOVS	R2, #0
;__Lib_GPIO_32F10x.c, 854 :: 		
0x013C	0xE00E    B	L_GPIO_Clk_Enable0
; pos end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 855 :: 		
L_GPIO_Clk_Enable2:
0x013E	0x2004    MOVS	R0, #4
0x0140	0xE022    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 856 :: 		
L_GPIO_Clk_Enable3:
0x0142	0x2008    MOVS	R0, #8
0x0144	0xE020    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 857 :: 		
L_GPIO_Clk_Enable4:
0x0146	0x2010    MOVS	R0, #16
0x0148	0xE01E    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 858 :: 		
L_GPIO_Clk_Enable5:
0x014A	0x2020    MOVS	R0, #32
0x014C	0xE01C    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 859 :: 		
L_GPIO_Clk_Enable6:
0x014E	0x2040    MOVS	R0, #64
0x0150	0xE01A    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 860 :: 		
L_GPIO_Clk_Enable7:
0x0152	0x2080    MOVS	R0, #128
0x0154	0xE018    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 861 :: 		
L_GPIO_Clk_Enable8:
0x0156	0xF2401000  MOVW	R0, #256
0x015A	0xE015    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 862 :: 		
L_GPIO_Clk_Enable0:
; pos start address is: 8 (R2)
0x015C	0x490F    LDR	R1, [PC, #60]
0x015E	0x4288    CMP	R0, R1
0x0160	0xD0ED    BEQ	L_GPIO_Clk_Enable2
0x0162	0x490F    LDR	R1, [PC, #60]
0x0164	0x4288    CMP	R0, R1
0x0166	0xD0EC    BEQ	L_GPIO_Clk_Enable3
0x0168	0x490E    LDR	R1, [PC, #56]
0x016A	0x4288    CMP	R0, R1
0x016C	0xD0EB    BEQ	L_GPIO_Clk_Enable4
0x016E	0x490E    LDR	R1, [PC, #56]
0x0170	0x4288    CMP	R0, R1
0x0172	0xD0EA    BEQ	L_GPIO_Clk_Enable5
0x0174	0x490D    LDR	R1, [PC, #52]
0x0176	0x4288    CMP	R0, R1
0x0178	0xD0E9    BEQ	L_GPIO_Clk_Enable6
0x017A	0x490D    LDR	R1, [PC, #52]
0x017C	0x4288    CMP	R0, R1
0x017E	0xD0E8    BEQ	L_GPIO_Clk_Enable7
0x0180	0x490C    LDR	R1, [PC, #48]
0x0182	0x4288    CMP	R0, R1
0x0184	0xD0E7    BEQ	L_GPIO_Clk_Enable8
; pos end address is: 8 (R2)
0x0186	0x4610    MOV	R0, R2
L_GPIO_Clk_Enable1:
;__Lib_GPIO_32F10x.c, 864 :: 		
0x0188	0x490B    LDR	R1, [PC, #44]
0x018A	0x6809    LDR	R1, [R1, #0]
0x018C	0xEA410200  ORR	R2, R1, R0, LSL #0
0x0190	0x4909    LDR	R1, [PC, #36]
0x0192	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 865 :: 		
L_end_GPIO_Clk_Enable:
0x0194	0xB001    ADD	SP, SP, #4
0x0196	0x4770    BX	LR
0x0198	0xFC00FFFF  	#-1024
0x019C	0x08004001  	#1073809408
0x01A0	0x0C004001  	#1073810432
0x01A4	0x10004001  	#1073811456
0x01A8	0x14004001  	#1073812480
0x01AC	0x18004001  	#1073813504
0x01B0	0x1C004001  	#1073814528
0x01B4	0x20004001  	#1073815552
0x01B8	0x10184002  	RCC_APB2ENR+0
; end of _GPIO_Clk_Enable
_NVIC_IntEnable:
;__Lib_System_101_102_103.c, 136 :: 		
; ivt start address is: 0 (R0)
0x0D04	0xB081    SUB	SP, SP, #4
;__Lib_System_101_102_103.c, 148 :: 		
; ivt end address is: 0 (R0)
; ivt start address is: 0 (R0)
0x0D06	0x2804    CMP	R0, #4
0x0D08	0xD106    BNE	L_NVIC_IntEnable7
; ivt end address is: 0 (R0)
;__Lib_System_101_102_103.c, 153 :: 		
0x0D0A	0x4919    LDR	R1, [PC, #100]
0x0D0C	0x6809    LDR	R1, [R1, #0]
0x0D0E	0xF4413280  ORR	R2, R1, #65536
0x0D12	0x4917    LDR	R1, [PC, #92]
0x0D14	0x600A    STR	R2, [R1, #0]
;__Lib_System_101_102_103.c, 154 :: 		
0x0D16	0xE028    B	L_NVIC_IntEnable8
L_NVIC_IntEnable7:
;__Lib_System_101_102_103.c, 155 :: 		
; ivt start address is: 0 (R0)
0x0D18	0x2805    CMP	R0, #5
0x0D1A	0xD106    BNE	L_NVIC_IntEnable9
; ivt end address is: 0 (R0)
;__Lib_System_101_102_103.c, 160 :: 		
0x0D1C	0x4914    LDR	R1, [PC, #80]
0x0D1E	0x6809    LDR	R1, [R1, #0]
0x0D20	0xF4413200  ORR	R2, R1, #131072
0x0D24	0x4912    LDR	R1, [PC, #72]
0x0D26	0x600A    STR	R2, [R1, #0]
;__Lib_System_101_102_103.c, 161 :: 		
0x0D28	0xE01F    B	L_NVIC_IntEnable10
L_NVIC_IntEnable9:
;__Lib_System_101_102_103.c, 162 :: 		
; ivt start address is: 0 (R0)
0x0D2A	0x2806    CMP	R0, #6
0x0D2C	0xD106    BNE	L_NVIC_IntEnable11
; ivt end address is: 0 (R0)
;__Lib_System_101_102_103.c, 167 :: 		
0x0D2E	0x4910    LDR	R1, [PC, #64]
0x0D30	0x6809    LDR	R1, [R1, #0]
0x0D32	0xF4412280  ORR	R2, R1, #262144
0x0D36	0x490E    LDR	R1, [PC, #56]
0x0D38	0x600A    STR	R2, [R1, #0]
;__Lib_System_101_102_103.c, 168 :: 		
0x0D3A	0xE016    B	L_NVIC_IntEnable12
L_NVIC_IntEnable11:
;__Lib_System_101_102_103.c, 169 :: 		
; ivt start address is: 0 (R0)
0x0D3C	0x280F    CMP	R0, #15
0x0D3E	0xD106    BNE	L_NVIC_IntEnable13
; ivt end address is: 0 (R0)
;__Lib_System_101_102_103.c, 174 :: 		
0x0D40	0x490C    LDR	R1, [PC, #48]
0x0D42	0x6809    LDR	R1, [R1, #0]
0x0D44	0xF0410202  ORR	R2, R1, #2
0x0D48	0x490A    LDR	R1, [PC, #40]
0x0D4A	0x600A    STR	R2, [R1, #0]
;__Lib_System_101_102_103.c, 175 :: 		
0x0D4C	0xE00D    B	L_NVIC_IntEnable14
L_NVIC_IntEnable13:
;__Lib_System_101_102_103.c, 176 :: 		
; ivt start address is: 0 (R0)
0x0D4E	0x2810    CMP	R0, #16
0x0D50	0xD30B    BCC	L_NVIC_IntEnable15
;__Lib_System_101_102_103.c, 181 :: 		
0x0D52	0xF2A00410  SUBW	R4, R0, #16
; ivt end address is: 0 (R0)
0x0D56	0x0961    LSRS	R1, R4, #5
0x0D58	0x008A    LSLS	R2, R1, #2
0x0D5A	0x4907    LDR	R1, [PC, #28]
0x0D5C	0x188B    ADDS	R3, R1, R2
;__Lib_System_101_102_103.c, 182 :: 		
0x0D5E	0xF004021F  AND	R2, R4, #31
0x0D62	0xF04F0101  MOV	R1, #1
0x0D66	0x4091    LSLS	R1, R2
0x0D68	0x6019    STR	R1, [R3, #0]
;__Lib_System_101_102_103.c, 183 :: 		
L_NVIC_IntEnable15:
L_NVIC_IntEnable14:
L_NVIC_IntEnable12:
L_NVIC_IntEnable10:
L_NVIC_IntEnable8:
;__Lib_System_101_102_103.c, 184 :: 		
L_end_NVIC_IntEnable:
0x0D6A	0xB001    ADD	SP, SP, #4
0x0D6C	0x4770    BX	LR
0x0D6E	0xBF00    NOP
0x0D70	0xED24E000  	NVIC_SHCSR+0
0x0D74	0xE010E000  	NVIC_SYSTICKCSR+0
0x0D78	0xE100E000  	NVIC_SETENA0+0
; end of _NVIC_IntEnable
_InitTimers:
;HW_V1_Config.c, 126 :: 		void InitTimers(void)
0x17F4	0xB081    SUB	SP, SP, #4
0x17F6	0xF8CDE000  STR	LR, [SP, #0]
;HW_V1_Config.c, 129 :: 		RCC_APB1ENR.TIM2EN = 1;         // Enable clock gating for timer module 2
0x17FA	0x2101    MOVS	R1, #1
0x17FC	0xB249    SXTB	R1, R1
0x17FE	0x480D    LDR	R0, [PC, #52]
0x1800	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 130 :: 		TIM2_CR1.CEN = 0;               // Disable timer
0x1802	0x2100    MOVS	R1, #0
0x1804	0xB249    SXTB	R1, R1
0x1806	0x480C    LDR	R0, [PC, #48]
0x1808	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 131 :: 		TIM2_PSC = 0;                   // Set timer prescaler to 0
0x180A	0x2100    MOVS	R1, #0
0x180C	0x480B    LDR	R0, [PC, #44]
0x180E	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 132 :: 		TIM2_ARR = 36000;               // 36Mhz clock counts 36000 times for 1ms interval
0x1810	0xF64841A0  MOVW	R1, #36000
0x1814	0x480A    LDR	R0, [PC, #40]
0x1816	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 133 :: 		NVIC_IntEnable(IVT_INT_TIM2);   // Enable timer interrupt
0x1818	0xF240002C  MOVW	R0, #44
0x181C	0xF7FFFA72  BL	_NVIC_IntEnable+0
;HW_V1_Config.c, 134 :: 		TIM2_DIER.UIE = 1;              // Update interrupt enable
0x1820	0x2101    MOVS	R1, #1
0x1822	0xB249    SXTB	R1, R1
0x1824	0x4807    LDR	R0, [PC, #28]
0x1826	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 135 :: 		TIM2_CR1.CEN = 1;               // Enable timer
0x1828	0x4803    LDR	R0, [PC, #12]
0x182A	0x6001    STR	R1, [R0, #0]
;HW_V1_Config.c, 136 :: 		}
L_end_InitTimers:
0x182C	0xF8DDE000  LDR	LR, [SP, #0]
0x1830	0xB001    ADD	SP, SP, #4
0x1832	0x4770    BX	LR
0x1834	0x03804242  	RCC_APB1ENR+0
0x1838	0x00004200  	TIM2_CR1+0
0x183C	0x00284000  	TIM2_PSC+0
0x1840	0x002C4000  	TIM2_ARR+0
0x1844	0x01804200  	TIM2_DIER+0
; end of _InitTimers
_LCD_Initial:
;Lcd.c, 133 :: 		void LCD_Initial(void)
0x1470	0xB083    SUB	SP, SP, #12
0x1472	0xF8CDE000  STR	LR, [SP, #0]
;Lcd.c, 136 :: 		LCD_DATA_BUS_OUT();   //Set LCD Data Bus as Output Mode
0x1476	0xF04F3133  MOV	R1, #858993459
0x147A	0x488F    LDR	R0, [PC, #572]
0x147C	0x6001    STR	R1, [R0, #0]
0x147E	0x488E    LDR	R0, [PC, #568]
0x1480	0x6801    LDR	R1, [R0, #0]
0x1482	0x488E    LDR	R0, [PC, #568]
0x1484	0x6001    STR	R1, [R0, #0]
;Lcd.c, 137 :: 		LCD_nWR_HIGH();
0x1486	0x2101    MOVS	R1, #1
0x1488	0xB249    SXTB	R1, R1
0x148A	0x488D    LDR	R0, [PC, #564]
0x148C	0x9002    STR	R0, [SP, #8]
0x148E	0x6001    STR	R1, [R0, #0]
;Lcd.c, 138 :: 		LCD_nRD_HIGH();
0x1490	0x488C    LDR	R0, [PC, #560]
0x1492	0x6001    STR	R1, [R0, #0]
;Lcd.c, 139 :: 		LCD_RS_HIGH();        //RS=1
0x1494	0x488C    LDR	R0, [PC, #560]
0x1496	0x9001    STR	R0, [SP, #4]
0x1498	0x6001    STR	R1, [R0, #0]
;Lcd.c, 140 :: 		LCD_nRST_HIGH();
0x149A	0x488C    LDR	R0, [PC, #560]
0x149C	0x6001    STR	R1, [R0, #0]
;Lcd.c, 141 :: 		Delay_ms(1);           //RST=1£¬Delay 1ms
0x149E	0xF64267DF  MOVW	R7, #11999
0x14A2	0xF2C00700  MOVT	R7, #0
0x14A6	0xBF00    NOP
0x14A8	0xBF00    NOP
L_LCD_Initial0:
0x14AA	0x1E7F    SUBS	R7, R7, #1
0x14AC	0xD1FD    BNE	L_LCD_Initial0
0x14AE	0xBF00    NOP
0x14B0	0xBF00    NOP
0x14B2	0xBF00    NOP
;Lcd.c, 142 :: 		LCD_nRST_LOW();
0x14B4	0x2101    MOVS	R1, #1
0x14B6	0xB249    SXTB	R1, R1
0x14B8	0x4885    LDR	R0, [PC, #532]
0x14BA	0x6001    STR	R1, [R0, #0]
;Lcd.c, 143 :: 		Delay_ms(1);          //RST=0 Reset LCD£¬Delay 1ms
0x14BC	0xF64267DF  MOVW	R7, #11999
0x14C0	0xF2C00700  MOVT	R7, #0
0x14C4	0xBF00    NOP
0x14C6	0xBF00    NOP
L_LCD_Initial2:
0x14C8	0x1E7F    SUBS	R7, R7, #1
0x14CA	0xD1FD    BNE	L_LCD_Initial2
0x14CC	0xBF00    NOP
0x14CE	0xBF00    NOP
0x14D0	0xBF00    NOP
;Lcd.c, 144 :: 		LCD_nRST_HIGH();
0x14D2	0x2101    MOVS	R1, #1
0x14D4	0xB249    SXTB	R1, R1
0x14D6	0x487D    LDR	R0, [PC, #500]
0x14D8	0x6001    STR	R1, [R0, #0]
;Lcd.c, 145 :: 		Delay_ms(5);          //RST=1£¬Delay 5 ms
0x14DA	0xF64E275F  MOVW	R7, #59999
0x14DE	0xF2C00700  MOVT	R7, #0
L_LCD_Initial4:
0x14E2	0x1E7F    SUBS	R7, R7, #1
0x14E4	0xD1FD    BNE	L_LCD_Initial4
0x14E6	0xBF00    NOP
0x14E8	0xBF00    NOP
0x14EA	0xBF00    NOP
0x14EC	0xBF00    NOP
0x14EE	0xBF00    NOP
;Lcd.c, 147 :: 		LCD_WR_REG(0x00FF, 0x0001);
0x14F0	0x2101    MOVS	R1, #1
0x14F2	0x20FF    MOVS	R0, #255
0x14F4	0xF7FFFC42  BL	_LCD_WR_REG+0
;Lcd.c, 148 :: 		LCD_WR_REG(0x00F3, 0x0008);
0x14F8	0x2108    MOVS	R1, #8
0x14FA	0x20F3    MOVS	R0, #243
0x14FC	0xF7FFFC3E  BL	_LCD_WR_REG+0
;Lcd.c, 149 :: 		LCD_DATA_OUT=0x00F3;
0x1500	0x21F3    MOVS	R1, #243
0x1502	0x4874    LDR	R0, [PC, #464]
0x1504	0x6001    STR	R1, [R0, #0]
;Lcd.c, 150 :: 		LCD_RS_LOW();
0x1506	0x2101    MOVS	R1, #1
0x1508	0xB249    SXTB	R1, R1
0x150A	0x4873    LDR	R0, [PC, #460]
0x150C	0x6001    STR	R1, [R0, #0]
;Lcd.c, 151 :: 		LCD_nWR_LOW();
0x150E	0x4873    LDR	R0, [PC, #460]
0x1510	0x6001    STR	R1, [R0, #0]
;Lcd.c, 152 :: 		LCD_nWR_HIGH();
0x1512	0x9802    LDR	R0, [SP, #8]
0x1514	0x6001    STR	R1, [R0, #0]
;Lcd.c, 154 :: 		LCD_RS_HIGH();
0x1516	0x9801    LDR	R0, [SP, #4]
0x1518	0x6001    STR	R1, [R0, #0]
;Lcd.c, 156 :: 		LCD_WR_REG(0x0001, 0x0100);    //Output Direct
0x151A	0xF2401100  MOVW	R1, #256
0x151E	0x2001    MOVS	R0, #1
0x1520	0xF7FFFC2C  BL	_LCD_WR_REG+0
;Lcd.c, 157 :: 		LCD_WR_REG(0x0002, 0x0700);    //Line Inversion
0x1524	0xF2407100  MOVW	R1, #1792
0x1528	0x2002    MOVS	R0, #2
0x152A	0xF7FFFC27  BL	_LCD_WR_REG+0
;Lcd.c, 158 :: 		LCD_WR_REG(0x0003, 0x0030);    //BGR=0,ID=11
0x152E	0x2130    MOVS	R1, #48
0x1530	0x2003    MOVS	R0, #3
0x1532	0xF7FFFC23  BL	_LCD_WR_REG+0
;Lcd.c, 159 :: 		LCD_WR_REG(0x0008, 0x0302);    //Porch Setting
0x1536	0xF2403102  MOVW	R1, #770
0x153A	0x2008    MOVS	R0, #8
0x153C	0xF7FFFC1E  BL	_LCD_WR_REG+0
;Lcd.c, 160 :: 		LCD_WR_REG(0x0009, 0x0000);    //Scan Cycle
0x1540	0x2100    MOVS	R1, #0
0x1542	0x2009    MOVS	R0, #9
0x1544	0xF7FFFC1A  BL	_LCD_WR_REG+0
;Lcd.c, 161 :: 		LCD_WR_REG(0x000A, 0x0000);    //FMARK off
0x1548	0x2100    MOVS	R1, #0
0x154A	0x200A    MOVS	R0, #10
0x154C	0xF7FFFC16  BL	_LCD_WR_REG+0
;Lcd.c, 163 :: 		LCD_WR_REG(0x0010, 0x0790);    //Power Control1
0x1550	0xF2407190  MOVW	R1, #1936
0x1554	0x2010    MOVS	R0, #16
0x1556	0xF7FFFC11  BL	_LCD_WR_REG+0
;Lcd.c, 164 :: 		LCD_WR_REG(0x0011, 0x0005);    //Power Control2
0x155A	0x2105    MOVS	R1, #5
0x155C	0x2011    MOVS	R0, #17
0x155E	0xF7FFFC0D  BL	_LCD_WR_REG+0
;Lcd.c, 165 :: 		LCD_WR_REG(0x0012, 0x0000);    //Power Control3
0x1562	0x2100    MOVS	R1, #0
0x1564	0x2012    MOVS	R0, #18
0x1566	0xF7FFFC09  BL	_LCD_WR_REG+0
;Lcd.c, 166 :: 		LCD_WR_REG(0x0013, 0x0000);    //Power Control4
0x156A	0x2100    MOVS	R1, #0
0x156C	0x2013    MOVS	R0, #19
0x156E	0xF7FFFC05  BL	_LCD_WR_REG+0
;Lcd.c, 167 :: 		Delay_ms(100);                  //Delay 100ms
0x1572	0xF644777F  MOVW	R7, #20351
0x1576	0xF2C00712  MOVT	R7, #18
L_LCD_Initial6:
0x157A	0x1E7F    SUBS	R7, R7, #1
0x157C	0xD1FD    BNE	L_LCD_Initial6
0x157E	0xBF00    NOP
0x1580	0xBF00    NOP
0x1582	0xBF00    NOP
0x1584	0xBF00    NOP
0x1586	0xBF00    NOP
;Lcd.c, 168 :: 		LCD_WR_REG(0x0010, 0x12B0);    //Power Control1
0x1588	0xF24121B0  MOVW	R1, #4784
0x158C	0x2010    MOVS	R0, #16
0x158E	0xF7FFFBF5  BL	_LCD_WR_REG+0
;Lcd.c, 169 :: 		Delay_ms(50);                   //delay 50ms
0x1592	0xF24277BF  MOVW	R7, #10175
0x1596	0xF2C00709  MOVT	R7, #9
L_LCD_Initial8:
0x159A	0x1E7F    SUBS	R7, R7, #1
0x159C	0xD1FD    BNE	L_LCD_Initial8
0x159E	0xBF00    NOP
0x15A0	0xBF00    NOP
0x15A2	0xBF00    NOP
0x15A4	0xBF00    NOP
0x15A6	0xBF00    NOP
;Lcd.c, 170 :: 		LCD_WR_REG(0x0011, 0x0007);    //Power Control2
0x15A8	0x2107    MOVS	R1, #7
0x15AA	0x2011    MOVS	R0, #17
0x15AC	0xF7FFFBE6  BL	_LCD_WR_REG+0
;Lcd.c, 171 :: 		Delay_ms(50);                   //delay 50ms
0x15B0	0xF24277BF  MOVW	R7, #10175
0x15B4	0xF2C00709  MOVT	R7, #9
L_LCD_Initial10:
0x15B8	0x1E7F    SUBS	R7, R7, #1
0x15BA	0xD1FD    BNE	L_LCD_Initial10
0x15BC	0xBF00    NOP
0x15BE	0xBF00    NOP
0x15C0	0xBF00    NOP
0x15C2	0xBF00    NOP
0x15C4	0xBF00    NOP
;Lcd.c, 172 :: 		LCD_WR_REG(0x0012, 0x008C);    //Power Control3
0x15C6	0x218C    MOVS	R1, #140
0x15C8	0x2012    MOVS	R0, #18
0x15CA	0xF7FFFBD7  BL	_LCD_WR_REG+0
;Lcd.c, 173 :: 		LCD_WR_REG(0x0013, 0x1700);    //Power Control4
0x15CE	0xF2417100  MOVW	R1, #5888
0x15D2	0x2013    MOVS	R0, #19
0x15D4	0xF7FFFBD2  BL	_LCD_WR_REG+0
;Lcd.c, 174 :: 		LCD_WR_REG(0x0029, 0x001A);    //VCOMH Setting
0x15D8	0x211A    MOVS	R1, #26
0x15DA	0x2029    MOVS	R0, #41
0x15DC	0xF7FFFBCE  BL	_LCD_WR_REG+0
;Lcd.c, 175 :: 		Delay_ms(50);                   //delay 50ms
0x15E0	0xF24277BF  MOVW	R7, #10175
0x15E4	0xF2C00709  MOVT	R7, #9
L_LCD_Initial12:
0x15E8	0x1E7F    SUBS	R7, R7, #1
0x15EA	0xD1FD    BNE	L_LCD_Initial12
0x15EC	0xBF00    NOP
0x15EE	0xBF00    NOP
0x15F0	0xBF00    NOP
0x15F2	0xBF00    NOP
0x15F4	0xBF00    NOP
;Lcd.c, 177 :: 		LCD_WR_REG(0x0030, 0x0000);
0x15F6	0x2100    MOVS	R1, #0
0x15F8	0x2030    MOVS	R0, #48
0x15FA	0xF7FFFBBF  BL	_LCD_WR_REG+0
;Lcd.c, 178 :: 		LCD_WR_REG(0x0031, 0x0507);
0x15FE	0xF2405107  MOVW	R1, #1287
0x1602	0x2031    MOVS	R0, #49
0x1604	0xF7FFFBBA  BL	_LCD_WR_REG+0
;Lcd.c, 179 :: 		LCD_WR_REG(0x0032, 0x0003);
0x1608	0x2103    MOVS	R1, #3
0x160A	0x2032    MOVS	R0, #50
0x160C	0xF7FFFBB6  BL	_LCD_WR_REG+0
;Lcd.c, 180 :: 		LCD_WR_REG(0x0035, 0x0200);
0x1610	0xF2402100  MOVW	R1, #512
0x1614	0x2035    MOVS	R0, #53
0x1616	0xF7FFFBB1  BL	_LCD_WR_REG+0
;Lcd.c, 181 :: 		LCD_WR_REG(0x0036, 0x0106);
0x161A	0xF2401106  MOVW	R1, #262
0x161E	0x2036    MOVS	R0, #54
0x1620	0xF7FFFBAC  BL	_LCD_WR_REG+0
;Lcd.c, 182 :: 		LCD_WR_REG(0x0037, 0x0000);
0x1624	0x2100    MOVS	R1, #0
0x1626	0x2037    MOVS	R0, #55
0x1628	0xF7FFFBA8  BL	_LCD_WR_REG+0
;Lcd.c, 183 :: 		LCD_WR_REG(0x0038, 0x0507);
0x162C	0xF2405107  MOVW	R1, #1287
0x1630	0x2038    MOVS	R0, #56
0x1632	0xF7FFFBA3  BL	_LCD_WR_REG+0
;Lcd.c, 184 :: 		LCD_WR_REG(0x0039, 0x0104);
0x1636	0xF2401104  MOVW	R1, #260
0x163A	0x2039    MOVS	R0, #57
0x163C	0xF7FFFB9E  BL	_LCD_WR_REG+0
;Lcd.c, 185 :: 		LCD_WR_REG(0x003C, 0x0200);
0x1640	0xF2402100  MOVW	R1, #512
0x1644	0x203C    MOVS	R0, #60
0x1646	0xF7FFFB99  BL	_LCD_WR_REG+0
;Lcd.c, 186 :: 		LCD_WR_REG(0x003D, 0x0005);
0x164A	0x2105    MOVS	R1, #5
0x164C	0x203D    MOVS	R0, #61
0x164E	0xF7FFFB95  BL	_LCD_WR_REG+0
;Lcd.c, 188 :: 		LCD_WR_REG(0x0050, 0x0000);
0x1652	0x2100    MOVS	R1, #0
0x1654	0x2050    MOVS	R0, #80
0x1656	0xF7FFFB91  BL	_LCD_WR_REG+0
;Lcd.c, 189 :: 		LCD_WR_REG(0x0051, 0x00EF);
0x165A	0x21EF    MOVS	R1, #239
0x165C	0x2051    MOVS	R0, #81
0x165E	0xF7FFFB8D  BL	_LCD_WR_REG+0
;Lcd.c, 190 :: 		LCD_WR_REG(0x0052, 0x0000);
0x1662	0x2100    MOVS	R1, #0
0x1664	0x2052    MOVS	R0, #82
0x1666	0xF7FFFB89  BL	_LCD_WR_REG+0
;Lcd.c, 191 :: 		LCD_WR_REG(0x0053, 0x013F);
0x166A	0xF240113F  MOVW	R1, #319
0x166E	0x2053    MOVS	R0, #83
0x1670	0xF7FFFB84  BL	_LCD_WR_REG+0
;Lcd.c, 193 :: 		LCD_WR_REG(0x0060, 0xA700);
0x1674	0xF24A7100  MOVW	R1, #42752
0x1678	0x2060    MOVS	R0, #96
0x167A	0xF7FFFB7F  BL	_LCD_WR_REG+0
;Lcd.c, 194 :: 		LCD_WR_REG(0x0061, 0x0001);
0x167E	0x2101    MOVS	R1, #1
0x1680	0x2061    MOVS	R0, #97
0x1682	0xF7FFFB7B  BL	_LCD_WR_REG+0
;Lcd.c, 195 :: 		LCD_WR_REG(0x0090, 0x0033);
0x1686	0x2133    MOVS	R1, #51
0x1688	0x2090    MOVS	R0, #144
0x168A	0xF7FFFB77  BL	_LCD_WR_REG+0
;Lcd.c, 196 :: 		LCD_WR_REG(0x0007, 0x0133);
0x168E	0xF2401133  MOVW	R1, #307
0x1692	0x2007    MOVS	R0, #7
0x1694	0xF7FFFB72  BL	_LCD_WR_REG+0
;Lcd.c, 197 :: 		Delay_ms(50);                   //delay 50ms
0x1698	0xF24277BF  MOVW	R7, #10175
0x169C	0xF2C00709  MOVT	R7, #9
L_LCD_Initial14:
0x16A0	0x1E7F    SUBS	R7, R7, #1
0x16A2	0xD1FD    BNE	L_LCD_Initial14
0x16A4	0xBF00    NOP
0x16A6	0xBF00    NOP
0x16A8	0xBF00    NOP
0x16AA	0xBF00    NOP
0x16AC	0xBF00    NOP
;Lcd.c, 198 :: 		}
L_end_LCD_Initial:
0x16AE	0xF8DDE000  LDR	LR, [SP, #0]
0x16B2	0xB003    ADD	SP, SP, #12
0x16B4	0x4770    BX	LR
0x16B6	0xBF00    NOP
0x16B8	0x18044001  	GPIOE_CRH+0
0x16BC	0x18004001  	GPIOE_CRL+0
0x16C0	0x82144222  	BS5_GPIOD_BSRR_bit+0
0x16C4	0x82104222  	BS4_GPIOD_BSRR_bit+0
0x16C8	0x82044222  	BS1_GPIOD_BSRR_bit+0
0x16CC	0x02004222  	BS0_GPIOC_BSRR_bit+0
0x16D0	0x02404222  	BR0_GPIOC_BSRR_bit+0
0x16D4	0x180C4001  	GPIOE_ODR+0
0x16D8	0x82444222  	BR1_GPIOD_BSRR_bit+0
0x16DC	0x82544222  	BR5_GPIOD_BSRR_bit+0
; end of _LCD_Initial
_LCD_WR_REG:
;Lcd.c, 118 :: 		void LCD_WR_REG(unsigned int Reg, unsigned int Data)
; Data start address is: 4 (R1)
0x0D7C	0xB081    SUB	SP, SP, #4
; Data end address is: 4 (R1)
; Data start address is: 4 (R1)
;Lcd.c, 120 :: 		LCD_DATA_OUT=Reg;     //Reg. Addr.
0x0D7E	0x4A09    LDR	R2, [PC, #36]
0x0D80	0x6010    STR	R0, [R2, #0]
;Lcd.c, 121 :: 		LCD_RS_LOW();         //RS=0,Piont to Index Reg.
0x0D82	0x2501    MOVS	R5, #1
0x0D84	0xB26D    SXTB	R5, R5
0x0D86	0x4A08    LDR	R2, [PC, #32]
0x0D88	0x6015    STR	R5, [R2, #0]
;Lcd.c, 122 :: 		LCD_nWR_LOW();
0x0D8A	0x4C08    LDR	R4, [PC, #32]
0x0D8C	0x6025    STR	R5, [R4, #0]
;Lcd.c, 123 :: 		LCD_nWR_HIGH();
0x0D8E	0x4B08    LDR	R3, [PC, #32]
0x0D90	0x601D    STR	R5, [R3, #0]
;Lcd.c, 124 :: 		LCD_RS_HIGH();        //RS=1,Piont to object Reg.
0x0D92	0x4A08    LDR	R2, [PC, #32]
0x0D94	0x6015    STR	R5, [R2, #0]
;Lcd.c, 125 :: 		LCD_DATA_OUT=Data;    //Reg. Data
0x0D96	0x4A03    LDR	R2, [PC, #12]
0x0D98	0x6011    STR	R1, [R2, #0]
; Data end address is: 4 (R1)
;Lcd.c, 126 :: 		LCD_nWR_LOW();
0x0D9A	0x6025    STR	R5, [R4, #0]
;Lcd.c, 127 :: 		LCD_nWR_HIGH();
0x0D9C	0x601D    STR	R5, [R3, #0]
;Lcd.c, 128 :: 		}
L_end_LCD_WR_REG:
0x0D9E	0xB001    ADD	SP, SP, #4
0x0DA0	0x4770    BX	LR
0x0DA2	0xBF00    NOP
0x0DA4	0x180C4001  	GPIOE_ODR+0
0x0DA8	0x82444222  	BR1_GPIOD_BSRR_bit+0
0x0DAC	0x82544222  	BR5_GPIOD_BSRR_bit+0
0x0DB0	0x82144222  	BS5_GPIOD_BSRR_bit+0
0x0DB4	0x82044222  	BS1_GPIOD_BSRR_bit+0
; end of _LCD_WR_REG
_Clear_Screen:
;Lcd.c, 228 :: 		void Clear_Screen(unsigned int Color)
0x16E0	0xB081    SUB	SP, SP, #4
0x16E2	0xF8CDE000  STR	LR, [SP, #0]
0x16E6	0xB287    UXTH	R7, R0
; Color start address is: 28 (R7)
;Lcd.c, 231 :: 		Point_SCR(0, 0);    //X_pos=0£¬Y_pos=0
0x16E8	0x2100    MOVS	R1, #0
0x16EA	0x2000    MOVS	R0, #0
0x16EC	0xF7FFF8DA  BL	_Point_SCR+0
;Lcd.c, 232 :: 		for(i=0; i<240*320; ++i)
; i start address is: 16 (R4)
0x16F0	0x2400    MOVS	R4, #0
; Color end address is: 28 (R7)
; i end address is: 16 (R4)
0x16F2	0xB2BB    UXTH	R3, R7
L_Clear_Screen16:
; i start address is: 16 (R4)
; Color start address is: 12 (R3)
; Color start address is: 12 (R3)
; Color end address is: 12 (R3)
0x16F4	0xF5B43F96  CMP	R4, #76800
0x16F8	0xD204    BCS	L_Clear_Screen17
; Color end address is: 12 (R3)
;Lcd.c, 233 :: 		Set_Pixel(Color);
; Color start address is: 12 (R3)
0x16FA	0xB298    UXTH	R0, R3
0x16FC	0xF7FFF8FA  BL	_Set_Pixel+0
;Lcd.c, 232 :: 		for(i=0; i<240*320; ++i)
0x1700	0x1C64    ADDS	R4, R4, #1
;Lcd.c, 233 :: 		Set_Pixel(Color);
; Color end address is: 12 (R3)
; i end address is: 16 (R4)
0x1702	0xE7F7    B	L_Clear_Screen16
L_Clear_Screen17:
;Lcd.c, 234 :: 		}
L_end_Clear_Screen:
0x1704	0xF8DDE000  LDR	LR, [SP, #0]
0x1708	0xB001    ADD	SP, SP, #4
0x170A	0x4770    BX	LR
; end of _Clear_Screen
_Point_SCR:
;Lcd.c, 203 :: 		void Point_SCR(unsigned int x0, unsigned int y0)
; y0 start address is: 4 (R1)
0x08A4	0xB081    SUB	SP, SP, #4
0x08A6	0xF8CDE000  STR	LR, [SP, #0]
0x08AA	0xB286    UXTH	R6, R0
; y0 end address is: 4 (R1)
; x0 start address is: 24 (R6)
; y0 start address is: 4 (R1)
;Lcd.c, 205 :: 		LCD_WR_REG(0x0020,y0);
; y0 end address is: 4 (R1)
0x08AC	0x2020    MOVS	R0, #32
0x08AE	0xF000FA65  BL	_LCD_WR_REG+0
;Lcd.c, 206 :: 		LCD_WR_REG(0x0021,x0);
0x08B2	0xB2B1    UXTH	R1, R6
; x0 end address is: 24 (R6)
0x08B4	0x2021    MOVS	R0, #33
0x08B6	0xF000FA61  BL	_LCD_WR_REG+0
;Lcd.c, 207 :: 		LCD_DATA_OUT=0x0022;  //DRAM Reg.
0x08BA	0x2322    MOVS	R3, #34
0x08BC	0x4A08    LDR	R2, [PC, #32]
0x08BE	0x6013    STR	R3, [R2, #0]
;Lcd.c, 208 :: 		LCD_RS_LOW();
0x08C0	0x2401    MOVS	R4, #1
0x08C2	0xB264    SXTB	R4, R4
0x08C4	0x4A07    LDR	R2, [PC, #28]
0x08C6	0x6014    STR	R4, [R2, #0]
;Lcd.c, 209 :: 		LCD_nWR_LOW();
0x08C8	0x4B07    LDR	R3, [PC, #28]
0x08CA	0x601C    STR	R4, [R3, #0]
;Lcd.c, 210 :: 		LCD_nWR_HIGH();
0x08CC	0x4A07    LDR	R2, [PC, #28]
0x08CE	0x6014    STR	R4, [R2, #0]
;Lcd.c, 211 :: 		LCD_nWR_LOW();
0x08D0	0x601C    STR	R4, [R3, #0]
;Lcd.c, 212 :: 		LCD_nWR_HIGH();
0x08D2	0x6014    STR	R4, [R2, #0]
;Lcd.c, 213 :: 		LCD_RS_HIGH();
0x08D4	0x4A06    LDR	R2, [PC, #24]
0x08D6	0x6014    STR	R4, [R2, #0]
;Lcd.c, 214 :: 		}
L_end_Point_SCR:
0x08D8	0xF8DDE000  LDR	LR, [SP, #0]
0x08DC	0xB001    ADD	SP, SP, #4
0x08DE	0x4770    BX	LR
0x08E0	0x180C4001  	GPIOE_ODR+0
0x08E4	0x82444222  	BR1_GPIOD_BSRR_bit+0
0x08E8	0x82544222  	BR5_GPIOD_BSRR_bit+0
0x08EC	0x82144222  	BS5_GPIOD_BSRR_bit+0
0x08F0	0x82044222  	BS1_GPIOD_BSRR_bit+0
; end of _Point_SCR
_Set_Pixel:
;Lcd.c, 218 :: 		void Set_Pixel(unsigned int Color)
0x08F4	0xB081    SUB	SP, SP, #4
;Lcd.c, 220 :: 		LCD_DATA_OUT=Color;   //Color Data
0x08F6	0x4905    LDR	R1, [PC, #20]
0x08F8	0x6008    STR	R0, [R1, #0]
;Lcd.c, 221 :: 		LCD_nWR_LOW();
0x08FA	0x2201    MOVS	R2, #1
0x08FC	0xB252    SXTB	R2, R2
0x08FE	0x4904    LDR	R1, [PC, #16]
0x0900	0x600A    STR	R2, [R1, #0]
;Lcd.c, 222 :: 		LCD_nWR_HIGH();
0x0902	0x4904    LDR	R1, [PC, #16]
0x0904	0x600A    STR	R2, [R1, #0]
;Lcd.c, 223 :: 		}
L_end_Set_Pixel:
0x0906	0xB001    ADD	SP, SP, #4
0x0908	0x4770    BX	LR
0x090A	0xBF00    NOP
0x090C	0x180C4001  	GPIOE_ODR+0
0x0910	0x82544222  	BR5_GPIOD_BSRR_bit+0
0x0914	0x82144222  	BS5_GPIOD_BSRR_bit+0
; end of _Set_Pixel
_Display_Str:
;Lcd.c, 331 :: 		void Display_Str(unsigned int x0, unsigned int y0, unsigned int Color, unsigned char Mode, unsigned const char *s)
; Mode start address is: 12 (R3)
; Color start address is: 8 (R2)
; y0 start address is: 4 (R1)
0x12EC	0xB082    SUB	SP, SP, #8
0x12EE	0xF8CDE000  STR	LR, [SP, #0]
0x12F2	0xB287    UXTH	R7, R0
0x12F4	0xFA1FF981  UXTH	R9, R1
0x12F8	0xFA1FF882  UXTH	R8, R2
0x12FC	0xFA5FFA83  UXTB	R10, R3
; Mode end address is: 12 (R3)
; Color end address is: 8 (R2)
; y0 end address is: 4 (R1)
; x0 start address is: 28 (R7)
; y0 start address is: 36 (R9)
; Color start address is: 32 (R8)
; Mode start address is: 40 (R10)
; s start address is: 44 (R11)
0x1300	0xF8DDB008  LDR	R11, [SP, #8]
;Lcd.c, 334 :: 		Point_SCR(x0, y0);
0x1304	0xFA1FF189  UXTH	R1, R9
0x1308	0xB2B8    UXTH	R0, R7
0x130A	0xF7FFFACB  BL	_Point_SCR+0
;Lcd.c, 335 :: 		for (j=0; j<14;++j){
; j start address is: 24 (R6)
0x130E	0x2600    MOVS	R6, #0
0x1310	0xB236    SXTH	R6, R6
; Mode end address is: 40 (R10)
; s end address is: 44 (R11)
; x0 end address is: 28 (R7)
; j end address is: 24 (R6)
; y0 end address is: 36 (R9)
; Color end address is: 32 (R8)
0x1312	0xFA5FF58A  UXTB	R5, R10
0x1316	0x465B    MOV	R3, R11
L_Display_Str80:
; j start address is: 24 (R6)
; s start address is: 12 (R3)
; Mode start address is: 20 (R5)
; Color start address is: 32 (R8)
; y0 start address is: 36 (R9)
; x0 start address is: 28 (R7)
0x1318	0x2E0E    CMP	R6, #14
0x131A	0xDA0C    BGE	L_Display_Str81
;Lcd.c, 336 :: 		if(Mode==0) Set_Pixel(BLACK);   //Normal replace Display
0x131C	0xB915    CBNZ	R5, L_Display_Str83
0x131E	0x2000    MOVS	R0, #0
0x1320	0xF7FFFAE8  BL	_Set_Pixel+0
L_Display_Str83:
;Lcd.c, 337 :: 		if(Mode==1) Set_Pixel(Color);   //Inverse replace Display
0x1324	0x2D01    CMP	R5, #1
0x1326	0xD103    BNE	L_Display_Str84
0x1328	0xFA1FF088  UXTH	R0, R8
0x132C	0xF7FFFAE2  BL	_Set_Pixel+0
L_Display_Str84:
;Lcd.c, 335 :: 		for (j=0; j<14;++j){
0x1330	0x1C76    ADDS	R6, R6, #1
0x1332	0xB236    SXTH	R6, R6
;Lcd.c, 338 :: 		}
; j end address is: 24 (R6)
0x1334	0xE7F0    B	L_Display_Str80
L_Display_Str81:
;Lcd.c, 339 :: 		x0++;
0x1336	0x1C79    ADDS	R1, R7, #1
0x1338	0xB289    UXTH	R1, R1
; x0 end address is: 28 (R7)
; x0 start address is: 4 (R1)
; s end address is: 12 (R3)
; Mode end address is: 20 (R5)
; y0 end address is: 36 (R9)
; Color end address is: 32 (R8)
; x0 end address is: 4 (R1)
0x133A	0x4618    MOV	R0, R3
0x133C	0xB2EF    UXTB	R7, R5
;Lcd.c, 340 :: 		while (*s!=0) {
L_Display_Str85:
; x0 start address is: 4 (R1)
; y0 start address is: 36 (R9)
; Color start address is: 32 (R8)
; Mode start address is: 28 (R7)
0x133E	0x7804    LDRB	R4, [R0, #0]
0x1340	0x2C00    CMP	R4, #0
0x1342	0xF000808E  BEQ	L_Display_Str86
;Lcd.c, 341 :: 		unsigned const int *scanline=Char_Dot+((*s-0x22)*8);
0x1346	0x7804    LDRB	R4, [R0, #0]
0x1348	0x3C22    SUBS	R4, #34
0x134A	0xB224    SXTH	R4, R4
0x134C	0x00E4    LSLS	R4, R4, #3
0x134E	0xB224    SXTH	R4, R4
0x1350	0x0065    LSLS	R5, R4, #1
0x1352	0x4C46    LDR	R4, [PC, #280]
0x1354	0xEB040C05  ADD	R12, R4, R5, LSL #0
; scanline start address is: 48 (R12)
;Lcd.c, 342 :: 		for(i=0;i<8;++i){
; i start address is: 44 (R11)
0x1358	0xF2400B00  MOVW	R11, #0
0x135C	0xFA0FFB8B  SXTH	R11, R11
; y0 end address is: 36 (R9)
; Color end address is: 32 (R8)
; Mode end address is: 28 (R7)
; scanline end address is: 48 (R12)
; i end address is: 44 (R11)
; x0 end address is: 4 (R1)
0x1360	0x4682    MOV	R10, R0
0x1362	0xB288    UXTH	R0, R1
L_Display_Str87:
; i start address is: 44 (R11)
; scanline start address is: 48 (R12)
; s start address is: 40 (R10)
; Mode start address is: 28 (R7)
; Color start address is: 32 (R8)
; y0 start address is: 36 (R9)
0x1364	0xF1BB0F08  CMP	R11, #8
0x1368	0xF280806D  BGE	L_Display_Str88
;Lcd.c, 343 :: 		Point_SCR(x0+i, y0);
0x136C	0xEB00040B  ADD	R4, R0, R11, LSL #0
0x1370	0xF8AD0004  STRH	R0, [SP, #4]
0x1374	0xFA1FF189  UXTH	R1, R9
0x1378	0xB2A0    UXTH	R0, R4
0x137A	0xF7FFFA93  BL	_Point_SCR+0
0x137E	0xF8BD0004  LDRH	R0, [SP, #4]
;Lcd.c, 344 :: 		if((*s==0x20)||(*s==0x21)) b=0x0000;
0x1382	0xF89A4000  LDRB	R4, [R10, #0]
0x1386	0x2C20    CMP	R4, #32
0x1388	0xD004    BEQ	L__Display_Str147
0x138A	0xF89A4000  LDRB	R4, [R10, #0]
0x138E	0x2C21    CMP	R4, #33
0x1390	0xD000    BEQ	L__Display_Str146
0x1392	0xE004    B	L_Display_Str92
L__Display_Str147:
L__Display_Str146:
0x1394	0x2400    MOVS	R4, #0
0x1396	0xB224    SXTH	R4, R4
0x1398	0xF8AD4006  STRH	R4, [SP, #6]
0x139C	0xE006    B	L_Display_Str93
L_Display_Str92:
;Lcd.c, 345 :: 		else                       b=scanline[i];
0x139E	0xEA4F044B  LSL	R4, R11, #1
0x13A2	0xEB0C0404  ADD	R4, R12, R4, LSL #0
0x13A6	0x8824    LDRH	R4, [R4, #0]
0x13A8	0xF8AD4006  STRH	R4, [SP, #6]
L_Display_Str93:
;Lcd.c, 346 :: 		if((*s==0x21)&&(i==4)) break;
0x13AC	0xF89A4000  LDRB	R4, [R10, #0]
0x13B0	0x2C21    CMP	R4, #33
0x13B2	0xD103    BNE	L__Display_Str149
0x13B4	0xF1BB0F04  CMP	R11, #4
0x13B8	0xD100    BNE	L__Display_Str148
; scanline end address is: 48 (R12)
; i end address is: 44 (R11)
L__Display_Str144:
0x13BA	0xE044    B	L_Display_Str88
L__Display_Str149:
; i start address is: 44 (R11)
; scanline start address is: 48 (R12)
L__Display_Str148:
;Lcd.c, 347 :: 		for(j=0;j<14;++j){
; j start address is: 20 (R5)
0x13BC	0x2500    MOVS	R5, #0
0x13BE	0xB22D    SXTH	R5, R5
; y0 end address is: 36 (R9)
; Color end address is: 32 (R8)
; Mode end address is: 28 (R7)
; s end address is: 40 (R10)
; scanline end address is: 48 (R12)
; j end address is: 20 (R5)
; i end address is: 44 (R11)
0x13C0	0xFA0FF68B  SXTH	R6, R11
0x13C4	0xB283    UXTH	R3, R0
L_Display_Str97:
; j start address is: 20 (R5)
; x0 start address is: 12 (R3)
; y0 start address is: 36 (R9)
; Color start address is: 32 (R8)
; Mode start address is: 28 (R7)
; s start address is: 40 (R10)
; scanline start address is: 48 (R12)
; i start address is: 24 (R6)
0x13C6	0x2D0E    CMP	R5, #14
0x13C8	0xDA38    BGE	L_Display_Str98
;Lcd.c, 348 :: 		if(b&4) {
0x13CA	0xF9BD4006  LDRSH	R4, [SP, #6]
0x13CE	0xF0040404  AND	R4, R4, #4
0x13D2	0xB224    SXTH	R4, R4
0x13D4	0xB1AC    CBZ	R4, L_Display_Str100
;Lcd.c, 349 :: 		if(Mode==0) Set_Pixel(Color);
0x13D6	0xB91F    CBNZ	R7, L_Display_Str101
0x13D8	0xFA1FF088  UXTH	R0, R8
0x13DC	0xF7FFFA8A  BL	_Set_Pixel+0
L_Display_Str101:
;Lcd.c, 350 :: 		if(Mode==1) Set_Pixel(BLACK);
0x13E0	0x2F01    CMP	R7, #1
0x13E2	0xD102    BNE	L_Display_Str102
0x13E4	0x2000    MOVS	R0, #0
0x13E6	0xF7FFFA85  BL	_Set_Pixel+0
L_Display_Str102:
;Lcd.c, 351 :: 		if(Mode==2) Set_Pixel(Color);
0x13EA	0x2F02    CMP	R7, #2
0x13EC	0xD103    BNE	L_Display_Str103
0x13EE	0xFA1FF088  UXTH	R0, R8
0x13F2	0xF7FFFA7F  BL	_Set_Pixel+0
L_Display_Str103:
;Lcd.c, 352 :: 		if(Mode==3) Set_Pixel(BLACK);
0x13F6	0x2F03    CMP	R7, #3
0x13F8	0xD102    BNE	L_Display_Str104
0x13FA	0x2000    MOVS	R0, #0
0x13FC	0xF7FFFA7A  BL	_Set_Pixel+0
L_Display_Str104:
;Lcd.c, 353 :: 		} else {
0x1400	0xE014    B	L_Display_Str105
L_Display_Str100:
;Lcd.c, 354 :: 		if(Mode==0) Set_Pixel(BLACK);
0x1402	0xB917    CBNZ	R7, L_Display_Str106
0x1404	0x2000    MOVS	R0, #0
0x1406	0xF7FFFA75  BL	_Set_Pixel+0
L_Display_Str106:
;Lcd.c, 355 :: 		if(Mode==1) Set_Pixel(Color);
0x140A	0x2F01    CMP	R7, #1
0x140C	0xD103    BNE	L_Display_Str107
0x140E	0xFA1FF088  UXTH	R0, R8
0x1412	0xF7FFFA6F  BL	_Set_Pixel+0
L_Display_Str107:
;Lcd.c, 356 :: 		if(Mode==2) Set_Pixel(BLACK);
0x1416	0x2F02    CMP	R7, #2
0x1418	0xD102    BNE	L_Display_Str108
0x141A	0x2000    MOVS	R0, #0
0x141C	0xF7FFFA6A  BL	_Set_Pixel+0
L_Display_Str108:
;Lcd.c, 357 :: 		if(Mode==3) Set_Pixel(Color);
0x1420	0x2F03    CMP	R7, #3
0x1422	0xD103    BNE	L_Display_Str109
0x1424	0xFA1FF088  UXTH	R0, R8
0x1428	0xF7FFFA64  BL	_Set_Pixel+0
L_Display_Str109:
;Lcd.c, 358 :: 		}
L_Display_Str105:
;Lcd.c, 359 :: 		b>>=1;
0x142C	0xF9BD4006  LDRSH	R4, [SP, #6]
0x1430	0x1064    ASRS	R4, R4, #1
0x1432	0xF8AD4006  STRH	R4, [SP, #6]
;Lcd.c, 347 :: 		for(j=0;j<14;++j){
0x1436	0x1C6D    ADDS	R5, R5, #1
0x1438	0xB22D    SXTH	R5, R5
;Lcd.c, 360 :: 		}
; j end address is: 20 (R5)
0x143A	0xE7C4    B	L_Display_Str97
L_Display_Str98:
;Lcd.c, 342 :: 		for(i=0;i<8;++i){
0x143C	0x1C74    ADDS	R4, R6, #1
; i end address is: 24 (R6)
; i start address is: 44 (R11)
0x143E	0xFA0FFB84  SXTH	R11, R4
;Lcd.c, 361 :: 		}
0x1442	0xB298    UXTH	R0, R3
; x0 end address is: 12 (R3)
; scanline end address is: 48 (R12)
; i end address is: 44 (R11)
0x1444	0xE78E    B	L_Display_Str87
L_Display_Str88:
;Lcd.c, 362 :: 		if(*s==0x21) x0 +=4;
0x1446	0xF89A4000  LDRB	R4, [R10, #0]
0x144A	0x2C21    CMP	R4, #33
0x144C	0xD102    BNE	L_Display_Str110
0x144E	0x1D01    ADDS	R1, R0, #4
0x1450	0xB289    UXTH	R1, R1
; x0 start address is: 4 (R1)
; x0 end address is: 4 (R1)
0x1452	0xE002    B	L_Display_Str111
L_Display_Str110:
;Lcd.c, 363 :: 		else  x0 += 8;
0x1454	0xF2000108  ADDW	R1, R0, #8
0x1458	0xB289    UXTH	R1, R1
; x0 start address is: 4 (R1)
; x0 end address is: 4 (R1)
L_Display_Str111:
;Lcd.c, 364 :: 		++s;                           //next character
; x0 start address is: 4 (R1)
0x145A	0xF10A0401  ADD	R4, R10, #1
; s end address is: 40 (R10)
0x145E	0x4620    MOV	R0, R4
;Lcd.c, 365 :: 		}
; y0 end address is: 36 (R9)
; Color end address is: 32 (R8)
; Mode end address is: 28 (R7)
; x0 end address is: 4 (R1)
0x1460	0xE76D    B	L_Display_Str85
L_Display_Str86:
;Lcd.c, 366 :: 		}
L_end_Display_Str:
0x1462	0xF8DDE000  LDR	LR, [SP, #0]
0x1466	0xB002    ADD	SP, SP, #8
0x1468	0x4770    BX	LR
0x146A	0xBF00    NOP
0x146C	0x1A9C0000  	_Char_Dot+0
; end of _Display_Str
_Handle_UART_Input:
;main.c, 86 :: 		void Handle_UART_Input()
0x170C	0xB081    SUB	SP, SP, #4
0x170E	0xF8CDE000  STR	LR, [SP, #0]
;main.c, 90 :: 		if (isAvailable()){
0x1712	0xF7FFF89F  BL	_isAvailable+0
0x1716	0x2800    CMP	R0, #0
0x1718	0xF0008062  BEQ	L_Handle_UART_Input16
;main.c, 91 :: 		bPrompt = 0;                                            // cancel prompt signal
0x171C	0x2100    MOVS	R1, #0
0x171E	0xB249    SXTB	R1, R1
0x1720	0x4831    LDR	R0, [PC, #196]
0x1722	0x6001    STR	R1, [R0, #0]
;main.c, 92 :: 		ch = getChar();
0x1724	0xF7FFF8A6  BL	_getChar+0
;main.c, 93 :: 		switch (ch){
0x1728	0xE053    B	L_Handle_UART_Input17
;main.c, 94 :: 		case 0x1B:                                          // ESC signals screen clear
L_Handle_UART_Input19:
;main.c, 95 :: 		x_pos = 1;
0x172A	0x2101    MOVS	R1, #1
0x172C	0xB209    SXTH	R1, R1
0x172E	0x482F    LDR	R0, [PC, #188]
0x1730	0x8001    STRH	R1, [R0, #0]
;main.c, 96 :: 		y_pos =  MAX_Y_POS-STEP_Y_POS;                  // go back to top
0x1732	0x21E0    MOVS	R1, #224
0x1734	0xB209    SXTH	R1, R1
0x1736	0x482E    LDR	R0, [PC, #184]
0x1738	0x8001    STRH	R1, [R0, #0]
;main.c, 97 :: 		Clear_Screen(BLACK);
0x173A	0x2000    MOVS	R0, #0
0x173C	0xF7FFFFD0  BL	_Clear_Screen+0
;main.c, 98 :: 		break;
0x1740	0xE04E    B	L_Handle_UART_Input18
;main.c, 99 :: 		case '\r': x_pos = 1; break;                        // <CR> just go back to line start
L_Handle_UART_Input20:
0x1742	0x2101    MOVS	R1, #1
0x1744	0xB209    SXTH	R1, R1
0x1746	0x4829    LDR	R0, [PC, #164]
0x1748	0x8001    STRH	R1, [R0, #0]
0x174A	0xE049    B	L_Handle_UART_Input18
;main.c, 100 :: 		case '\n':                                          // <LF> line feed
L_Handle_UART_Input21:
;main.c, 101 :: 		ClearNextTextLine(y_pos, BLACK);                // make sure the next line is empty
0x174C	0x4828    LDR	R0, [PC, #160]
0x174E	0xF9B00000  LDRSH	R0, [R0, #0]
0x1752	0x2100    MOVS	R1, #0
0x1754	0xF7FFF994  BL	_ClearNextTextLine+0
;main.c, 102 :: 		y_pos-=STEP_Y_POS;                              // move to next text row (y is reversed!)
0x1758	0x4925    LDR	R1, [PC, #148]
0x175A	0xF9B10000  LDRSH	R0, [R1, #0]
0x175E	0x380E    SUBS	R0, #14
0x1760	0xB200    SXTH	R0, R0
0x1762	0x8008    STRH	R0, [R1, #0]
;main.c, 103 :: 		if (y_pos < 0){                                 // if we are at the Y bottom
0x1764	0x2800    CMP	R0, #0
0x1766	0xDA03    BGE	L_Handle_UART_Input22
;main.c, 104 :: 		y_pos =  MAX_Y_POS-STEP_Y_POS;              // go back to top
0x1768	0x21E0    MOVS	R1, #224
0x176A	0xB209    SXTH	R1, R1
0x176C	0x4820    LDR	R0, [PC, #128]
0x176E	0x8001    STRH	R1, [R0, #0]
;main.c, 105 :: 		}
L_Handle_UART_Input22:
;main.c, 106 :: 		break;
0x1770	0xE036    B	L_Handle_UART_Input18
;main.c, 107 :: 		default:
L_Handle_UART_Input23:
;main.c, 108 :: 		Display_Char(x_pos, y_pos, WHITE,PRN, ch);      // show the current displayable character
0x1772	0xB2C2    UXTB	R2, R0
0x1774	0x481E    LDR	R0, [PC, #120]
0x1776	0xF9B01000  LDRSH	R1, [R0, #0]
0x177A	0x481C    LDR	R0, [PC, #112]
0x177C	0xF9B00000  LDRSH	R0, [R0, #0]
0x1780	0xB404    PUSH	(R2)
0x1782	0x2300    MOVS	R3, #0
0x1784	0xF64F72FF  MOVW	R2, #65535
0x1788	0xF7FFF8C6  BL	_Display_Char+0
0x178C	0xB001    ADD	SP, SP, #4
;main.c, 109 :: 		x_pos+=STEP_X_POS;                              // move to next character position
0x178E	0x4A17    LDR	R2, [PC, #92]
0x1790	0xF9B20000  LDRSH	R0, [R2, #0]
0x1794	0xF2000109  ADDW	R1, R0, #9
0x1798	0xB209    SXTH	R1, R1
0x179A	0x8011    STRH	R1, [R2, #0]
;main.c, 110 :: 		if (x_pos >= MAX_X_POS){                        // if we hit last column then wrap
0x179C	0xF240103B  MOVW	R0, #315
0x17A0	0x4281    CMP	R1, R0
0x17A2	0xDB15    BLT	L_Handle_UART_Input24
;main.c, 111 :: 		x_pos = 1;                                  // move x to starting column
0x17A4	0x2101    MOVS	R1, #1
0x17A6	0xB209    SXTH	R1, R1
0x17A8	0x4810    LDR	R0, [PC, #64]
0x17AA	0x8001    STRH	R1, [R0, #0]
;main.c, 112 :: 		ClearNextTextLine(y_pos, BLACK);            // make sure the next line is empty
0x17AC	0x4810    LDR	R0, [PC, #64]
0x17AE	0xF9B00000  LDRSH	R0, [R0, #0]
0x17B2	0x2100    MOVS	R1, #0
0x17B4	0xF7FFF964  BL	_ClearNextTextLine+0
;main.c, 113 :: 		y_pos-=STEP_Y_POS;                          // move to next text row (y is reversed!)
0x17B8	0x490D    LDR	R1, [PC, #52]
0x17BA	0xF9B10000  LDRSH	R0, [R1, #0]
0x17BE	0x380E    SUBS	R0, #14
0x17C0	0xB200    SXTH	R0, R0
0x17C2	0x8008    STRH	R0, [R1, #0]
;main.c, 114 :: 		if (y_pos < 0){                             // if we are at the Y bottom
0x17C4	0x2800    CMP	R0, #0
0x17C6	0xDA03    BGE	L_Handle_UART_Input25
;main.c, 115 :: 		y_pos =  MAX_Y_POS-STEP_Y_POS;          // go back to top
0x17C8	0x21E0    MOVS	R1, #224
0x17CA	0xB209    SXTH	R1, R1
0x17CC	0x4808    LDR	R0, [PC, #32]
0x17CE	0x8001    STRH	R1, [R0, #0]
;main.c, 116 :: 		}
L_Handle_UART_Input25:
;main.c, 117 :: 		}
L_Handle_UART_Input24:
;main.c, 118 :: 		break;
0x17D0	0xE006    B	L_Handle_UART_Input18
;main.c, 119 :: 		}
L_Handle_UART_Input17:
0x17D2	0x281B    CMP	R0, #27
0x17D4	0xD0A9    BEQ	L_Handle_UART_Input19
0x17D6	0x280D    CMP	R0, #13
0x17D8	0xD0B3    BEQ	L_Handle_UART_Input20
0x17DA	0x280A    CMP	R0, #10
0x17DC	0xD0B6    BEQ	L_Handle_UART_Input21
0x17DE	0xE7C8    B	L_Handle_UART_Input23
L_Handle_UART_Input18:
;main.c, 120 :: 		}
L_Handle_UART_Input16:
;main.c, 121 :: 		}
L_end_Handle_UART_Input:
0x17E0	0xF8DDE000  LDR	LR, [SP, #0]
0x17E4	0xB001    ADD	SP, SP, #4
0x17E6	0x4770    BX	LR
0x17E8	0x14002200  	_bPrompt+0
0x17EC	0x00022000  	main_x_pos+0
0x17F0	0x00042000  	main_y_pos+0
; end of _Handle_UART_Input
_isAvailable:
;main.c, 60 :: 		char isAvailable()
0x0854	0xB081    SUB	SP, SP, #4
;main.c, 62 :: 		return (in_ptr != out_ptr);
0x0856	0x4805    LDR	R0, [PC, #20]
0x0858	0x8801    LDRH	R1, [R0, #0]
0x085A	0x4805    LDR	R0, [PC, #20]
0x085C	0x8800    LDRH	R0, [R0, #0]
0x085E	0x4288    CMP	R0, R1
0x0860	0xF2400000  MOVW	R0, #0
0x0864	0xD000    BEQ	L__isAvailable77
0x0866	0x2001    MOVS	R0, #1
L__isAvailable77:
;main.c, 63 :: 		}
L_end_isAvailable:
0x0868	0xB001    ADD	SP, SP, #4
0x086A	0x4770    BX	LR
0x086C	0x009C2000  	main_out_ptr+0
0x0870	0x009E2000  	main_in_ptr+0
; end of _isAvailable
_getChar:
;main.c, 65 :: 		char getChar()
0x0874	0xB081    SUB	SP, SP, #4
;main.c, 68 :: 		ch = in_buffer[out_ptr++];
0x0876	0x4A09    LDR	R2, [PC, #36]
0x0878	0x8811    LDRH	R1, [R2, #0]
0x087A	0x4809    LDR	R0, [PC, #36]
0x087C	0x1840    ADDS	R0, R0, R1
0x087E	0x7800    LDRB	R0, [R0, #0]
; ch start address is: 12 (R3)
0x0880	0xB2C3    UXTB	R3, R0
0x0882	0x4610    MOV	R0, R2
0x0884	0x8800    LDRH	R0, [R0, #0]
0x0886	0x1C40    ADDS	R0, R0, #1
0x0888	0xB280    UXTH	R0, R0
0x088A	0x8010    STRH	R0, [R2, #0]
;main.c, 69 :: 		if (out_ptr >= MAX_IN_BUFFER) out_ptr = 0;
0x088C	0x2880    CMP	R0, #128
0x088E	0xD302    BCC	L_getChar8
0x0890	0x2100    MOVS	R1, #0
0x0892	0x4802    LDR	R0, [PC, #8]
0x0894	0x8001    STRH	R1, [R0, #0]
L_getChar8:
;main.c, 70 :: 		return ch;
0x0896	0xB2D8    UXTB	R0, R3
; ch end address is: 12 (R3)
;main.c, 71 :: 		}
L_end_getChar:
0x0898	0xB001    ADD	SP, SP, #4
0x089A	0x4770    BX	LR
0x089C	0x009C2000  	main_out_ptr+0
0x08A0	0x001C2000  	main_in_buffer+0
; end of _getChar
_ClearNextTextLine:
;main.c, 73 :: 		void ClearNextTextLine(int y_cur_pos, unsigned int Color)
0x0A80	0xB084    SUB	SP, SP, #16
0x0A82	0xF8CDE000  STR	LR, [SP, #0]
0x0A86	0xF8AD0008  STRH	R0, [SP, #8]
0x0A8A	0xF8AD100C  STRH	R1, [SP, #12]
;main.c, 77 :: 		if (y_cur_pos-STEP_Y_POS >= 0){                                         // make sure we only use positive values
0x0A8E	0xF9BD2008  LDRSH	R2, [SP, #8]
0x0A92	0x3A0E    SUBS	R2, #14
0x0A94	0xB212    SXTH	R2, R2
0x0A96	0x2A00    CMP	R2, #0
0x0A98	0xDB2A    BLT	L_ClearNextTextLine9
;main.c, 78 :: 		for(i=0; i<320; ++i) {                                              // 320 pixels = full horizontal scan line
0x0A9A	0x2200    MOVS	R2, #0
0x0A9C	0xF8AD2004  STRH	R2, [SP, #4]
L_ClearNextTextLine10:
0x0AA0	0xF8BD2004  LDRH	R2, [SP, #4]
0x0AA4	0xF5B27FA0  CMP	R2, #320
0x0AA8	0xD222    BCS	L_ClearNextTextLine11
;main.c, 79 :: 		Point_SCR(i,y_cur_pos-STEP_Y_POS);                              // set screen addresses
0x0AAA	0xF9BD2008  LDRSH	R2, [SP, #8]
0x0AAE	0x3A0E    SUBS	R2, #14
0x0AB0	0xB291    UXTH	R1, R2
0x0AB2	0xF8BD0004  LDRH	R0, [SP, #4]
0x0AB6	0xF7FFFEF5  BL	_Point_SCR+0
;main.c, 80 :: 		for(j=y_cur_pos-STEP_Y_POS; j<y_cur_pos; ++j)                   // rows are 1 character tall = 14
0x0ABA	0xF9BD2008  LDRSH	R2, [SP, #8]
0x0ABE	0x3A0E    SUBS	R2, #14
0x0AC0	0xF8AD2006  STRH	R2, [SP, #6]
L_ClearNextTextLine13:
0x0AC4	0xF9BD3008  LDRSH	R3, [SP, #8]
0x0AC8	0xF8BD2006  LDRH	R2, [SP, #6]
0x0ACC	0x429A    CMP	R2, R3
0x0ACE	0xD209    BCS	L_ClearNextTextLine14
;main.c, 81 :: 		Set_Pixel(Color);                                           // make the pixels black
0x0AD0	0xF8BD000C  LDRH	R0, [SP, #12]
0x0AD4	0xF7FFFF0E  BL	_Set_Pixel+0
;main.c, 80 :: 		for(j=y_cur_pos-STEP_Y_POS; j<y_cur_pos; ++j)                   // rows are 1 character tall = 14
0x0AD8	0xF8BD2006  LDRH	R2, [SP, #6]
0x0ADC	0x1C52    ADDS	R2, R2, #1
0x0ADE	0xF8AD2006  STRH	R2, [SP, #6]
;main.c, 81 :: 		Set_Pixel(Color);                                           // make the pixels black
0x0AE2	0xE7EF    B	L_ClearNextTextLine13
L_ClearNextTextLine14:
;main.c, 78 :: 		for(i=0; i<320; ++i) {                                              // 320 pixels = full horizontal scan line
0x0AE4	0xF8BD2004  LDRH	R2, [SP, #4]
0x0AE8	0x1C52    ADDS	R2, R2, #1
0x0AEA	0xF8AD2004  STRH	R2, [SP, #4]
;main.c, 82 :: 		}
0x0AEE	0xE7D7    B	L_ClearNextTextLine10
L_ClearNextTextLine11:
;main.c, 83 :: 		}
L_ClearNextTextLine9:
;main.c, 84 :: 		}
L_end_ClearNextTextLine:
0x0AF0	0xF8DDE000  LDR	LR, [SP, #0]
0x0AF4	0xB004    ADD	SP, SP, #16
0x0AF6	0x4770    BX	LR
; end of _ClearNextTextLine
_Display_Char:
;Lcd.c, 290 :: 		void Display_Char(unsigned int x0, unsigned int y0, unsigned int Color, unsigned char Mode, char s)
; Mode start address is: 12 (R3)
; Color start address is: 8 (R2)
; y0 start address is: 4 (R1)
0x0918	0xB082    SUB	SP, SP, #8
0x091A	0xF8CDE000  STR	LR, [SP, #0]
0x091E	0xFA1FF980  UXTH	R9, R0
0x0922	0xFA1FF881  UXTH	R8, R1
0x0926	0xB297    UXTH	R7, R2
0x0928	0xFA5FFA83  UXTB	R10, R3
; Mode end address is: 12 (R3)
; Color end address is: 8 (R2)
; y0 end address is: 4 (R1)
; x0 start address is: 36 (R9)
; y0 start address is: 32 (R8)
; Color start address is: 28 (R7)
; Mode start address is: 40 (R10)
; s start address is: 44 (R11)
0x092C	0xF89DB008  LDRB	R11, [SP, #8]
;Lcd.c, 294 :: 		Point_SCR(x0, y0);
0x0930	0xFA1FF188  UXTH	R1, R8
0x0934	0xFA1FF089  UXTH	R0, R9
0x0938	0xF7FFFFB4  BL	_Point_SCR+0
;Lcd.c, 295 :: 		for (j=0; j<14;++j){
; j start address is: 20 (R5)
0x093C	0x2500    MOVS	R5, #0
0x093E	0xB22D    SXTH	R5, R5
; Mode end address is: 40 (R10)
; s end address is: 44 (R11)
; Color end address is: 28 (R7)
; y0 end address is: 32 (R8)
; j end address is: 20 (R5)
; x0 end address is: 36 (R9)
0x0940	0xFA5FF68A  UXTB	R6, R10
0x0944	0xFA5FF38B  UXTB	R3, R11
L_Display_Char49:
; j start address is: 20 (R5)
; s start address is: 12 (R3)
; Mode start address is: 24 (R6)
; Color start address is: 28 (R7)
; y0 start address is: 32 (R8)
; x0 start address is: 36 (R9)
0x0948	0x2D0E    CMP	R5, #14
0x094A	0xDA0B    BGE	L_Display_Char50
;Lcd.c, 296 :: 		if(Mode==0) Set_Pixel(BLACK);   //Normal replace Display
0x094C	0xB916    CBNZ	R6, L_Display_Char52
0x094E	0x2000    MOVS	R0, #0
0x0950	0xF7FFFFD0  BL	_Set_Pixel+0
L_Display_Char52:
;Lcd.c, 297 :: 		if(Mode==1) Set_Pixel(Color);   //Inverse replace Display
0x0954	0x2E01    CMP	R6, #1
0x0956	0xD102    BNE	L_Display_Char53
0x0958	0xB2B8    UXTH	R0, R7
0x095A	0xF7FFFFCB  BL	_Set_Pixel+0
L_Display_Char53:
;Lcd.c, 295 :: 		for (j=0; j<14;++j){
0x095E	0x1C6D    ADDS	R5, R5, #1
0x0960	0xB22D    SXTH	R5, R5
;Lcd.c, 298 :: 		}
; j end address is: 20 (R5)
0x0962	0xE7F1    B	L_Display_Char49
L_Display_Char50:
;Lcd.c, 300 :: 		x0++;
0x0964	0xF1090901  ADD	R9, R9, #1
0x0968	0xFA1FF989  UXTH	R9, R9
;Lcd.c, 301 :: 		if (s!=0) {
0x096C	0x2B00    CMP	R3, #0
0x096E	0xF0008080  BEQ	L_Display_Char54
;Lcd.c, 302 :: 		unsigned const int *scanline=Char_Dot+((s-0x22)*8);
0x0972	0xF2A30422  SUBW	R4, R3, #34
0x0976	0xB224    SXTH	R4, R4
0x0978	0x00E4    LSLS	R4, R4, #3
0x097A	0xB224    SXTH	R4, R4
0x097C	0x0065    LSLS	R5, R4, #1
0x097E	0x4C3F    LDR	R4, [PC, #252]
0x0980	0x1964    ADDS	R4, R4, R5
; scanline start address is: 4 (R1)
0x0982	0x4621    MOV	R1, R4
;Lcd.c, 303 :: 		for(i=0;i<8;++i){
0x0984	0x2000    MOVS	R0, #0
0x0986	0xB200    SXTH	R0, R0
; Mode end address is: 24 (R6)
; Color end address is: 28 (R7)
; y0 end address is: 32 (R8)
; scanline end address is: 4 (R1)
; s end address is: 12 (R3)
; x0 end address is: 36 (R9)
0x0988	0xFA1FFB87  UXTH	R11, R7
0x098C	0xB207    SXTH	R7, R0
0x098E	0xB2D8    UXTB	R0, R3
0x0990	0xFA5FFC86  UXTB	R12, R6
0x0994	0xFA1FFA88  UXTH	R10, R8
0x0998	0x4688    MOV	R8, R1
L_Display_Char55:
; i start address is: 28 (R7)
; scanline start address is: 32 (R8)
; x0 start address is: 36 (R9)
; y0 start address is: 40 (R10)
; Color start address is: 44 (R11)
; Mode start address is: 48 (R12)
0x099A	0x2F08    CMP	R7, #8
0x099C	0xF2808066  BGE	L_Display_Char56
;Lcd.c, 304 :: 		Point_SCR(x0+i, y0);
0x09A0	0xEB090407  ADD	R4, R9, R7, LSL #0
0x09A4	0xF88D0004  STRB	R0, [SP, #4]
0x09A8	0xFA1FF18A  UXTH	R1, R10
0x09AC	0xB2A0    UXTH	R0, R4
0x09AE	0xF7FFFF79  BL	_Point_SCR+0
0x09B2	0xF89D0004  LDRB	R0, [SP, #4]
;Lcd.c, 305 :: 		if((s==0x20)||(s==0x21)) b=0x0000;
0x09B6	0x2820    CMP	R0, #32
0x09B8	0xD002    BEQ	L__Display_Char141
0x09BA	0x2821    CMP	R0, #33
0x09BC	0xD000    BEQ	L__Display_Char140
0x09BE	0xE002    B	L_Display_Char60
L__Display_Char141:
L__Display_Char140:
; b start address is: 4 (R1)
0x09C0	0x2100    MOVS	R1, #0
0x09C2	0xB209    SXTH	R1, R1
; b end address is: 4 (R1)
0x09C4	0xE003    B	L_Display_Char61
L_Display_Char60:
;Lcd.c, 306 :: 		else                       b=scanline[i];
0x09C6	0x007C    LSLS	R4, R7, #1
0x09C8	0xEB080404  ADD	R4, R8, R4, LSL #0
0x09CC	0x8821    LDRH	R1, [R4, #0]
; b start address is: 4 (R1)
; b end address is: 4 (R1)
L_Display_Char61:
;Lcd.c, 307 :: 		if((s==0x21)&&(i==4)) break;
; b start address is: 4 (R1)
0x09CE	0x2821    CMP	R0, #33
0x09D0	0xD102    BNE	L__Display_Char143
0x09D2	0x2F04    CMP	R7, #4
0x09D4	0xD100    BNE	L__Display_Char142
; b end address is: 4 (R1)
; Mode end address is: 48 (R12)
; Color end address is: 44 (R11)
; y0 end address is: 40 (R10)
; x0 end address is: 36 (R9)
; scanline end address is: 32 (R8)
; i end address is: 28 (R7)
L__Display_Char138:
0x09D6	0xE049    B	L_Display_Char56
L__Display_Char143:
; i start address is: 28 (R7)
; scanline start address is: 32 (R8)
; x0 start address is: 36 (R9)
; y0 start address is: 40 (R10)
; Color start address is: 44 (R11)
; Mode start address is: 48 (R12)
; b start address is: 4 (R1)
L__Display_Char142:
;Lcd.c, 308 :: 		for(j=0;j<14;++j){
; j start address is: 24 (R6)
0x09D8	0x2600    MOVS	R6, #0
0x09DA	0xB236    SXTH	R6, R6
; b end address is: 4 (R1)
; Mode end address is: 48 (R12)
; Color end address is: 44 (R11)
; y0 end address is: 40 (R10)
; x0 end address is: 36 (R9)
; scanline end address is: 32 (R8)
; j end address is: 24 (R6)
; i end address is: 28 (R7)
0x09DC	0xB23D    SXTH	R5, R7
0x09DE	0xB20F    SXTH	R7, R1
0x09E0	0xB2C3    UXTB	R3, R0
L_Display_Char65:
; j start address is: 24 (R6)
; b start address is: 28 (R7)
; s start address is: 12 (R3)
; Mode start address is: 48 (R12)
; Color start address is: 44 (R11)
; y0 start address is: 40 (R10)
; x0 start address is: 36 (R9)
; scanline start address is: 32 (R8)
; i start address is: 20 (R5)
0x09E2	0x2E0E    CMP	R6, #14
0x09E4	0xDA3E    BGE	L_Display_Char66
;Lcd.c, 309 :: 		if(b&4) {
0x09E6	0xF0070404  AND	R4, R7, #4
0x09EA	0xB224    SXTH	R4, R4
0x09EC	0xB1D4    CBZ	R4, L_Display_Char68
;Lcd.c, 310 :: 		if(Mode==0) Set_Pixel(Color);
0x09EE	0xF1BC0F00  CMP	R12, #0
0x09F2	0xD103    BNE	L_Display_Char69
0x09F4	0xFA1FF08B  UXTH	R0, R11
0x09F8	0xF7FFFF7C  BL	_Set_Pixel+0
L_Display_Char69:
;Lcd.c, 311 :: 		if(Mode==1) Set_Pixel(BLACK);
0x09FC	0xF1BC0F01  CMP	R12, #1
0x0A00	0xD102    BNE	L_Display_Char70
0x0A02	0x2000    MOVS	R0, #0
0x0A04	0xF7FFFF76  BL	_Set_Pixel+0
L_Display_Char70:
;Lcd.c, 312 :: 		if(Mode==2) Set_Pixel(Color);
0x0A08	0xF1BC0F02  CMP	R12, #2
0x0A0C	0xD103    BNE	L_Display_Char71
0x0A0E	0xFA1FF08B  UXTH	R0, R11
0x0A12	0xF7FFFF6F  BL	_Set_Pixel+0
L_Display_Char71:
;Lcd.c, 313 :: 		if(Mode==3) Set_Pixel(BLACK);
0x0A16	0xF1BC0F03  CMP	R12, #3
0x0A1A	0xD102    BNE	L_Display_Char72
0x0A1C	0x2000    MOVS	R0, #0
0x0A1E	0xF7FFFF69  BL	_Set_Pixel+0
L_Display_Char72:
;Lcd.c, 314 :: 		} else {
0x0A22	0xE019    B	L_Display_Char73
L_Display_Char68:
;Lcd.c, 315 :: 		if(Mode==0) Set_Pixel(BLACK);
0x0A24	0xF1BC0F00  CMP	R12, #0
0x0A28	0xD102    BNE	L_Display_Char74
0x0A2A	0x2000    MOVS	R0, #0
0x0A2C	0xF7FFFF62  BL	_Set_Pixel+0
L_Display_Char74:
;Lcd.c, 316 :: 		if(Mode==1) Set_Pixel(Color);
0x0A30	0xF1BC0F01  CMP	R12, #1
0x0A34	0xD103    BNE	L_Display_Char75
0x0A36	0xFA1FF08B  UXTH	R0, R11
0x0A3A	0xF7FFFF5B  BL	_Set_Pixel+0
L_Display_Char75:
;Lcd.c, 317 :: 		if(Mode==2) Set_Pixel(BLACK);
0x0A3E	0xF1BC0F02  CMP	R12, #2
0x0A42	0xD102    BNE	L_Display_Char76
0x0A44	0x2000    MOVS	R0, #0
0x0A46	0xF7FFFF55  BL	_Set_Pixel+0
L_Display_Char76:
;Lcd.c, 318 :: 		if(Mode==3) Set_Pixel(Color);
0x0A4A	0xF1BC0F03  CMP	R12, #3
0x0A4E	0xD103    BNE	L_Display_Char77
0x0A50	0xFA1FF08B  UXTH	R0, R11
0x0A54	0xF7FFFF4E  BL	_Set_Pixel+0
L_Display_Char77:
;Lcd.c, 319 :: 		}
L_Display_Char73:
;Lcd.c, 320 :: 		b>>=1;
0x0A58	0x107C    ASRS	R4, R7, #1
; b end address is: 28 (R7)
0x0A5A	0xB220    SXTH	R0, R4
;Lcd.c, 308 :: 		for(j=0;j<14;++j){
0x0A5C	0x1C76    ADDS	R6, R6, #1
0x0A5E	0xB236    SXTH	R6, R6
;Lcd.c, 321 :: 		}
; j end address is: 24 (R6)
0x0A60	0xB207    SXTH	R7, R0
0x0A62	0xE7BE    B	L_Display_Char65
L_Display_Char66:
;Lcd.c, 303 :: 		for(i=0;i<8;++i){
0x0A64	0x1C6C    ADDS	R4, R5, #1
; i end address is: 20 (R5)
; i start address is: 28 (R7)
0x0A66	0xB227    SXTH	R7, R4
;Lcd.c, 322 :: 		}
0x0A68	0xB2D8    UXTB	R0, R3
; s end address is: 12 (R3)
; Mode end address is: 48 (R12)
; Color end address is: 44 (R11)
; y0 end address is: 40 (R10)
; x0 end address is: 36 (R9)
; scanline end address is: 32 (R8)
; i end address is: 28 (R7)
0x0A6A	0xE796    B	L_Display_Char55
L_Display_Char56:
;Lcd.c, 323 :: 		if(s==0x21) x0 +=4;
0x0A6C	0x2821    CMP	R0, #33
0x0A6E	0xD100    BNE	L_Display_Char78
0x0A70	0xE7FF    B	L_Display_Char79
L_Display_Char78:
;Lcd.c, 324 :: 		else  x0 += 8;
L_Display_Char79:
;Lcd.c, 325 :: 		}
L_Display_Char54:
;Lcd.c, 326 :: 		}
L_end_Display_Char:
0x0A72	0xF8DDE000  LDR	LR, [SP, #0]
0x0A76	0xB002    ADD	SP, SP, #8
0x0A78	0x4770    BX	LR
0x0A7A	0xBF00    NOP
0x0A7C	0x1A9C0000  	_Char_Dot+0
; end of _Display_Char
_HandleKeyPress:
;main.c, 123 :: 		void HandleKeyPress(void)
0x0DE0	0xB083    SUB	SP, SP, #12
0x0DE2	0xF8CDE000  STR	LR, [SP, #0]
;main.c, 127 :: 		cur_key_press = KeyScan();
0x0DE6	0xF7FFFEBF  BL	_KeyScan+0
0x0DEA	0x499A    LDR	R1, [PC, #616]
0x0DEC	0x7008    STRB	R0, [R1, #0]
;main.c, 128 :: 		switch (cur_key_press){
0x0DEE	0xE177    B	L_HandleKeyPress26
;main.c, 129 :: 		case KEYCODE_VOID:                              // no keys are pressed
L_HandleKeyPress28:
;main.c, 130 :: 		if (bPrompt){                               // but a good place to handle prompt feature
0x0DF0	0x4999    LDR	R1, [PC, #612]
0x0DF2	0x6808    LDR	R0, [R1, #0]
0x0DF4	0x2800    CMP	R0, #0
0x0DF6	0xD035    BEQ	L_HandleKeyPress29
;main.c, 131 :: 		if (++prompt_count==10){
0x0DF8	0x4998    LDR	R1, [PC, #608]
0x0DFA	0xF9B10000  LDRSH	R0, [R1, #0]
0x0DFE	0x1C40    ADDS	R0, R0, #1
0x0E00	0xB200    SXTH	R0, R0
0x0E02	0x8008    STRH	R0, [R1, #0]
0x0E04	0x280A    CMP	R0, #10
0x0E06	0xD10E    BNE	L_HandleKeyPress30
;main.c, 132 :: 		Display_Char(x_pos, y_pos, WHITE,PRN, '_');     // show '_'
0x0E08	0x225F    MOVS	R2, #95
0x0E0A	0x4895    LDR	R0, [PC, #596]
0x0E0C	0xF9B01000  LDRSH	R1, [R0, #0]
0x0E10	0x4894    LDR	R0, [PC, #592]
0x0E12	0xF9B00000  LDRSH	R0, [R0, #0]
0x0E16	0xB404    PUSH	(R2)
0x0E18	0x2300    MOVS	R3, #0
0x0E1A	0xF64F72FF  MOVW	R2, #65535
0x0E1E	0xF7FFFD7B  BL	_Display_Char+0
0x0E22	0xB001    ADD	SP, SP, #4
;main.c, 133 :: 		} else if (prompt_count==20){
0x0E24	0xE01E    B	L_HandleKeyPress31
L_HandleKeyPress30:
0x0E26	0x488D    LDR	R0, [PC, #564]
0x0E28	0xF9B00000  LDRSH	R0, [R0, #0]
0x0E2C	0x2814    CMP	R0, #20
0x0E2E	0xD119    BNE	L_HandleKeyPress32
;main.c, 134 :: 		prompt_count = 0;
0x0E30	0x2100    MOVS	R1, #0
0x0E32	0xB209    SXTH	R1, R1
0x0E34	0x4889    LDR	R0, [PC, #548]
0x0E36	0x8001    STRH	R1, [R0, #0]
;main.c, 135 :: 		Display_Char(x_pos, y_pos, WHITE,PRN, val_tab[in_value[in_value_index]]);   // now show char
0x0E38	0x488B    LDR	R0, [PC, #556]
0x0E3A	0x7801    LDRB	R1, [R0, #0]
0x0E3C	0x488B    LDR	R0, [PC, #556]
0x0E3E	0x1840    ADDS	R0, R0, R1
0x0E40	0x7801    LDRB	R1, [R0, #0]
0x0E42	0x488B    LDR	R0, [PC, #556]
0x0E44	0x1840    ADDS	R0, R0, R1
0x0E46	0x7800    LDRB	R0, [R0, #0]
0x0E48	0xB2C2    UXTB	R2, R0
0x0E4A	0x4885    LDR	R0, [PC, #532]
0x0E4C	0xF9B01000  LDRSH	R1, [R0, #0]
0x0E50	0x4884    LDR	R0, [PC, #528]
0x0E52	0xF9B00000  LDRSH	R0, [R0, #0]
0x0E56	0xB404    PUSH	(R2)
0x0E58	0x2300    MOVS	R3, #0
0x0E5A	0xF64F72FF  MOVW	R2, #65535
0x0E5E	0xF7FFFD5B  BL	_Display_Char+0
0x0E62	0xB001    ADD	SP, SP, #4
;main.c, 136 :: 		}
L_HandleKeyPress32:
L_HandleKeyPress31:
;main.c, 137 :: 		}
L_HandleKeyPress29:
;main.c, 138 :: 		break;
0x0E64	0xE15F    B	L_HandleKeyPress27
;main.c, 140 :: 		case KEYCODE_PLAY:                              // this is the A button
L_HandleKeyPress33:
;main.c, 141 :: 		x_pos = 1;
0x0E66	0x2101    MOVS	R1, #1
0x0E68	0xB209    SXTH	R1, R1
0x0E6A	0x487E    LDR	R0, [PC, #504]
0x0E6C	0x8001    STRH	R1, [R0, #0]
;main.c, 142 :: 		y_pos =  MAX_Y_POS-STEP_Y_POS;              // go back to top
0x0E6E	0x21E0    MOVS	R1, #224
0x0E70	0xB209    SXTH	R1, R1
0x0E72	0x487B    LDR	R0, [PC, #492]
0x0E74	0x8001    STRH	R1, [R0, #0]
;main.c, 143 :: 		Clear_Screen(BLACK);
0x0E76	0x2000    MOVS	R0, #0
0x0E78	0xF000FC32  BL	_Clear_Screen+0
;main.c, 144 :: 		break;
0x0E7C	0xE153    B	L_HandleKeyPress27
;main.c, 146 :: 		case KEYCODE_MANU:
L_HandleKeyPress34:
;main.c, 147 :: 		String2Send();
0x0E7E	0xF7FFFE3B  BL	_String2Send+0
;main.c, 148 :: 		ClearNextTextLine(y_pos+STEP_Y_POS, BLACK);            // make sure the next line is empty
0x0E82	0x4877    LDR	R0, [PC, #476]
0x0E84	0xF9B00000  LDRSH	R0, [R0, #0]
0x0E88	0x300E    ADDS	R0, #14
0x0E8A	0x2100    MOVS	R1, #0
0x0E8C	0xF7FFFDF8  BL	_ClearNextTextLine+0
;main.c, 149 :: 		bPrompt = 0;
0x0E90	0x2100    MOVS	R1, #0
0x0E92	0xB249    SXTB	R1, R1
0x0E94	0x4870    LDR	R0, [PC, #448]
0x0E96	0x6001    STR	R1, [R0, #0]
;main.c, 150 :: 		for (in_value_index=0; in_value_index<MAX_KEY_IN_CHARS; in_value_index++)
0x0E98	0x2100    MOVS	R1, #0
0x0E9A	0x4873    LDR	R0, [PC, #460]
0x0E9C	0x7001    STRB	R1, [R0, #0]
L_HandleKeyPress35:
0x0E9E	0x4872    LDR	R0, [PC, #456]
0x0EA0	0x7800    LDRB	R0, [R0, #0]
0x0EA2	0x2808    CMP	R0, #8
0x0EA4	0xD20A    BCS	L_HandleKeyPress36
;main.c, 151 :: 		in_value[in_value_index] = 0;
0x0EA6	0x4A70    LDR	R2, [PC, #448]
0x0EA8	0x7811    LDRB	R1, [R2, #0]
0x0EAA	0x4870    LDR	R0, [PC, #448]
0x0EAC	0x1841    ADDS	R1, R0, R1
0x0EAE	0x2000    MOVS	R0, #0
0x0EB0	0x7008    STRB	R0, [R1, #0]
;main.c, 150 :: 		for (in_value_index=0; in_value_index<MAX_KEY_IN_CHARS; in_value_index++)
0x0EB2	0x4610    MOV	R0, R2
0x0EB4	0x7800    LDRB	R0, [R0, #0]
0x0EB6	0x1C40    ADDS	R0, R0, #1
0x0EB8	0x7010    STRB	R0, [R2, #0]
;main.c, 151 :: 		in_value[in_value_index] = 0;
0x0EBA	0xE7F0    B	L_HandleKeyPress35
L_HandleKeyPress36:
;main.c, 152 :: 		in_value_index = 0;
0x0EBC	0x2100    MOVS	R1, #0
0x0EBE	0x486A    LDR	R0, [PC, #424]
0x0EC0	0x7001    STRB	R1, [R0, #0]
;main.c, 153 :: 		break;    // this is the OK button
0x0EC2	0xE130    B	L_HandleKeyPress27
;main.c, 155 :: 		case KEYCODE_UP:
L_HandleKeyPress38:
;main.c, 156 :: 		bPrompt = 1;
0x0EC4	0x2101    MOVS	R1, #1
0x0EC6	0xB249    SXTB	R1, R1
0x0EC8	0x4863    LDR	R0, [PC, #396]
0x0ECA	0x6001    STR	R1, [R0, #0]
;main.c, 157 :: 		if (in_value[in_value_index]<MAX_KEY_IN_TABLE-1) in_value[in_value_index]++;
0x0ECC	0x4866    LDR	R0, [PC, #408]
0x0ECE	0x7801    LDRB	R1, [R0, #0]
0x0ED0	0x4866    LDR	R0, [PC, #408]
0x0ED2	0x1840    ADDS	R0, R0, R1
0x0ED4	0x7800    LDRB	R0, [R0, #0]
0x0ED6	0x280B    CMP	R0, #11
0x0ED8	0xD207    BCS	L_HandleKeyPress39
0x0EDA	0x4863    LDR	R0, [PC, #396]
0x0EDC	0x7801    LDRB	R1, [R0, #0]
0x0EDE	0x4863    LDR	R0, [PC, #396]
0x0EE0	0x1841    ADDS	R1, R0, R1
0x0EE2	0x7808    LDRB	R0, [R1, #0]
0x0EE4	0x1C40    ADDS	R0, R0, #1
0x0EE6	0x7008    STRB	R0, [R1, #0]
0x0EE8	0xE005    B	L_HandleKeyPress40
L_HandleKeyPress39:
;main.c, 158 :: 		else in_value[in_value_index] = 0;
0x0EEA	0x485F    LDR	R0, [PC, #380]
0x0EEC	0x7801    LDRB	R1, [R0, #0]
0x0EEE	0x485F    LDR	R0, [PC, #380]
0x0EF0	0x1841    ADDS	R1, R0, R1
0x0EF2	0x2000    MOVS	R0, #0
0x0EF4	0x7008    STRB	R0, [R1, #0]
L_HandleKeyPress40:
;main.c, 159 :: 		Display_Char(x_pos, y_pos, WHITE,PRN, val_tab[in_value[in_value_index]]);
0x0EF6	0x485C    LDR	R0, [PC, #368]
0x0EF8	0x7801    LDRB	R1, [R0, #0]
0x0EFA	0x485C    LDR	R0, [PC, #368]
0x0EFC	0x1840    ADDS	R0, R0, R1
0x0EFE	0x7801    LDRB	R1, [R0, #0]
0x0F00	0x485B    LDR	R0, [PC, #364]
0x0F02	0x1840    ADDS	R0, R0, R1
0x0F04	0x7800    LDRB	R0, [R0, #0]
0x0F06	0xB2C2    UXTB	R2, R0
0x0F08	0x4855    LDR	R0, [PC, #340]
0x0F0A	0xF9B01000  LDRSH	R1, [R0, #0]
0x0F0E	0x4855    LDR	R0, [PC, #340]
0x0F10	0xF9B00000  LDRSH	R0, [R0, #0]
0x0F14	0xB404    PUSH	(R2)
0x0F16	0x2300    MOVS	R3, #0
0x0F18	0xF64F72FF  MOVW	R2, #65535
0x0F1C	0xF7FFFCFC  BL	_Display_Char+0
0x0F20	0xB001    ADD	SP, SP, #4
;main.c, 160 :: 		break;
0x0F22	0xE100    B	L_HandleKeyPress27
;main.c, 162 :: 		case KEYCODE_DOWN:
L_HandleKeyPress41:
;main.c, 163 :: 		bPrompt = 1;
0x0F24	0x2101    MOVS	R1, #1
0x0F26	0xB249    SXTB	R1, R1
0x0F28	0x484B    LDR	R0, [PC, #300]
0x0F2A	0x6001    STR	R1, [R0, #0]
;main.c, 164 :: 		if (in_value[in_value_index]>0) in_value[in_value_index]--;
0x0F2C	0x484E    LDR	R0, [PC, #312]
0x0F2E	0x7801    LDRB	R1, [R0, #0]
0x0F30	0x484E    LDR	R0, [PC, #312]
0x0F32	0x1840    ADDS	R0, R0, R1
0x0F34	0x7800    LDRB	R0, [R0, #0]
0x0F36	0x2800    CMP	R0, #0
0x0F38	0xD907    BLS	L_HandleKeyPress42
0x0F3A	0x484B    LDR	R0, [PC, #300]
0x0F3C	0x7801    LDRB	R1, [R0, #0]
0x0F3E	0x484B    LDR	R0, [PC, #300]
0x0F40	0x1841    ADDS	R1, R0, R1
0x0F42	0x7808    LDRB	R0, [R1, #0]
0x0F44	0x1E40    SUBS	R0, R0, #1
0x0F46	0x7008    STRB	R0, [R1, #0]
0x0F48	0xE005    B	L_HandleKeyPress43
L_HandleKeyPress42:
;main.c, 165 :: 		else in_value[in_value_index] = MAX_KEY_IN_TABLE-1;
0x0F4A	0x4847    LDR	R0, [PC, #284]
0x0F4C	0x7801    LDRB	R1, [R0, #0]
0x0F4E	0x4847    LDR	R0, [PC, #284]
0x0F50	0x1841    ADDS	R1, R0, R1
0x0F52	0x200B    MOVS	R0, #11
0x0F54	0x7008    STRB	R0, [R1, #0]
L_HandleKeyPress43:
;main.c, 166 :: 		Display_Char(x_pos, y_pos, WHITE,PRN, val_tab[in_value[in_value_index]]);
0x0F56	0x4844    LDR	R0, [PC, #272]
0x0F58	0x7801    LDRB	R1, [R0, #0]
0x0F5A	0x4844    LDR	R0, [PC, #272]
0x0F5C	0x1840    ADDS	R0, R0, R1
0x0F5E	0x7801    LDRB	R1, [R0, #0]
0x0F60	0x4843    LDR	R0, [PC, #268]
0x0F62	0x1840    ADDS	R0, R0, R1
0x0F64	0x7800    LDRB	R0, [R0, #0]
0x0F66	0xB2C2    UXTB	R2, R0
0x0F68	0x483D    LDR	R0, [PC, #244]
0x0F6A	0xF9B01000  LDRSH	R1, [R0, #0]
0x0F6E	0x483D    LDR	R0, [PC, #244]
0x0F70	0xF9B00000  LDRSH	R0, [R0, #0]
0x0F74	0xB404    PUSH	(R2)
0x0F76	0x2300    MOVS	R3, #0
0x0F78	0xF64F72FF  MOVW	R2, #65535
0x0F7C	0xF7FFFCCC  BL	_Display_Char+0
0x0F80	0xB001    ADD	SP, SP, #4
;main.c, 167 :: 		break;
0x0F82	0xE0D0    B	L_HandleKeyPress27
;main.c, 169 :: 		case KEYCODE_LEFT:
L_HandleKeyPress44:
;main.c, 170 :: 		bPrompt = 1;
0x0F84	0x2101    MOVS	R1, #1
0x0F86	0xB249    SXTB	R1, R1
0x0F88	0x4833    LDR	R0, [PC, #204]
0x0F8A	0x6001    STR	R1, [R0, #0]
;main.c, 171 :: 		if (in_value_index>0){
0x0F8C	0x4836    LDR	R0, [PC, #216]
0x0F8E	0x7800    LDRB	R0, [R0, #0]
0x0F90	0x2800    CMP	R0, #0
0x0F92	0xD947    BLS	L_HandleKeyPress45
;main.c, 172 :: 		if (in_value[in_value_index] == 0){
0x0F94	0x4834    LDR	R0, [PC, #208]
0x0F96	0x7801    LDRB	R1, [R0, #0]
0x0F98	0x4834    LDR	R0, [PC, #208]
0x0F9A	0x1840    ADDS	R0, R0, R1
0x0F9C	0x7800    LDRB	R0, [R0, #0]
0x0F9E	0xB970    CBNZ	R0, L_HandleKeyPress46
;main.c, 173 :: 		Display_Char(x_pos, y_pos, WHITE,PRN, ' ');
0x0FA0	0x2220    MOVS	R2, #32
0x0FA2	0x482F    LDR	R0, [PC, #188]
0x0FA4	0xF9B01000  LDRSH	R1, [R0, #0]
0x0FA8	0x482E    LDR	R0, [PC, #184]
0x0FAA	0xF9B00000  LDRSH	R0, [R0, #0]
0x0FAE	0xB404    PUSH	(R2)
0x0FB0	0x2300    MOVS	R3, #0
0x0FB2	0xF64F72FF  MOVW	R2, #65535
0x0FB6	0xF7FFFCAF  BL	_Display_Char+0
0x0FBA	0xB001    ADD	SP, SP, #4
;main.c, 174 :: 		} else {
0x0FBC	0xE015    B	L_HandleKeyPress47
L_HandleKeyPress46:
;main.c, 175 :: 		Display_Char(x_pos, y_pos, WHITE,PRN, val_tab[in_value[in_value_index]]);
0x0FBE	0x482A    LDR	R0, [PC, #168]
0x0FC0	0x7801    LDRB	R1, [R0, #0]
0x0FC2	0x482A    LDR	R0, [PC, #168]
0x0FC4	0x1840    ADDS	R0, R0, R1
0x0FC6	0x7801    LDRB	R1, [R0, #0]
0x0FC8	0x4829    LDR	R0, [PC, #164]
0x0FCA	0x1840    ADDS	R0, R0, R1
0x0FCC	0x7800    LDRB	R0, [R0, #0]
0x0FCE	0xB2C2    UXTB	R2, R0
0x0FD0	0x4823    LDR	R0, [PC, #140]
0x0FD2	0xF9B01000  LDRSH	R1, [R0, #0]
0x0FD6	0x4823    LDR	R0, [PC, #140]
0x0FD8	0xF9B00000  LDRSH	R0, [R0, #0]
0x0FDC	0xB404    PUSH	(R2)
0x0FDE	0x2300    MOVS	R3, #0
0x0FE0	0xF64F72FF  MOVW	R2, #65535
0x0FE4	0xF7FFFC98  BL	_Display_Char+0
0x0FE8	0xB001    ADD	SP, SP, #4
;main.c, 176 :: 		}
L_HandleKeyPress47:
;main.c, 177 :: 		in_value_index--;
0x0FEA	0x491F    LDR	R1, [PC, #124]
0x0FEC	0x7808    LDRB	R0, [R1, #0]
0x0FEE	0x1E42    SUBS	R2, R0, #1
0x0FF0	0xB2D2    UXTB	R2, R2
0x0FF2	0x700A    STRB	R2, [R1, #0]
;main.c, 178 :: 		x_pos-=STEP_X_POS;
0x0FF4	0x491B    LDR	R1, [PC, #108]
0x0FF6	0xF9B10000  LDRSH	R0, [R1, #0]
0x0FFA	0xF2A00309  SUBW	R3, R0, #9
0x0FFE	0x800B    STRH	R3, [R1, #0]
;main.c, 179 :: 		Display_Char(x_pos, y_pos, WHITE,PRN, val_tab[in_value[in_value_index]]);
0x1000	0x481A    LDR	R0, [PC, #104]
0x1002	0x1880    ADDS	R0, R0, R2
0x1004	0x7801    LDRB	R1, [R0, #0]
0x1006	0x481A    LDR	R0, [PC, #104]
0x1008	0x1840    ADDS	R0, R0, R1
0x100A	0x7800    LDRB	R0, [R0, #0]
0x100C	0xB2C2    UXTB	R2, R0
0x100E	0x4814    LDR	R0, [PC, #80]
0x1010	0xF9B01000  LDRSH	R1, [R0, #0]
0x1014	0xB298    UXTH	R0, R3
0x1016	0xB404    PUSH	(R2)
0x1018	0x2300    MOVS	R3, #0
0x101A	0xF64F72FF  MOVW	R2, #65535
0x101E	0xF7FFFC7B  BL	_Display_Char+0
0x1022	0xB001    ADD	SP, SP, #4
;main.c, 180 :: 		}
L_HandleKeyPress45:
;main.c, 181 :: 		break;
0x1024	0xE07F    B	L_HandleKeyPress27
;main.c, 183 :: 		case KEYCODE_RIGHT:
L_HandleKeyPress48:
;main.c, 184 :: 		bPrompt = 1;
0x1026	0x2101    MOVS	R1, #1
0x1028	0xB249    SXTB	R1, R1
0x102A	0x480B    LDR	R0, [PC, #44]
0x102C	0x6001    STR	R1, [R0, #0]
;main.c, 185 :: 		if (in_value[in_value_index] == 0) in_value[in_value_index] = 1;
0x102E	0x480E    LDR	R0, [PC, #56]
0x1030	0x7801    LDRB	R1, [R0, #0]
0x1032	0x480E    LDR	R0, [PC, #56]
0x1034	0x1840    ADDS	R0, R0, R1
0x1036	0x7800    LDRB	R0, [R0, #0]
0x1038	0xB928    CBNZ	R0, L_HandleKeyPress49
0x103A	0x480B    LDR	R0, [PC, #44]
0x103C	0x7801    LDRB	R1, [R0, #0]
0x103E	0x480B    LDR	R0, [PC, #44]
0x1040	0x1841    ADDS	R1, R0, R1
0x1042	0x2001    MOVS	R0, #1
0x1044	0x7008    STRB	R0, [R1, #0]
L_HandleKeyPress49:
;main.c, 186 :: 		if (in_value_index<MAX_KEY_IN_CHARS){
0x1046	0x4808    LDR	R0, [PC, #32]
0x1048	0x7800    LDRB	R0, [R0, #0]
0x104A	0x2808    CMP	R0, #8
0x104C	0xD247    BCS	L_HandleKeyPress50
;main.c, 187 :: 		Display_Char(x_pos, y_pos, WHITE,PRN, val_tab[in_value[in_value_index]]);
0x104E	0x4806    LDR	R0, [PC, #24]
0x1050	0xF000B810  B	#32
0x1054	0x00A12000  	main_cur_key_press+0
0x1058	0x14002200  	_bPrompt+0
0x105C	0x00A22000  	HandleKeyPress_prompt_count_L0+0
0x1060	0x00042000  	main_y_pos+0
0x1064	0x00022000  	main_x_pos+0
0x1068	0x00012000  	_in_value_index+0
0x106C	0x00122000  	_in_value+0
0x1070	0x00062000  	_val_tab+0
0x1074	0x7801    LDRB	R1, [R0, #0]
0x1076	0x482E    LDR	R0, [PC, #184]
0x1078	0x1840    ADDS	R0, R0, R1
0x107A	0x7801    LDRB	R1, [R0, #0]
0x107C	0x482D    LDR	R0, [PC, #180]
0x107E	0x1840    ADDS	R0, R0, R1
0x1080	0x7800    LDRB	R0, [R0, #0]
0x1082	0xB2C2    UXTB	R2, R0
0x1084	0x482C    LDR	R0, [PC, #176]
0x1086	0x9002    STR	R0, [SP, #8]
0x1088	0xF9B01000  LDRSH	R1, [R0, #0]
0x108C	0x482B    LDR	R0, [PC, #172]
0x108E	0x9001    STR	R0, [SP, #4]
0x1090	0xF9B00000  LDRSH	R0, [R0, #0]
0x1094	0xB404    PUSH	(R2)
0x1096	0x2300    MOVS	R3, #0
0x1098	0xF64F72FF  MOVW	R2, #65535
0x109C	0xF7FFFC3C  BL	_Display_Char+0
0x10A0	0xB001    ADD	SP, SP, #4
;main.c, 188 :: 		in_value_index++;
0x10A2	0x4927    LDR	R1, [PC, #156]
0x10A4	0x7808    LDRB	R0, [R1, #0]
0x10A6	0x1C42    ADDS	R2, R0, #1
0x10A8	0xB2D2    UXTB	R2, R2
0x10AA	0x700A    STRB	R2, [R1, #0]
;main.c, 189 :: 		x_pos+=STEP_X_POS;
0x10AC	0x9901    LDR	R1, [SP, #4]
0x10AE	0x4608    MOV	R0, R1
0x10B0	0xF9B00000  LDRSH	R0, [R0, #0]
0x10B4	0xF2000309  ADDW	R3, R0, #9
0x10B8	0x800B    STRH	R3, [R1, #0]
;main.c, 190 :: 		Display_Char(x_pos, y_pos, WHITE,PRN, val_tab[in_value[in_value_index]]);
0x10BA	0x481D    LDR	R0, [PC, #116]
0x10BC	0x1880    ADDS	R0, R0, R2
0x10BE	0x7801    LDRB	R1, [R0, #0]
0x10C0	0x481C    LDR	R0, [PC, #112]
0x10C2	0x1840    ADDS	R0, R0, R1
0x10C4	0x7800    LDRB	R0, [R0, #0]
0x10C6	0xB2C2    UXTB	R2, R0
0x10C8	0x9802    LDR	R0, [SP, #8]
0x10CA	0xF9B01000  LDRSH	R1, [R0, #0]
0x10CE	0xB298    UXTH	R0, R3
0x10D0	0xB404    PUSH	(R2)
0x10D2	0x2300    MOVS	R3, #0
0x10D4	0xF64F72FF  MOVW	R2, #65535
0x10D8	0xF7FFFC1E  BL	_Display_Char+0
0x10DC	0xB001    ADD	SP, SP, #4
;main.c, 191 :: 		}
L_HandleKeyPress50:
;main.c, 192 :: 		break;
0x10DE	0xE022    B	L_HandleKeyPress27
;main.c, 193 :: 		}
L_HandleKeyPress26:
0x10E0	0x4818    LDR	R0, [PC, #96]
0x10E2	0x7800    LDRB	R0, [R0, #0]
0x10E4	0x2800    CMP	R0, #0
0x10E6	0xF43FAE83  BEQ	L_HandleKeyPress28
0x10EA	0x4816    LDR	R0, [PC, #88]
0x10EC	0x7800    LDRB	R0, [R0, #0]
0x10EE	0x2801    CMP	R0, #1
0x10F0	0xF43FAEB9  BEQ	L_HandleKeyPress33
0x10F4	0x4813    LDR	R0, [PC, #76]
0x10F6	0x7800    LDRB	R0, [R0, #0]
0x10F8	0x2802    CMP	R0, #2
0x10FA	0xF43FAEC0  BEQ	L_HandleKeyPress34
0x10FE	0x4811    LDR	R0, [PC, #68]
0x1100	0x7800    LDRB	R0, [R0, #0]
0x1102	0x2803    CMP	R0, #3
0x1104	0xF43FAEDE  BEQ	L_HandleKeyPress38
0x1108	0x480E    LDR	R0, [PC, #56]
0x110A	0x7800    LDRB	R0, [R0, #0]
0x110C	0x2804    CMP	R0, #4
0x110E	0xF43FAF09  BEQ	L_HandleKeyPress41
0x1112	0x480C    LDR	R0, [PC, #48]
0x1114	0x7800    LDRB	R0, [R0, #0]
0x1116	0x2805    CMP	R0, #5
0x1118	0xF43FAF34  BEQ	L_HandleKeyPress44
0x111C	0x4809    LDR	R0, [PC, #36]
0x111E	0x7800    LDRB	R0, [R0, #0]
0x1120	0x2806    CMP	R0, #6
0x1122	0xF43FAF80  BEQ	L_HandleKeyPress48
L_HandleKeyPress27:
;main.c, 194 :: 		}
L_end_HandleKeyPress:
0x1126	0xF8DDE000  LDR	LR, [SP, #0]
0x112A	0xB003    ADD	SP, SP, #12
0x112C	0x4770    BX	LR
0x112E	0xBF00    NOP
0x1130	0x00122000  	_in_value+0
0x1134	0x00062000  	_val_tab+0
0x1138	0x00042000  	main_y_pos+0
0x113C	0x00022000  	main_x_pos+0
0x1140	0x00012000  	_in_value_index+0
0x1144	0x00A12000  	main_cur_key_press+0
; end of _HandleKeyPress
_KeyScan:
;HW_V1_Config.c, 145 :: 		char KeyScan(void)
0x0B68	0xB082    SUB	SP, SP, #8
;HW_V1_Config.c, 147 :: 		char Key_Status_Now=0, KeyCode=0;
; Key_Status_Now start address is: 4 (R1)
0x0B6A	0x2100    MOVS	R1, #0
0x0B6C	0x2000    MOVS	R0, #0
0x0B6E	0xF88D0004  STRB	R0, [SP, #4]
;HW_V1_Config.c, 149 :: 		if((~GPIOA_IDR) & 0x0010) Key_Status_Now |= 0x01; //KEY_PLAY_ON
0x0B72	0x485F    LDR	R0, [PC, #380]
0x0B74	0x6800    LDR	R0, [R0, #0]
0x0B76	0x43C0    MVN	R0, R0
0x0B78	0xF0000010  AND	R0, R0, #16
0x0B7C	0xB120    CBZ	R0, L__KeyScan27
0x0B7E	0xF0410201  ORR	R2, R1, #1
0x0B82	0xB2D2    UXTB	R2, R2
; Key_Status_Now end address is: 4 (R1)
; Key_Status_Now start address is: 8 (R2)
; Key_Status_Now end address is: 8 (R2)
0x0B84	0xB2D1    UXTB	R1, R2
0x0B86	0xE7FF    B	L_KeyScan0
L__KeyScan27:
L_KeyScan0:
;HW_V1_Config.c, 150 :: 		if((~GPIOD_IDR) & 0x0800) Key_Status_Now |= 0x02; //KEY_MENU_ON
; Key_Status_Now start address is: 4 (R1)
0x0B88	0x485A    LDR	R0, [PC, #360]
0x0B8A	0x6800    LDR	R0, [R0, #0]
0x0B8C	0x43C0    MVN	R0, R0
0x0B8E	0xF4006000  AND	R0, R0, #2048
0x0B92	0xB120    CBZ	R0, L__KeyScan28
0x0B94	0xF0410202  ORR	R2, R1, #2
0x0B98	0xB2D2    UXTB	R2, R2
; Key_Status_Now end address is: 4 (R1)
; Key_Status_Now start address is: 8 (R2)
; Key_Status_Now end address is: 8 (R2)
0x0B9A	0xB2D1    UXTB	R1, R2
0x0B9C	0xE7FF    B	L_KeyScan1
L__KeyScan28:
L_KeyScan1:
;HW_V1_Config.c, 151 :: 		if((~GPIOA_IDR) & 0x0040) Key_Status_Now |= 0x04; //KEY_UP_ON
; Key_Status_Now start address is: 4 (R1)
0x0B9E	0x4854    LDR	R0, [PC, #336]
0x0BA0	0x6800    LDR	R0, [R0, #0]
0x0BA2	0x43C0    MVN	R0, R0
0x0BA4	0xF0000040  AND	R0, R0, #64
0x0BA8	0xB120    CBZ	R0, L__KeyScan29
0x0BAA	0xF0410204  ORR	R2, R1, #4
0x0BAE	0xB2D2    UXTB	R2, R2
; Key_Status_Now end address is: 4 (R1)
; Key_Status_Now start address is: 8 (R2)
; Key_Status_Now end address is: 8 (R2)
0x0BB0	0xB2D1    UXTB	R1, R2
0x0BB2	0xE7FF    B	L_KeyScan2
L__KeyScan29:
L_KeyScan2:
;HW_V1_Config.c, 152 :: 		if((~GPIOD_IDR) & 0x0200) Key_Status_Now |= 0x08; //KEY_DOWN_ON
; Key_Status_Now start address is: 4 (R1)
0x0BB4	0x484F    LDR	R0, [PC, #316]
0x0BB6	0x6800    LDR	R0, [R0, #0]
0x0BB8	0x43C0    MVN	R0, R0
0x0BBA	0xF4007000  AND	R0, R0, #512
0x0BBE	0xB118    CBZ	R0, L__KeyScan30
0x0BC0	0xF0410208  ORR	R2, R1, #8
0x0BC4	0xB2D2    UXTB	R2, R2
; Key_Status_Now end address is: 4 (R1)
; Key_Status_Now start address is: 8 (R2)
; Key_Status_Now end address is: 8 (R2)
0x0BC6	0xE000    B	L_KeyScan3
L__KeyScan30:
0x0BC8	0xB2CA    UXTB	R2, R1
L_KeyScan3:
;HW_V1_Config.c, 153 :: 		if((~GPIOA_IDR) & 0x0020) Key_Status_Now |= 0x10; //KEY_LEFT_ON
; Key_Status_Now start address is: 8 (R2)
0x0BCA	0x4849    LDR	R0, [PC, #292]
0x0BCC	0x6800    LDR	R0, [R0, #0]
0x0BCE	0x43C0    MVN	R0, R0
0x0BD0	0xF0000020  AND	R0, R0, #32
0x0BD4	0xB120    CBZ	R0, L__KeyScan31
0x0BD6	0xF0420110  ORR	R1, R2, #16
0x0BDA	0xB2C9    UXTB	R1, R1
; Key_Status_Now end address is: 8 (R2)
; Key_Status_Now start address is: 4 (R1)
; Key_Status_Now end address is: 4 (R1)
0x0BDC	0xB2CA    UXTB	R2, R1
0x0BDE	0xE7FF    B	L_KeyScan4
L__KeyScan31:
L_KeyScan4:
;HW_V1_Config.c, 154 :: 		if((~GPIOA_IDR) & 0x0080) Key_Status_Now |= 0x20; //KEY_RIGHT_ON
; Key_Status_Now start address is: 8 (R2)
0x0BE0	0x4843    LDR	R0, [PC, #268]
0x0BE2	0x6800    LDR	R0, [R0, #0]
0x0BE4	0x43C0    MVN	R0, R0
0x0BE6	0xF0000080  AND	R0, R0, #128
0x0BEA	0xB120    CBZ	R0, L__KeyScan32
0x0BEC	0xF0420020  ORR	R0, R2, #32
; Key_Status_Now end address is: 8 (R2)
; Key_Status_Now start address is: 4 (R1)
0x0BF0	0xB2C1    UXTB	R1, R0
; Key_Status_Now end address is: 4 (R1)
0x0BF2	0xB2CA    UXTB	R2, R1
0x0BF4	0xE7FF    B	L_KeyScan5
L__KeyScan32:
L_KeyScan5:
;HW_V1_Config.c, 156 :: 		if(Key_Status_Now &(~Key_Status_Last)){
; Key_Status_Now start address is: 8 (R2)
0x0BF6	0x4840    LDR	R0, [PC, #256]
0x0BF8	0x7800    LDRB	R0, [R0, #0]
0x0BFA	0x43C0    MVN	R0, R0
0x0BFC	0xB2C0    UXTB	R0, R0
0x0BFE	0xEA020000  AND	R0, R2, R0, LSL #0
0x0C02	0xB2C0    UXTB	R0, R0
0x0C04	0x2800    CMP	R0, #0
0x0C06	0xD02D    BEQ	L_KeyScan6
;HW_V1_Config.c, 158 :: 		Key_Wait_Counter=25;        //Push on <500mS, No auto repeat
0x0C08	0x2119    MOVS	R1, #25
0x0C0A	0x483C    LDR	R0, [PC, #240]
0x0C0C	0x7001    STRB	R1, [R0, #0]
;HW_V1_Config.c, 160 :: 		if(Key_Status_Now & 0x01)  KeyCode=KEYCODE_PLAY; // KeyCode(Play)
0x0C0E	0xF0020001  AND	R0, R2, #1
0x0C12	0xB2C0    UXTB	R0, R0
0x0C14	0xB110    CBZ	R0, L_KeyScan7
0x0C16	0x2001    MOVS	R0, #1
0x0C18	0xF88D0004  STRB	R0, [SP, #4]
L_KeyScan7:
;HW_V1_Config.c, 161 :: 		if(Key_Status_Now & 0x02)  KeyCode=KEYCODE_MANU; // KeyCode(Manu)
0x0C1C	0xF0020002  AND	R0, R2, #2
0x0C20	0xB2C0    UXTB	R0, R0
0x0C22	0xB110    CBZ	R0, L_KeyScan8
0x0C24	0x2002    MOVS	R0, #2
0x0C26	0xF88D0004  STRB	R0, [SP, #4]
L_KeyScan8:
;HW_V1_Config.c, 162 :: 		if(Key_Status_Now & 0x04)  KeyCode=KEYCODE_UP;   // KeyCode(Up)
0x0C2A	0xF0020004  AND	R0, R2, #4
0x0C2E	0xB2C0    UXTB	R0, R0
0x0C30	0xB110    CBZ	R0, L_KeyScan9
0x0C32	0x2003    MOVS	R0, #3
0x0C34	0xF88D0004  STRB	R0, [SP, #4]
L_KeyScan9:
;HW_V1_Config.c, 163 :: 		if(Key_Status_Now & 0x08)  KeyCode=KEYCODE_DOWN; // KeyCode(Down)
0x0C38	0xF0020008  AND	R0, R2, #8
0x0C3C	0xB2C0    UXTB	R0, R0
0x0C3E	0xB110    CBZ	R0, L_KeyScan10
0x0C40	0x2004    MOVS	R0, #4
0x0C42	0xF88D0004  STRB	R0, [SP, #4]
L_KeyScan10:
;HW_V1_Config.c, 164 :: 		if(Key_Status_Now & 0x10)  KeyCode=KEYCODE_LEFT; // KeyCode(Left)
0x0C46	0xF0020010  AND	R0, R2, #16
0x0C4A	0xB2C0    UXTB	R0, R0
0x0C4C	0xB110    CBZ	R0, L_KeyScan11
0x0C4E	0x2005    MOVS	R0, #5
0x0C50	0xF88D0004  STRB	R0, [SP, #4]
L_KeyScan11:
;HW_V1_Config.c, 165 :: 		if(Key_Status_Now & 0x20)  KeyCode=KEYCODE_RIGHT;// KeyCode(Right)
0x0C54	0xF0020020  AND	R0, R2, #32
0x0C58	0xB2C0    UXTB	R0, R0
0x0C5A	0xB110    CBZ	R0, L_KeyScan12
0x0C5C	0x2006    MOVS	R0, #6
0x0C5E	0xF88D0004  STRB	R0, [SP, #4]
L_KeyScan12:
;HW_V1_Config.c, 167 :: 		} else {
0x0C62	0xE03F    B	L_KeyScan13
L_KeyScan6:
;HW_V1_Config.c, 169 :: 		if(Key_Status_Now & Key_Status_Last){
0x0C64	0x4824    LDR	R0, [PC, #144]
0x0C66	0x7800    LDRB	R0, [R0, #0]
0x0C68	0xEA020000  AND	R0, R2, R0, LSL #0
0x0C6C	0xB2C0    UXTB	R0, R0
0x0C6E	0x2800    CMP	R0, #0
0x0C70	0xD035    BEQ	L_KeyScan14
;HW_V1_Config.c, 170 :: 		if((Key_Wait_Counter | Key_Repeat_Counter)==0){
0x0C72	0x4823    LDR	R0, [PC, #140]
0x0C74	0x7801    LDRB	R1, [R0, #0]
0x0C76	0x4821    LDR	R0, [PC, #132]
0x0C78	0x7800    LDRB	R0, [R0, #0]
0x0C7A	0x4308    ORRS	R0, R1
0x0C7C	0xB2C0    UXTB	R0, R0
0x0C7E	0x2800    CMP	R0, #0
0x0C80	0xD12C    BNE	L_KeyScan15
;HW_V1_Config.c, 172 :: 		if(Key_Status_Now & 0x01)  KeyCode=KEYCODE_PLAY; // KeyCode(Play)
0x0C82	0xF0020001  AND	R0, R2, #1
0x0C86	0xB2C0    UXTB	R0, R0
0x0C88	0xB110    CBZ	R0, L_KeyScan16
0x0C8A	0x2001    MOVS	R0, #1
0x0C8C	0xF88D0004  STRB	R0, [SP, #4]
L_KeyScan16:
;HW_V1_Config.c, 173 :: 		if(Key_Status_Now & 0x02)  KeyCode=KEYCODE_MANU; // KeyCode(Manu)
0x0C90	0xF0020002  AND	R0, R2, #2
0x0C94	0xB2C0    UXTB	R0, R0
0x0C96	0xB110    CBZ	R0, L_KeyScan17
0x0C98	0x2002    MOVS	R0, #2
0x0C9A	0xF88D0004  STRB	R0, [SP, #4]
L_KeyScan17:
;HW_V1_Config.c, 174 :: 		if(Key_Status_Now & 0x04)  KeyCode=KEYCODE_UP;   // KeyCode(Up)
0x0C9E	0xF0020004  AND	R0, R2, #4
0x0CA2	0xB2C0    UXTB	R0, R0
0x0CA4	0xB110    CBZ	R0, L_KeyScan18
0x0CA6	0x2003    MOVS	R0, #3
0x0CA8	0xF88D0004  STRB	R0, [SP, #4]
L_KeyScan18:
;HW_V1_Config.c, 175 :: 		if(Key_Status_Now & 0x08)  KeyCode=KEYCODE_DOWN; // KeyCode(Down)
0x0CAC	0xF0020008  AND	R0, R2, #8
0x0CB0	0xB2C0    UXTB	R0, R0
0x0CB2	0xB110    CBZ	R0, L_KeyScan19
0x0CB4	0x2004    MOVS	R0, #4
0x0CB6	0xF88D0004  STRB	R0, [SP, #4]
L_KeyScan19:
;HW_V1_Config.c, 176 :: 		if(Key_Status_Now & 0x10)  KeyCode=KEYCODE_LEFT; // KeyCode(Left)
0x0CBA	0xF0020010  AND	R0, R2, #16
0x0CBE	0xB2C0    UXTB	R0, R0
0x0CC0	0xB110    CBZ	R0, L_KeyScan20
0x0CC2	0x2005    MOVS	R0, #5
0x0CC4	0xF88D0004  STRB	R0, [SP, #4]
L_KeyScan20:
;HW_V1_Config.c, 177 :: 		if(Key_Status_Now & 0x20)  KeyCode=KEYCODE_RIGHT;// KeyCode(Right)
0x0CC8	0xF0020020  AND	R0, R2, #32
0x0CCC	0xB2C0    UXTB	R0, R0
0x0CCE	0xB110    CBZ	R0, L_KeyScan21
0x0CD0	0x2006    MOVS	R0, #6
0x0CD2	0xF88D0004  STRB	R0, [SP, #4]
L_KeyScan21:
;HW_V1_Config.c, 179 :: 		Key_Repeat_Counter = 3; //Auto repeat each 60mS
0x0CD6	0x2103    MOVS	R1, #3
0x0CD8	0x4809    LDR	R0, [PC, #36]
0x0CDA	0x7001    STRB	R1, [R0, #0]
;HW_V1_Config.c, 180 :: 		}
L_KeyScan15:
;HW_V1_Config.c, 181 :: 		}else Key_Wait_Counter=25;
0x0CDC	0xE002    B	L_KeyScan22
L_KeyScan14:
0x0CDE	0x2119    MOVS	R1, #25
0x0CE0	0x4806    LDR	R0, [PC, #24]
0x0CE2	0x7001    STRB	R1, [R0, #0]
L_KeyScan22:
;HW_V1_Config.c, 182 :: 		}
L_KeyScan13:
;HW_V1_Config.c, 183 :: 		Key_Status_Last = Key_Status_Now;
0x0CE4	0x4804    LDR	R0, [PC, #16]
0x0CE6	0x7002    STRB	R2, [R0, #0]
; Key_Status_Now end address is: 8 (R2)
;HW_V1_Config.c, 184 :: 		return KeyCode;
0x0CE8	0xF89D0004  LDRB	R0, [SP, #4]
;HW_V1_Config.c, 185 :: 		}
L_end_KeyScan:
0x0CEC	0xB002    ADD	SP, SP, #8
0x0CEE	0x4770    BX	LR
0x0CF0	0x08084001  	GPIOA_IDR+0
0x0CF4	0x14084001  	GPIOD_IDR+0
0x0CF8	0x00002000  	_Key_Status_Last+0
0x0CFC	0x001A2000  	_Key_Wait_Counter+0
0x0D00	0x001B2000  	_Key_Repeat_Counter+0
; end of _KeyScan
_String2Send:
;main.c, 43 :: 		void String2Send(void)
0x0AF8	0xB081    SUB	SP, SP, #4
;main.c, 48 :: 		for (x=0; x<MAX_KEY_IN_CHARS; x++){
; x start address is: 12 (R3)
0x0AFA	0x2300    MOVS	R3, #0
0x0AFC	0xB25B    SXTB	R3, R3
; x end address is: 12 (R3)
L_String2Send0:
; x start address is: 12 (R3)
0x0AFE	0x2B08    CMP	R3, #8
0x0B00	0xDA23    BGE	L_String2Send1
;main.c, 49 :: 		cByte = val_tab[in_value[x]];
0x0B02	0x4815    LDR	R0, [PC, #84]
0x0B04	0x18C0    ADDS	R0, R0, R3
0x0B06	0x7801    LDRB	R1, [R0, #0]
0x0B08	0x4814    LDR	R0, [PC, #80]
0x0B0A	0x1840    ADDS	R0, R0, R1
0x0B0C	0x7800    LDRB	R0, [R0, #0]
; cByte start address is: 8 (R2)
0x0B0E	0xB2C2    UXTB	R2, R0
;main.c, 50 :: 		if (cByte != ' '){
0x0B10	0x2820    CMP	R0, #32
0x0B12	0xD016    BEQ	L__String2Send68
; cByte end address is: 8 (R2)
; x end address is: 12 (R3)
;main.c, 51 :: 		while (!TXE_USART1_SR_bit);                 // sit here and wait until tx is ready
L_String2Send4:
; cByte start address is: 8 (R2)
; x start address is: 12 (R3)
0x0B14	0x4912    LDR	R1, [PC, #72]
0x0B16	0x6808    LDR	R0, [R1, #0]
0x0B18	0xB900    CBNZ	R0, L_String2Send5
0x0B1A	0xE7FB    B	L_String2Send4
L_String2Send5:
;main.c, 52 :: 		USART1_DR = (unsigned int) cByte & 0x00ff;
0x0B1C	0xB2D0    UXTB	R0, R2
; cByte end address is: 8 (R2)
0x0B1E	0xF00001FF  AND	R1, R0, #255
0x0B22	0xB289    UXTH	R1, R1
0x0B24	0x480F    LDR	R0, [PC, #60]
0x0B26	0x6001    STR	R1, [R0, #0]
;main.c, 53 :: 		Delay_ms(1);
0x0B28	0xF64267DF  MOVW	R7, #11999
0x0B2C	0xF2C00700  MOVT	R7, #0
L_String2Send6:
0x0B30	0x1E7F    SUBS	R7, R7, #1
0x0B32	0xD1FD    BNE	L_String2Send6
0x0B34	0xBF00    NOP
0x0B36	0xBF00    NOP
0x0B38	0xBF00    NOP
0x0B3A	0xBF00    NOP
0x0B3C	0xBF00    NOP
; x end address is: 12 (R3)
0x0B3E	0xB259    SXTB	R1, R3
;main.c, 54 :: 		}
0x0B40	0xE000    B	L_String2Send3
L__String2Send68:
;main.c, 50 :: 		if (cByte != ' '){
0x0B42	0xB259    SXTB	R1, R3
;main.c, 54 :: 		}
L_String2Send3:
;main.c, 48 :: 		for (x=0; x<MAX_KEY_IN_CHARS; x++){
; x start address is: 4 (R1)
0x0B44	0x1C48    ADDS	R0, R1, #1
; x end address is: 4 (R1)
; x start address is: 12 (R3)
0x0B46	0xB243    SXTB	R3, R0
;main.c, 55 :: 		}
; x end address is: 12 (R3)
0x0B48	0xE7D9    B	L_String2Send0
L_String2Send1:
;main.c, 57 :: 		USART1_DR = (unsigned int) cByte & 0x00ff;
0x0B4A	0xF240010D  MOVW	R1, #13
0x0B4E	0x4805    LDR	R0, [PC, #20]
0x0B50	0x6001    STR	R1, [R0, #0]
;main.c, 58 :: 		}
L_end_String2Send:
0x0B52	0xB001    ADD	SP, SP, #4
0x0B54	0x4770    BX	LR
0x0B56	0xBF00    NOP
0x0B58	0x00122000  	_in_value+0
0x0B5C	0x00062000  	_val_tab+0
0x0B60	0x001C4227  	TXE_USART1_SR_bit+0
0x0B64	0x38044001  	USART1_DR+0
; end of _String2Send
___CC2DW:
;__Lib_System_101_102_103.c, 21 :: 		
0x126C	0xB081    SUB	SP, SP, #4
;__Lib_System_101_102_103.c, 23 :: 		
L_loopDW:
;__Lib_System_101_102_103.c, 24 :: 		
0x126E	0xF81C9B01  LDRB	R9, [R12], #1
;__Lib_System_101_102_103.c, 25 :: 		
0x1272	0xF80B9B01  STRB	R9, [R11], #1
;__Lib_System_101_102_103.c, 26 :: 		
0x1276	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_101_102_103.c, 27 :: 		
0x127A	0xD1F8    BNE	L_loopDW
;__Lib_System_101_102_103.c, 29 :: 		
L_end___CC2DW:
0x127C	0xB001    ADD	SP, SP, #4
0x127E	0x4770    BX	LR
; end of ___CC2DW
___FillZeros:
;__Lib_System_101_102_103.c, 63 :: 		
0x1258	0xB081    SUB	SP, SP, #4
;__Lib_System_101_102_103.c, 65 :: 		
0x125A	0xF04F0900  MOV	R9, #0
;__Lib_System_101_102_103.c, 66 :: 		
L_loopFZs:
;__Lib_System_101_102_103.c, 67 :: 		
0x125E	0xF84B9B04  STR	R9, [R11], #4
;__Lib_System_101_102_103.c, 68 :: 		
0x1262	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_101_102_103.c, 69 :: 		
0x1266	0xD1FA    BNE	L_loopFZs
;__Lib_System_101_102_103.c, 72 :: 		
L_end___FillZeros:
0x1268	0xB001    ADD	SP, SP, #4
0x126A	0x4770    BX	LR
; end of ___FillZeros
__Lib_System_101_102_103_InitialSetUpRCCRCC2:
;__Lib_System_101_102_103.c, 285 :: 		
0x19A0	0xB081    SUB	SP, SP, #4
;__Lib_System_101_102_103.c, 288 :: 		
; ulRCC_CR start address is: 8 (R2)
0x19A2	0x4A31    LDR	R2, [PC, #196]
;__Lib_System_101_102_103.c, 289 :: 		
; ulRCC_CFGR start address is: 12 (R3)
0x19A4	0x4B31    LDR	R3, [PC, #196]
;__Lib_System_101_102_103.c, 290 :: 		
; Fosc_kHz start address is: 4 (R1)
0x19A6	0x4932    LDR	R1, [PC, #200]
;__Lib_System_101_102_103.c, 297 :: 		
0x19A8	0xF64B3080  MOVW	R0, #48000
0x19AC	0x4281    CMP	R1, R0
0x19AE	0xD906    BLS	L___Lib_System_101_102_103_InitialSetUpRCCRCC229
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_101_102_103.c, 298 :: 		
0x19B0	0x4830    LDR	R0, [PC, #192]
0x19B2	0x6800    LDR	R0, [R0, #0]
0x19B4	0xF0400102  ORR	R1, R0, #2
0x19B8	0x482E    LDR	R0, [PC, #184]
0x19BA	0x6001    STR	R1, [R0, #0]
0x19BC	0xE011    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC230
L___Lib_System_101_102_103_InitialSetUpRCCRCC229:
;__Lib_System_101_102_103.c, 299 :: 		
; Fosc_kHz start address is: 4 (R1)
0x19BE	0xF64550C0  MOVW	R0, #24000
0x19C2	0x4281    CMP	R1, R0
0x19C4	0xD906    BLS	L___Lib_System_101_102_103_InitialSetUpRCCRCC231
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_101_102_103.c, 300 :: 		
0x19C6	0x482B    LDR	R0, [PC, #172]
0x19C8	0x6800    LDR	R0, [R0, #0]
0x19CA	0xF0400101  ORR	R1, R0, #1
0x19CE	0x4829    LDR	R0, [PC, #164]
0x19D0	0x6001    STR	R1, [R0, #0]
0x19D2	0xE006    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC232
L___Lib_System_101_102_103_InitialSetUpRCCRCC231:
;__Lib_System_101_102_103.c, 302 :: 		
0x19D4	0x4827    LDR	R0, [PC, #156]
0x19D6	0x6801    LDR	R1, [R0, #0]
0x19D8	0xF06F0007  MVN	R0, #7
0x19DC	0x4001    ANDS	R1, R0
0x19DE	0x4825    LDR	R0, [PC, #148]
0x19E0	0x6001    STR	R1, [R0, #0]
L___Lib_System_101_102_103_InitialSetUpRCCRCC232:
L___Lib_System_101_102_103_InitialSetUpRCCRCC230:
;__Lib_System_101_102_103.c, 304 :: 		
0x19E2	0x4825    LDR	R0, [PC, #148]
0x19E4	0x6003    STR	R3, [R0, #0]
;__Lib_System_101_102_103.c, 305 :: 		
0x19E6	0x4825    LDR	R0, [PC, #148]
0x19E8	0xEA020100  AND	R1, R2, R0, LSL #0
0x19EC	0x4824    LDR	R0, [PC, #144]
0x19EE	0x6001    STR	R1, [R0, #0]
;__Lib_System_101_102_103.c, 307 :: 		
0x19F0	0xF0020001  AND	R0, R2, #1
0x19F4	0xB140    CBZ	R0, L___Lib_System_101_102_103_InitialSetUpRCCRCC244
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x19F6	0x4619    MOV	R1, R3
;__Lib_System_101_102_103.c, 308 :: 		
L___Lib_System_101_102_103_InitialSetUpRCCRCC234:
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x19F8	0x4821    LDR	R0, [PC, #132]
0x19FA	0x6800    LDR	R0, [R0, #0]
0x19FC	0xF0000002  AND	R0, R0, #2
0x1A00	0x2800    CMP	R0, #0
0x1A02	0xD100    BNE	L___Lib_System_101_102_103_InitialSetUpRCCRCC235
;__Lib_System_101_102_103.c, 309 :: 		
0x1A04	0xE7F8    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC234
L___Lib_System_101_102_103_InitialSetUpRCCRCC235:
;__Lib_System_101_102_103.c, 310 :: 		
; ulRCC_CFGR end address is: 4 (R1)
0x1A06	0xE000    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC233
; ulRCC_CR end address is: 8 (R2)
L___Lib_System_101_102_103_InitialSetUpRCCRCC244:
;__Lib_System_101_102_103.c, 307 :: 		
0x1A08	0x4619    MOV	R1, R3
;__Lib_System_101_102_103.c, 310 :: 		
L___Lib_System_101_102_103_InitialSetUpRCCRCC233:
;__Lib_System_101_102_103.c, 312 :: 		
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x1A0A	0xF4023080  AND	R0, R2, #65536
0x1A0E	0xB148    CBZ	R0, L___Lib_System_101_102_103_InitialSetUpRCCRCC245
; ulRCC_CR end address is: 8 (R2)
; ulRCC_CFGR end address is: 4 (R1)
;__Lib_System_101_102_103.c, 313 :: 		
L___Lib_System_101_102_103_InitialSetUpRCCRCC237:
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 4 (R1)
0x1A10	0x481B    LDR	R0, [PC, #108]
0x1A12	0x6800    LDR	R0, [R0, #0]
0x1A14	0xF4003000  AND	R0, R0, #131072
0x1A18	0xB900    CBNZ	R0, L___Lib_System_101_102_103_InitialSetUpRCCRCC238
;__Lib_System_101_102_103.c, 314 :: 		
0x1A1A	0xE7F9    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC237
L___Lib_System_101_102_103_InitialSetUpRCCRCC238:
;__Lib_System_101_102_103.c, 315 :: 		
0x1A1C	0x9200    STR	R2, [SP, #0]
; ulRCC_CFGR end address is: 4 (R1)
0x1A1E	0x460A    MOV	R2, R1
0x1A20	0x9900    LDR	R1, [SP, #0]
0x1A22	0xE002    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC236
; ulRCC_CR end address is: 8 (R2)
L___Lib_System_101_102_103_InitialSetUpRCCRCC245:
;__Lib_System_101_102_103.c, 312 :: 		
0x1A24	0x9100    STR	R1, [SP, #0]
0x1A26	0x4611    MOV	R1, R2
0x1A28	0x9A00    LDR	R2, [SP, #0]
;__Lib_System_101_102_103.c, 315 :: 		
L___Lib_System_101_102_103_InitialSetUpRCCRCC236:
;__Lib_System_101_102_103.c, 317 :: 		
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x1A2A	0xF0017080  AND	R0, R1, #16777216
; ulRCC_CR end address is: 4 (R1)
0x1A2E	0xB170    CBZ	R0, L___Lib_System_101_102_103_InitialSetUpRCCRCC246
;__Lib_System_101_102_103.c, 318 :: 		
0x1A30	0x4813    LDR	R0, [PC, #76]
0x1A32	0x6800    LDR	R0, [R0, #0]
0x1A34	0xF0407180  ORR	R1, R0, #16777216
0x1A38	0x4811    LDR	R0, [PC, #68]
0x1A3A	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 8 (R2)
0x1A3C	0x4611    MOV	R1, R2
;__Lib_System_101_102_103.c, 319 :: 		
L___Lib_System_101_102_103_InitialSetUpRCCRCC240:
; ulRCC_CFGR start address is: 4 (R1)
0x1A3E	0x4810    LDR	R0, [PC, #64]
0x1A40	0x6800    LDR	R0, [R0, #0]
0x1A42	0xF0007000  AND	R0, R0, #33554432
0x1A46	0xB900    CBNZ	R0, L___Lib_System_101_102_103_InitialSetUpRCCRCC241
;__Lib_System_101_102_103.c, 320 :: 		
0x1A48	0xE7F9    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC240
L___Lib_System_101_102_103_InitialSetUpRCCRCC241:
;__Lib_System_101_102_103.c, 321 :: 		
0x1A4A	0x460A    MOV	R2, R1
0x1A4C	0xE7FF    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC239
; ulRCC_CFGR end address is: 4 (R1)
L___Lib_System_101_102_103_InitialSetUpRCCRCC246:
;__Lib_System_101_102_103.c, 317 :: 		
;__Lib_System_101_102_103.c, 321 :: 		
L___Lib_System_101_102_103_InitialSetUpRCCRCC239:
;__Lib_System_101_102_103.c, 324 :: 		
; ulRCC_CFGR start address is: 8 (R2)
; ulRCC_CFGR end address is: 8 (R2)
L___Lib_System_101_102_103_InitialSetUpRCCRCC242:
; ulRCC_CFGR start address is: 8 (R2)
0x1A4E	0x480A    LDR	R0, [PC, #40]
0x1A50	0x6800    LDR	R0, [R0, #0]
0x1A52	0xF000010C  AND	R1, R0, #12
0x1A56	0x0090    LSLS	R0, R2, #2
0x1A58	0xF000000C  AND	R0, R0, #12
0x1A5C	0x4281    CMP	R1, R0
0x1A5E	0xD000    BEQ	L___Lib_System_101_102_103_InitialSetUpRCCRCC243
;__Lib_System_101_102_103.c, 325 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x1A60	0xE7F5    B	L___Lib_System_101_102_103_InitialSetUpRCCRCC242
L___Lib_System_101_102_103_InitialSetUpRCCRCC243:
;__Lib_System_101_102_103.c, 327 :: 		
L_end_InitialSetUpRCCRCC2:
0x1A62	0xB001    ADD	SP, SP, #4
0x1A64	0x4770    BX	LR
0x1A66	0xBF00    NOP
0x1A68	0x00810101  	#16842881
0x1A6C	0x2502001D  	#1910018
0x1A70	0x19400001  	#72000
0x1A74	0x20004002  	FLASH_ACR+0
0x1A78	0x10044002  	RCC_CFGR+0
0x1A7C	0xFFFF000F  	#1048575
0x1A80	0x10004002  	RCC_CR+0
; end of __Lib_System_101_102_103_InitialSetUpRCCRCC2
__Lib_System_101_102_103_InitialSetUpFosc:
;__Lib_System_101_102_103.c, 329 :: 		
0x1A84	0xB081    SUB	SP, SP, #4
0x1A86	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_System_101_102_103.c, 330 :: 		
0x1A8A	0x4803    LDR	R0, [PC, #12]
0x1A8C	0xF7FFFBDC  BL	_Set_Fosc_kHz+0
;__Lib_System_101_102_103.c, 331 :: 		
L_end_InitialSetUpFosc:
0x1A90	0xF8DDE000  LDR	LR, [SP, #0]
0x1A94	0xB001    ADD	SP, SP, #4
0x1A96	0x4770    BX	LR
0x1A98	0x19400001  	#72000
; end of __Lib_System_101_102_103_InitialSetUpFosc
_Set_Fosc_kHz:
;__Lib_Delays.c, 5 :: 		void Set_Fosc_kHz(unsigned long Fosc_kHz){
0x1248	0xB081    SUB	SP, SP, #4
;__Lib_Delays.c, 6 :: 		__System_CLOCK_IN_KHZ = Fosc_kHz;
0x124A	0x4902    LDR	R1, [PC, #8]
0x124C	0x6008    STR	R0, [R1, #0]
;__Lib_Delays.c, 7 :: 		}
L_end_Set_Fosc_kHz:
0x124E	0xB001    ADD	SP, SP, #4
0x1250	0x4770    BX	LR
0x1252	0xBF00    NOP
0x1254	0x00A42000  	___System_CLOCK_IN_KHZ+0
; end of _Set_Fosc_kHz
___GenExcept:
;__Lib_System_101_102_103.c, 249 :: 		
0x1848	0xB081    SUB	SP, SP, #4
;__Lib_System_101_102_103.c, 250 :: 		
L___GenExcept25:
0x184A	0xE7FE    B	L___GenExcept25
;__Lib_System_101_102_103.c, 251 :: 		
L_end___GenExcept:
0x184C	0xB001    ADD	SP, SP, #4
0x184E	0x4770    BX	LR
; end of ___GenExcept
0x2148	0xB500    PUSH	(R14)
0x214A	0xF2400B00  MOVW	R11, #0
0x214E	0xF2C20B00  MOVT	R11, #8192
0x2152	0xF2400A1A  MOVW	R10, #26
0x2156	0xF2C20A00  MOVT	R10, #8192
0x215A	0xF2420CF8  MOVW	R12, #8440
0x215E	0xF2C00C00  MOVT	R12, #0
0x2162	0xF7FFF883  BL	4716
0x2166	0xBD00    POP	(R15)
0x2168	0x4770    BX	LR
0x21C8	0xB500    PUSH	(R14)
0x21CA	0xF2400B00  MOVW	R11, #0
0x21CE	0xF2C20B00  MOVT	R11, #8192
0x21D2	0xF2400ABC  MOVW	R10, #188
0x21D6	0xF2C20A00  MOVT	R10, #8192
0x21DA	0xF7FFF83D  BL	4696
0x21DE	0xBD00    POP	(R15)
0x21E0	0x4770    BX	LR
_Usart1_ISR:
;main.c, 239 :: 		void Usart1_ISR() iv IVT_INT_USART1 ics ICS_AUTO
0x189C	0xB081    SUB	SP, SP, #4
;main.c, 241 :: 		if (TXE_USART1_SR_bit == 1 && TXEIE_USART1_CR1_bit == 1){     // make sure the high speed modem is ready to transmit
0x189E	0x4914    LDR	R1, [PC, #80]
0x18A0	0x6808    LDR	R0, [R1, #0]
0x18A2	0xB148    CBZ	R0, L__Usart1_ISR72
0x18A4	0x4913    LDR	R1, [PC, #76]
0x18A6	0x6808    LDR	R0, [R1, #0]
0x18A8	0xB130    CBZ	R0, L__Usart1_ISR71
L__Usart1_ISR70:
;main.c, 242 :: 		USART1_SR = 0;
0x18AA	0x2100    MOVS	R1, #0
0x18AC	0x4812    LDR	R0, [PC, #72]
0x18AE	0x6001    STR	R1, [R0, #0]
;main.c, 243 :: 		USART1_DR = 0;
0x18B0	0x2100    MOVS	R1, #0
0x18B2	0x4812    LDR	R0, [PC, #72]
0x18B4	0x6001    STR	R1, [R0, #0]
;main.c, 244 :: 		} else if (RXNE_USART1_SR_bit == 1 && RXNEIE_USART1_CR1_bit == 1){
0x18B6	0xE019    B	L_Usart1_ISR63
;main.c, 241 :: 		if (TXE_USART1_SR_bit == 1 && TXEIE_USART1_CR1_bit == 1){     // make sure the high speed modem is ready to transmit
L__Usart1_ISR72:
L__Usart1_ISR71:
;main.c, 244 :: 		} else if (RXNE_USART1_SR_bit == 1 && RXNEIE_USART1_CR1_bit == 1){
0x18B8	0x4911    LDR	R1, [PC, #68]
0x18BA	0x6808    LDR	R0, [R1, #0]
0x18BC	0xB1B0    CBZ	R0, L__Usart1_ISR74
0x18BE	0x4911    LDR	R1, [PC, #68]
0x18C0	0x6808    LDR	R0, [R1, #0]
0x18C2	0xB198    CBZ	R0, L__Usart1_ISR73
L__Usart1_ISR69:
;main.c, 245 :: 		in_buffer[in_ptr++] = (char)((unsigned int)(USART1_DR & (unsigned int)0x00ff));
0x18C4	0x4A10    LDR	R2, [PC, #64]
0x18C6	0x8811    LDRH	R1, [R2, #0]
0x18C8	0x4810    LDR	R0, [PC, #64]
0x18CA	0x1841    ADDS	R1, R0, R1
0x18CC	0x480B    LDR	R0, [PC, #44]
0x18CE	0x6800    LDR	R0, [R0, #0]
0x18D0	0xF00000FF  AND	R0, R0, #255
0x18D4	0xB2C0    UXTB	R0, R0
0x18D6	0x7008    STRB	R0, [R1, #0]
0x18D8	0x4610    MOV	R0, R2
0x18DA	0x8800    LDRH	R0, [R0, #0]
0x18DC	0x1C40    ADDS	R0, R0, #1
0x18DE	0xB280    UXTH	R0, R0
0x18E0	0x8010    STRH	R0, [R2, #0]
;main.c, 246 :: 		if (in_ptr>=MAX_IN_BUFFER) in_ptr = 0;
0x18E2	0x2880    CMP	R0, #128
0x18E4	0xD302    BCC	L_Usart1_ISR67
0x18E6	0x2100    MOVS	R1, #0
0x18E8	0x4807    LDR	R0, [PC, #28]
0x18EA	0x8001    STRH	R1, [R0, #0]
L_Usart1_ISR67:
;main.c, 244 :: 		} else if (RXNE_USART1_SR_bit == 1 && RXNEIE_USART1_CR1_bit == 1){
L__Usart1_ISR74:
L__Usart1_ISR73:
;main.c, 247 :: 		}
L_Usart1_ISR63:
;main.c, 248 :: 		}
L_end_Usart1_ISR:
0x18EC	0xB001    ADD	SP, SP, #4
0x18EE	0x4770    BX	LR
0x18F0	0x001C4227  	TXE_USART1_SR_bit+0
0x18F4	0x019C4227  	TXEIE_USART1_CR1_bit+0
0x18F8	0x38004001  	USART1_SR+0
0x18FC	0x38044001  	USART1_DR+0
0x1900	0x00144227  	RXNE_USART1_SR_bit+0
0x1904	0x01944227  	RXNEIE_USART1_CR1_bit+0
0x1908	0x009E2000  	main_in_ptr+0
0x190C	0x001C2000  	main_in_buffer+0
; end of _Usart1_ISR
_Timer2_interrupt:
;main.c, 225 :: 		void Timer2_interrupt() iv IVT_INT_TIM2
0x1850	0xB081    SUB	SP, SP, #4
;main.c, 229 :: 		TIM2_SR.UIF = 0;
0x1852	0x2100    MOVS	R1, #0
0x1854	0xB249    SXTB	R1, R1
0x1856	0x480D    LDR	R0, [PC, #52]
0x1858	0x6001    STR	R1, [R0, #0]
;main.c, 230 :: 		b1ms = 1;
0x185A	0x2101    MOVS	R1, #1
0x185C	0xB249    SXTB	R1, R1
0x185E	0x480C    LDR	R0, [PC, #48]
0x1860	0x6001    STR	R1, [R0, #0]
;main.c, 232 :: 		if (count20<20) count20++;
0x1862	0x480C    LDR	R0, [PC, #48]
0x1864	0xF9900000  LDRSB	R0, [R0, #0]
0x1868	0x2814    CMP	R0, #20
0x186A	0xDA05    BGE	L_Timer2_interrupt58
0x186C	0x4909    LDR	R1, [PC, #36]
0x186E	0xF9910000  LDRSB	R0, [R1, #0]
0x1872	0x1C40    ADDS	R0, R0, #1
0x1874	0x7008    STRB	R0, [R1, #0]
0x1876	0xE007    B	L_Timer2_interrupt59
L_Timer2_interrupt58:
;main.c, 234 :: 		count20 = 0;
0x1878	0x2100    MOVS	R1, #0
0x187A	0xB249    SXTB	R1, R1
0x187C	0x4805    LDR	R0, [PC, #20]
0x187E	0x7001    STRB	R1, [R0, #0]
;main.c, 235 :: 		b20ms = 1;
0x1880	0x2101    MOVS	R1, #1
0x1882	0xB249    SXTB	R1, R1
0x1884	0x4804    LDR	R0, [PC, #16]
0x1886	0x6001    STR	R1, [R0, #0]
;main.c, 236 :: 		}
L_Timer2_interrupt59:
;main.c, 237 :: 		}
L_end_Timer2_interrupt:
0x1888	0xB001    ADD	SP, SP, #4
0x188A	0x4770    BX	LR
0x188C	0x02004200  	TIM2_SR+0
0x1890	0x14082200  	_b1ms+0
0x1894	0x00B82000  	Timer2_interrupt_count20_L0+0
0x1898	0x14042200  	_b20ms+0
; end of _Timer2_interrupt
;Lcd.c,8 :: _Char_Dot [1520]
0x1A9C	0x00000000 ;_Char_Dot+0
0x1AA0	0x3C003E00 ;_Char_Dot+4
0x1AA4	0x3E000000 ;_Char_Dot+8
0x1AA8	0x00003C00 ;_Char_Dot+12
0x1AAC	0x04800480 ;_Char_Dot+16
0x1AB0	0x04803FF0 ;_Char_Dot+20
0x1AB4	0x3FF00480 ;_Char_Dot+24
0x1AB8	0x04800480 ;_Char_Dot+28
0x1ABC	0x00000000 ;_Char_Dot+32
0x1AC0	0xE0000000 ;_Char_Dot+36
0x1AC4	0x08001000 ;_Char_Dot+40
0x1AC8	0x08000800 ;_Char_Dot+44
0x1ACC	0x0C600C30 ;_Char_Dot+48
0x1AD0	0x018000C0 ;_Char_Dot+52
0x1AD4	0x06300300 ;_Char_Dot+56
0x1AD8	0x00000C30 ;_Char_Dot+60
0x1ADC	0x08000800 ;_Char_Dot+64
0x1AE0	0xE0001000 ;_Char_Dot+68
0x1AE4	0x00000000 ;_Char_Dot+72
0x1AE8	0x00000000 ;_Char_Dot+76
0x1AEC	0x00000000 ;_Char_Dot+80
0x1AF0	0x3E000000 ;_Char_Dot+84
0x1AF4	0x00003C00 ;_Char_Dot+88
0x1AF8	0x00000000 ;_Char_Dot+92
0x1AFC	0x00000000 ;_Char_Dot+96
0x1B00	0x1FE00FC0 ;_Char_Dot+100
0x1B04	0x20103030 ;_Char_Dot+104
0x1B08	0x00000000 ;_Char_Dot+108
0x1B0C	0x00000000 ;_Char_Dot+112
0x1B10	0x30302010 ;_Char_Dot+116
0x1B14	0x0FC01FE0 ;_Char_Dot+120
0x1B18	0x00000000 ;_Char_Dot+124
0x1B1C	0x12400000 ;_Char_Dot+128
0x1B20	0x07000A80 ;_Char_Dot+132
0x1B24	0x07003FE0 ;_Char_Dot+136
0x1B28	0x12400A80 ;_Char_Dot+140
0x1B2C	0x01000000 ;_Char_Dot+144
0x1B30	0x07C00100 ;_Char_Dot+148
0x1B34	0x010007C0 ;_Char_Dot+152
0x1B38	0x00000100 ;_Char_Dot+156
0x1B3C	0x00000000 ;_Char_Dot+160
0x1B40	0x00340000 ;_Char_Dot+164
0x1B44	0x00000038 ;_Char_Dot+168
0x1B48	0x00000000 ;_Char_Dot+172
0x1B4C	0x01000000 ;_Char_Dot+176
0x1B50	0x01000100 ;_Char_Dot+180
0x1B54	0x01000100 ;_Char_Dot+184
0x1B58	0x00000100 ;_Char_Dot+188
0x1B5C	0x00000000 ;_Char_Dot+192
0x1B60	0x00300000 ;_Char_Dot+196
0x1B64	0x00000030 ;_Char_Dot+200
0x1B68	0x00000000 ;_Char_Dot+204
0x1B6C	0x00600030 ;_Char_Dot+208
0x1B70	0x018000C0 ;_Char_Dot+212
0x1B74	0x06000300 ;_Char_Dot+216
0x1B78	0x00000C00 ;_Char_Dot+220
0x1B7C	0x3FF01FE0 ;_Char_Dot+224
0x1B80	0x23102090 ;_Char_Dot+228
0x1B84	0x3FF02410 ;_Char_Dot+232
0x1B88	0x00001FE0 ;_Char_Dot+236
0x1B8C	0x08100000 ;_Char_Dot+240
0x1B90	0x3FF01810 ;_Char_Dot+244
0x1B94	0x00103FF0 ;_Char_Dot+248
0x1B98	0x00000010 ;_Char_Dot+252
0x1B9C	0x30F01070 ;_Char_Dot+256
0x1BA0	0x23102190 ;_Char_Dot+260
0x1BA4	0x38302610 ;_Char_Dot+264
0x1BA8	0x00001830 ;_Char_Dot+268
0x1BAC	0x30301020 ;_Char_Dot+272
0x1BB0	0x22102210 ;_Char_Dot+276
0x1BB4	0x3FF02210 ;_Char_Dot+280
0x1BB8	0x00001DE0 ;_Char_Dot+284
0x1BBC	0x07000300 ;_Char_Dot+288
0x1BC0	0x19100D00 ;_Char_Dot+292
0x1BC4	0x3FF03FF0 ;_Char_Dot+296
0x1BC8	0x00000110 ;_Char_Dot+300
0x1BCC	0x3E303E20 ;_Char_Dot+304
0x1BD0	0x22102210 ;_Char_Dot+308
0x1BD4	0x23F02310 ;_Char_Dot+312
0x1BD8	0x000021E0 ;_Char_Dot+316
0x1BDC	0x1FF00FE0 ;_Char_Dot+320
0x1BE0	0x22103210 ;_Char_Dot+324
0x1BE4	0x03F02210 ;_Char_Dot+328
0x1BE8	0x000001E0 ;_Char_Dot+332
0x1BEC	0x30003000 ;_Char_Dot+336
0x1BF0	0x21F020F0 ;_Char_Dot+340
0x1BF4	0x3E002300 ;_Char_Dot+344
0x1BF8	0x00003C00 ;_Char_Dot+348
0x1BFC	0x3FF01DE0 ;_Char_Dot+352
0x1C00	0x22102210 ;_Char_Dot+356
0x1C04	0x3FF02210 ;_Char_Dot+360
0x1C08	0x00001DE0 ;_Char_Dot+364
0x1C0C	0x3E101C00 ;_Char_Dot+368
0x1C10	0x22102210 ;_Char_Dot+372
0x1C14	0x3FE02230 ;_Char_Dot+376
0x1C18	0x00001FC0 ;_Char_Dot+380
0x1C1C	0x00000000 ;_Char_Dot+384
0x1C20	0x0C600000 ;_Char_Dot+388
0x1C24	0x00000C60 ;_Char_Dot+392
0x1C28	0x00000000 ;_Char_Dot+396
0x1C2C	0x00000000 ;_Char_Dot+400
0x1C30	0x03340000 ;_Char_Dot+404
0x1C34	0x00000338 ;_Char_Dot+408
0x1C38	0x00000000 ;_Char_Dot+412
0x1C3C	0x01000000 ;_Char_Dot+416
0x1C40	0x06C00380 ;_Char_Dot+420
0x1C44	0x18300C60 ;_Char_Dot+424
0x1C48	0x00001010 ;_Char_Dot+428
0x1C4C	0x02400240 ;_Char_Dot+432
0x1C50	0x02400240 ;_Char_Dot+436
0x1C54	0x02400240 ;_Char_Dot+440
0x1C58	0x00000240 ;_Char_Dot+444
0x1C5C	0x10100000 ;_Char_Dot+448
0x1C60	0x0C601830 ;_Char_Dot+452
0x1C64	0x038006C0 ;_Char_Dot+456
0x1C68	0x00000100 ;_Char_Dot+460
0x1C6C	0x38001800 ;_Char_Dot+464
0x1C70	0x23B02000 ;_Char_Dot+468
0x1C74	0x3C0027B0 ;_Char_Dot+472
0x1C78	0x00001800 ;_Char_Dot+476
0x1C7C	0x10200FC0 ;_Char_Dot+480
0x1C80	0x24902790 ;_Char_Dot+484
0x1C84	0x105027D0 ;_Char_Dot+488
0x1C88	0x00000F80 ;_Char_Dot+492
0x1C8C	0x0FF007F0 ;_Char_Dot+496
0x1C90	0x31001900 ;_Char_Dot+500
0x1C94	0x0FF01900 ;_Char_Dot+504
0x1C98	0x000007F0 ;_Char_Dot+508
0x1C9C	0x3FF02010 ;_Char_Dot+512
0x1CA0	0x22103FF0 ;_Char_Dot+516
0x1CA4	0x3FF02210 ;_Char_Dot+520
0x1CA8	0x00001DE0 ;_Char_Dot+524
0x1CAC	0x1FE00FC0 ;_Char_Dot+528
0x1CB0	0x20103030 ;_Char_Dot+532
0x1CB4	0x30302010 ;_Char_Dot+536
0x1CB8	0x00001860 ;_Char_Dot+540
0x1CBC	0x3FF02010 ;_Char_Dot+544
0x1CC0	0x20103FF0 ;_Char_Dot+548
0x1CC4	0x1FE03030 ;_Char_Dot+552
0x1CC8	0x00000FC0 ;_Char_Dot+556
0x1CCC	0x3FF02010 ;_Char_Dot+560
0x1CD0	0x22103FF0 ;_Char_Dot+564
0x1CD4	0x30302710 ;_Char_Dot+568
0x1CD8	0x00003870 ;_Char_Dot+572
0x1CDC	0x3FF02010 ;_Char_Dot+576
0x1CE0	0x22103FF0 ;_Char_Dot+580
0x1CE4	0x30002700 ;_Char_Dot+584
0x1CE8	0x00003800 ;_Char_Dot+588
0x1CEC	0x1FE00FC0 ;_Char_Dot+592
0x1CF0	0x21103030 ;_Char_Dot+596
0x1CF4	0x31E02110 ;_Char_Dot+600
0x1CF8	0x000019F0 ;_Char_Dot+604
0x1CFC	0x3FF03FF0 ;_Char_Dot+608
0x1D00	0x02000200 ;_Char_Dot+612
0x1D04	0x3FF00200 ;_Char_Dot+616
0x1D08	0x00003FF0 ;_Char_Dot+620
0x1D0C	0x00000000 ;_Char_Dot+624
0x1D10	0x3FF02010 ;_Char_Dot+628
0x1D14	0x20103FF0 ;_Char_Dot+632
0x1D18	0x00000000 ;_Char_Dot+636
0x1D1C	0x00F000E0 ;_Char_Dot+640
0x1D20	0x20100010 ;_Char_Dot+644
0x1D24	0x3FE03FF0 ;_Char_Dot+648
0x1D28	0x00002000 ;_Char_Dot+652
0x1D2C	0x3FF02010 ;_Char_Dot+656
0x1D30	0x03003FF0 ;_Char_Dot+660
0x1D34	0x3CF00F00 ;_Char_Dot+664
0x1D38	0x00003070 ;_Char_Dot+668
0x1D3C	0x3FF02010 ;_Char_Dot+672
0x1D40	0x20103FF0 ;_Char_Dot+676
0x1D44	0x00300010 ;_Char_Dot+680
0x1D48	0x00000030 ;_Char_Dot+684
0x1D4C	0x3FF03FF0 ;_Char_Dot+688
0x1D50	0x0E001C00 ;_Char_Dot+692
0x1D54	0x3FF01C00 ;_Char_Dot+696
0x1D58	0x00003FF0 ;_Char_Dot+700
0x1D5C	0x3FF03FF0 ;_Char_Dot+704
0x1D60	0x0E001C00 ;_Char_Dot+708
0x1D64	0x3FF00700 ;_Char_Dot+712
0x1D68	0x00003FF0 ;_Char_Dot+716
0x1D6C	0x1FE00FC0 ;_Char_Dot+720
0x1D70	0x20103030 ;_Char_Dot+724
0x1D74	0x1FE03030 ;_Char_Dot+728
0x1D78	0x00000FC0 ;_Char_Dot+732
0x1D7C	0x3FF02010 ;_Char_Dot+736
0x1D80	0x22103FF0 ;_Char_Dot+740
0x1D84	0x3E002200 ;_Char_Dot+744
0x1D88	0x00001C00 ;_Char_Dot+748
0x1D8C	0x3FF01FE0 ;_Char_Dot+752
0x1D90	0x20702010 ;_Char_Dot+756
0x1D94	0x3FF82030 ;_Char_Dot+760
0x1D98	0x00001FE8 ;_Char_Dot+764
0x1D9C	0x3FF02010 ;_Char_Dot+768
0x1DA0	0x22003FF0 ;_Char_Dot+772
0x1DA4	0x3FF02300 ;_Char_Dot+776
0x1DA8	0x00001CF0 ;_Char_Dot+780
0x1DAC	0x3C701860 ;_Char_Dot+784
0x1DB0	0x22102610 ;_Char_Dot+788
0x1DB4	0x39F02310 ;_Char_Dot+792
0x1DB8	0x000018E0 ;_Char_Dot+796
0x1DBC	0x38000000 ;_Char_Dot+800
0x1DC0	0x3FF03010 ;_Char_Dot+804
0x1DC4	0x30103FF0 ;_Char_Dot+808
0x1DC8	0x00003800 ;_Char_Dot+812
0x1DCC	0x3FF03FE0 ;_Char_Dot+816
0x1DD0	0x00100010 ;_Char_Dot+820
0x1DD4	0x3FF00010 ;_Char_Dot+824
0x1DD8	0x00003FE0 ;_Char_Dot+828
0x1DDC	0x3FC03F80 ;_Char_Dot+832
0x1DE0	0x00300060 ;_Char_Dot+836
0x1DE4	0x3FC00060 ;_Char_Dot+840
0x1DE8	0x00003F80 ;_Char_Dot+844
0x1DEC	0x3FF03FC0 ;_Char_Dot+848
0x1DF0	0x01C00070 ;_Char_Dot+852
0x1DF4	0x3FF00070 ;_Char_Dot+856
0x1DF8	0x00003FC0 ;_Char_Dot+860
0x1DFC	0x3CF03030 ;_Char_Dot+864
0x1E00	0x03000FC0 ;_Char_Dot+868
0x1E04	0x3CF00FC0 ;_Char_Dot+872
0x1E08	0x00003030 ;_Char_Dot+876
0x1E0C	0x3C000000 ;_Char_Dot+880
0x1E10	0x03F03E10 ;_Char_Dot+884
0x1E14	0x3E1003F0 ;_Char_Dot+888
0x1E18	0x00003C00 ;_Char_Dot+892
0x1E1C	0x30F03870 ;_Char_Dot+896
0x1E20	0x23102190 ;_Char_Dot+900
0x1E24	0x3C302610 ;_Char_Dot+904
0x1E28	0x00003870 ;_Char_Dot+908
0x1E2C	0x3FF83FF8 ;_Char_Dot+912
0x1E30	0x20082008 ;_Char_Dot+916
0x1E34	0x00002008 ;_Char_Dot+920
0x1E38	0x00000000 ;_Char_Dot+924
0x1E3C	0x38000000 ;_Char_Dot+928
0x1E40	0x07801E00 ;_Char_Dot+932
0x1E44	0x007801E0 ;_Char_Dot+936
0x1E48	0x0000001C ;_Char_Dot+940
0x1E4C	0x00000000 ;_Char_Dot+944
0x1E50	0x20080000 ;_Char_Dot+948
0x1E54	0x20082008 ;_Char_Dot+952
0x1E58	0x3FF83FF8 ;_Char_Dot+956
0x1E5C	0x0C000000 ;_Char_Dot+960
0x1E60	0x30001800 ;_Char_Dot+964
0x1E64	0x0C001800 ;_Char_Dot+968
0x1E68	0x00000000 ;_Char_Dot+972
0x1E6C	0x000C000C ;_Char_Dot+976
0x1E70	0x000C000C ;_Char_Dot+980
0x1E74	0x000C000C ;_Char_Dot+984
0x1E78	0x000C000C ;_Char_Dot+988
0x1E7C	0x00000000 ;_Char_Dot+992
0x1E80	0x38003000 ;_Char_Dot+996
0x1E84	0x00001800 ;_Char_Dot+1000
0x1E88	0x00000000 ;_Char_Dot+1004
0x1E8C	0x05F000E0 ;_Char_Dot+1008
0x1E90	0x05100510 ;_Char_Dot+1012
0x1E94	0x03F007E0 ;_Char_Dot+1016
0x1E98	0x00000010 ;_Char_Dot+1020
0x1E9C	0x3FF02010 ;_Char_Dot+1024
0x1EA0	0x02103FE0 ;_Char_Dot+1028
0x1EA4	0x03F00210 ;_Char_Dot+1032
0x1EA8	0x000001E0 ;_Char_Dot+1036
0x1EAC	0x07F003E0 ;_Char_Dot+1040
0x1EB0	0x04100410 ;_Char_Dot+1044
0x1EB4	0x06300410 ;_Char_Dot+1048
0x1EB8	0x00000220 ;_Char_Dot+1052
0x1EBC	0x03F001E0 ;_Char_Dot+1056
0x1EC0	0x24100610 ;_Char_Dot+1060
0x1EC4	0x3FF03FF0 ;_Char_Dot+1064
0x1EC8	0x00000010 ;_Char_Dot+1068
0x1ECC	0x07F003E0 ;_Char_Dot+1072
0x1ED0	0x05100510 ;_Char_Dot+1076
0x1ED4	0x07300510 ;_Char_Dot+1080
0x1ED8	0x00000320 ;_Char_Dot+1084
0x1EDC	0x02100000 ;_Char_Dot+1088
0x1EE0	0x3FF01FF0 ;_Char_Dot+1092
0x1EE4	0x30002210 ;_Char_Dot+1096
0x1EE8	0x00001800 ;_Char_Dot+1100
0x1EEC	0x07EC03C8 ;_Char_Dot+1104
0x1EF0	0x04240424 ;_Char_Dot+1108
0x1EF4	0x07F803FC ;_Char_Dot+1112
0x1EF8	0x00000400 ;_Char_Dot+1116
0x1EFC	0x3FF02010 ;_Char_Dot+1120
0x1F00	0x02203FF0 ;_Char_Dot+1124
0x1F04	0x07F00400 ;_Char_Dot+1128
0x1F08	0x000003F0 ;_Char_Dot+1132
0x1F0C	0x00000000 ;_Char_Dot+1136
0x1F10	0x37F00410 ;_Char_Dot+1140
0x1F14	0x001037F0 ;_Char_Dot+1144
0x1F18	0x00000000 ;_Char_Dot+1148
0x1F1C	0x00180000 ;_Char_Dot+1152
0x1F20	0x0404001C ;_Char_Dot+1156
0x1F24	0x37F837FC ;_Char_Dot+1160
0x1F28	0x00000400 ;_Char_Dot+1164
0x1F2C	0x3FF02010 ;_Char_Dot+1168
0x1F30	0x21803FF0 ;_Char_Dot+1172
0x1F34	0x067003C0 ;_Char_Dot+1176
0x1F38	0x00000430 ;_Char_Dot+1180
0x1F3C	0x00000000 ;_Char_Dot+1184
0x1F40	0x3FF02010 ;_Char_Dot+1188
0x1F44	0x00103FF0 ;_Char_Dot+1192
0x1F48	0x00000000 ;_Char_Dot+1196
0x1F4C	0x07F007F0 ;_Char_Dot+1200
0x1F50	0x03F00600 ;_Char_Dot+1204
0x1F54	0x07F00600 ;_Char_Dot+1208
0x1F58	0x000007F0 ;_Char_Dot+1212
0x1F5C	0x07F00400 ;_Char_Dot+1216
0x1F60	0x040003F0 ;_Char_Dot+1220
0x1F64	0x07F00400 ;_Char_Dot+1224
0x1F68	0x000003F0 ;_Char_Dot+1228
0x1F6C	0x07F003E0 ;_Char_Dot+1232
0x1F70	0x04100410 ;_Char_Dot+1236
0x1F74	0x07F00410 ;_Char_Dot+1240
0x1F78	0x000003E0 ;_Char_Dot+1244
0x1F7C	0x07FC0404 ;_Char_Dot+1248
0x1F80	0x044403FC ;_Char_Dot+1252
0x1F84	0x07C00440 ;_Char_Dot+1256
0x1F88	0x00000380 ;_Char_Dot+1260
0x1F8C	0x07C00380 ;_Char_Dot+1264
0x1F90	0x04440440 ;_Char_Dot+1268
0x1F94	0x03FC07FC ;_Char_Dot+1272
0x1F98	0x00000404 ;_Char_Dot+1276
0x1F9C	0x07F00410 ;_Char_Dot+1280
0x1FA0	0x061003F0 ;_Char_Dot+1284
0x1FA4	0x06000400 ;_Char_Dot+1288
0x1FA8	0x00000300 ;_Char_Dot+1292
0x1FAC	0x02200000 ;_Char_Dot+1296
0x1FB0	0x05900730 ;_Char_Dot+1300
0x1FB4	0x06F00490 ;_Char_Dot+1304
0x1FB8	0x00000260 ;_Char_Dot+1308
0x1FBC	0x04000400 ;_Char_Dot+1312
0x1FC0	0x3FF01FE0 ;_Char_Dot+1316
0x1FC4	0x04300410 ;_Char_Dot+1320
0x1FC8	0x00000020 ;_Char_Dot+1324
0x1FCC	0x07F007E0 ;_Char_Dot+1328
0x1FD0	0x00100010 ;_Char_Dot+1332
0x1FD4	0x07F007E0 ;_Char_Dot+1336
0x1FD8	0x00000010 ;_Char_Dot+1340
0x1FDC	0x07C00000 ;_Char_Dot+1344
0x1FE0	0x003007E0 ;_Char_Dot+1348
0x1FE4	0x07E00030 ;_Char_Dot+1352
0x1FE8	0x000007C0 ;_Char_Dot+1356
0x1FEC	0x07F007E0 ;_Char_Dot+1360
0x1FF0	0x00E00030 ;_Char_Dot+1364
0x1FF4	0x07F00030 ;_Char_Dot+1368
0x1FF8	0x000007E0 ;_Char_Dot+1372
0x1FFC	0x06300410 ;_Char_Dot+1376
0x2000	0x01C003E0 ;_Char_Dot+1380
0x2004	0x063003E0 ;_Char_Dot+1384
0x2008	0x00000410 ;_Char_Dot+1388
0x200C	0x07C40780 ;_Char_Dot+1392
0x2010	0x00440044 ;_Char_Dot+1396
0x2014	0x07F80044 ;_Char_Dot+1400
0x2018	0x000007F0 ;_Char_Dot+1404
0x201C	0x06700630 ;_Char_Dot+1408
0x2020	0x059004D0 ;_Char_Dot+1412
0x2024	0x06300710 ;_Char_Dot+1416
0x2028	0x00000430 ;_Char_Dot+1420
0x202C	0x04800780 ;_Char_Dot+1424
0x2030	0x20103CF0 ;_Char_Dot+1428
0x2034	0x2FD02FD0 ;_Char_Dot+1432
0x2038	0x2FD02FD0 ;_Char_Dot+1436
0x203C	0x2FD02FD0 ;_Char_Dot+1440
0x2040	0x2FD02FD0 ;_Char_Dot+1444
0x2044	0x2FD02FD0 ;_Char_Dot+1448
0x2048	0x2FD02FD0 ;_Char_Dot+1452
0x204C	0x2FD02FD0 ;_Char_Dot+1456
0x2050	0x2FD02FD0 ;_Char_Dot+1460
0x2054	0x20102FD0 ;_Char_Dot+1464
0x2058	0x00003FF0 ;_Char_Dot+1468
0x205C	0x04800780 ;_Char_Dot+1472
0x2060	0x20103CF0 ;_Char_Dot+1476
0x2064	0x20102010 ;_Char_Dot+1480
0x2068	0x20102010 ;_Char_Dot+1484
0x206C	0x00000000 ;_Char_Dot+1488
0x2070	0x00000000 ;_Char_Dot+1492
0x2074	0x00000000 ;_Char_Dot+1496
0x2078	0x00000000 ;_Char_Dot+1500
0x207C	0x00000000 ;_Char_Dot+1504
0x2080	0x00000000 ;_Char_Dot+1508
0x2084	0x00000000 ;_Char_Dot+1512
0x2088	0x00000000 ;_Char_Dot+1516
; end of _Char_Dot
;__Lib_GPIO_32F10x.c,696 :: __GPIO_MODULE_USART1_PA9_10 [108]
0x208C	0x00000009 ;__GPIO_MODULE_USART1_PA9_10+0
0x2090	0x0000000A ;__GPIO_MODULE_USART1_PA9_10+4
0x2094	0xFFFFFFFF ;__GPIO_MODULE_USART1_PA9_10+8
0x2098	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+12
0x209C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+16
0x20A0	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+20
0x20A4	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+24
0x20A8	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+28
0x20AC	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+32
0x20B0	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+36
0x20B4	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+40
0x20B8	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+44
0x20BC	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+48
0x20C0	0x00000818 ;__GPIO_MODULE_USART1_PA9_10+52
0x20C4	0x00000018 ;__GPIO_MODULE_USART1_PA9_10+56
0x20C8	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+60
0x20CC	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+64
0x20D0	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+68
0x20D4	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+72
0x20D8	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+76
0x20DC	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+80
0x20E0	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+84
0x20E4	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+88
0x20E8	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+92
0x20EC	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+96
0x20F0	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+100
0x20F4	0x00000004 ;__GPIO_MODULE_USART1_PA9_10+104
; end of __GPIO_MODULE_USART1_PA9_10
;,0 :: _initBlock_2 [2]
; Containing: ?ICS_Key_Status_Last [1]
;             ?ICS_in_value_index [1]
0x20F8	0x0000 ;_initBlock_2+0 : ?ICS_Key_Status_Last at 0x20F8 : ?ICS_in_value_index at 0x20F9
; end of _initBlock_2
;main.c,0 :: ?ICSmain_x_pos [2]
0x20FA	0x0001 ;?ICSmain_x_pos+0
; end of ?ICSmain_x_pos
;main.c,0 :: ?ICSmain_y_pos [2]
0x20FC	0x00E0 ;?ICSmain_y_pos+0
; end of ?ICSmain_y_pos
;main.c,0 :: ?ICS_val_tab [12]
0x20FE	0x32313020 ;?ICS_val_tab+0
0x2102	0x36353433 ;?ICS_val_tab+4
0x2106	0x2E393837 ;?ICS_val_tab+8
; end of ?ICS_val_tab
;main.c,0 :: ?ICS_in_value [8]
0x210A	0x00000000 ;?ICS_in_value+0
0x210E	0x00000000 ;?ICS_in_value+4
; end of ?ICS_in_value
;main.c,0 :: ?lstr_1_main [17]
0x2112	0x6D726554 ;?lstr_1_main+0
0x2116	0x6C616E69 ;?lstr_1_main+4
0x211A	0x76657220 ;?lstr_1_main+8
0x211E	0x302E3120 ;?lstr_1_main+12
0x2122	0x00 ;?lstr_1_main+16
; end of ?lstr_1_main
;__Lib_GPIO_32F10x.c,0 :: ?ICSGPIO_Alternate_Function_Enable_tmp_L0 [4]
0x2124	0x00000000 ;?ICSGPIO_Alternate_Function_Enable_tmp_L0+0
; end of ?ICSGPIO_Alternate_Function_Enable_tmp_L0
;__Lib_GPIO_32F10x.c,0 :: ?ICSGPIO_Alternate_Function_Enable_tmpreg_L0 [4]
0x2128	0x00000000 ;?ICSGPIO_Alternate_Function_Enable_tmpreg_L0+0
; end of ?ICSGPIO_Alternate_Function_Enable_tmpreg_L0
;__Lib_GPIO_32F10x.c,0 :: ?ICSGPIO_Alternate_Function_Enable_tmpmask_L0 [4]
0x212C	0x00000000 ;?ICSGPIO_Alternate_Function_Enable_tmpmask_L0+0
; end of ?ICSGPIO_Alternate_Function_Enable_tmpmask_L0
;__Lib_GPIO_32F10x.c,0 :: ?ICSGPIO_Alternate_Function_Enable_newstate_L0 [4]
0x2130	0x00000000 ;?ICSGPIO_Alternate_Function_Enable_newstate_L0+0
; end of ?ICSGPIO_Alternate_Function_Enable_newstate_L0
;__Lib_System_101_102_103.c,333 :: __Lib_System_101_102_103_APBAHBPrescTable [16]
0x2134	0x00000000 ;__Lib_System_101_102_103_APBAHBPrescTable+0
0x2138	0x04030201 ;__Lib_System_101_102_103_APBAHBPrescTable+4
0x213C	0x04030201 ;__Lib_System_101_102_103_APBAHBPrescTable+8
0x2140	0x09080706 ;__Lib_System_101_102_103_APBAHBPrescTable+12
; end of __Lib_System_101_102_103_APBAHBPrescTable
;__Lib_System_101_102_103.c,334 :: __Lib_System_101_102_103_ADCPrescTable [4]
0x2144	0x08060402 ;__Lib_System_101_102_103_ADCPrescTable+0
; end of __Lib_System_101_102_103_ADCPrescTable
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0130     [140]    _GPIO_Clk_Enable
0x01BC     [500]    _GPIO_Config
0x03B0      [16]    _Get_Fosc_kHz
0x03C0     [152]    __Lib_GPIO_32F10x_GPIO_Configure_Pin
0x0458     [272]    _GPIO_Alternate_Function_Enable
0x0568     [164]    _RCC_GetClocksFrequency
0x060C     [584]    __Lib_UART_123_45_UARTx_Init_Advanced
0x0854      [32]    _isAvailable
0x0874      [48]    _getChar
0x08A4      [80]    _Point_SCR
0x08F4      [36]    _Set_Pixel
0x0918     [360]    _Display_Char
0x0A80     [120]    _ClearNextTextLine
0x0AF8     [112]    _String2Send
0x0B68     [412]    _KeyScan
0x0D04     [120]    _NVIC_IntEnable
0x0D7C      [60]    _LCD_WR_REG
0x0DB8      [40]    _UART1_Init_Advanced
0x0DE0     [872]    _HandleKeyPress
0x1148     [256]    _GPIO_Configure
0x1248      [16]    _Set_Fosc_kHz
0x1258      [20]    ___FillZeros
0x126C      [20]    ___CC2DW
0x1280     [108]    _InitUART1
0x12EC     [388]    _Display_Str
0x1470     [624]    _LCD_Initial
0x16E0      [44]    _Clear_Screen
0x170C     [232]    _Handle_UART_Input
0x17F4      [84]    _InitTimers
0x1848       [8]    ___GenExcept
0x1850      [76]    _Timer2_interrupt
0x189C     [116]    _Usart1_ISR
0x1910     [144]    _main
0x19A0     [228]    __Lib_System_101_102_103_InitialSetUpRCCRCC2
0x1A84      [24]    __Lib_System_101_102_103_InitialSetUpFosc
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x20000000       [1]    _Key_Status_Last
0x20000001       [1]    _in_value_index
0x20000002       [2]    main_x_pos
0x20000004       [2]    main_y_pos
0x20000006      [12]    _val_tab
0x20000012       [8]    _in_value
0x2000001A       [1]    _Key_Wait_Counter
0x2000001B       [1]    _Key_Repeat_Counter
0x2000001C     [128]    main_in_buffer
0x2000009C       [2]    main_out_ptr
0x2000009E       [2]    main_in_ptr
0x200000A0       [0]    _b20ms
0x200000A0       [0]    _b1ms
0x200000A0       [0]    _bPrompt
0x200000A1       [1]    main_cur_key_press
0x200000A2       [2]    HandleKeyPress_prompt_count_L0
0x200000A4       [4]    ___System_CLOCK_IN_KHZ
0x200000A8       [4]    _UART_Wr_Ptr
0x200000AC       [4]    _UART_Rd_Ptr
0x200000B0       [4]    _UART_Rdy_Ptr
0x200000B4       [4]    _UART_Tx_Idle_Ptr
0x200000B8       [1]    Timer2_interrupt_count20_L0
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x1A9C    [1520]    _Char_Dot
0x208C     [108]    __GPIO_MODULE_USART1_PA9_10
0x20F8       [1]    ?ICS_Key_Status_Last
0x20F9       [1]    ?ICS_in_value_index
0x20FA       [2]    ?ICSmain_x_pos
0x20FC       [2]    ?ICSmain_y_pos
0x20FE      [12]    ?ICS_val_tab
0x210A       [8]    ?ICS_in_value
0x2112      [17]    ?lstr_1_main
0x2124       [4]    ?ICSGPIO_Alternate_Function_Enable_tmp_L0
0x2128       [4]    ?ICSGPIO_Alternate_Function_Enable_tmpreg_L0
0x212C       [4]    ?ICSGPIO_Alternate_Function_Enable_tmpmask_L0
0x2130       [4]    ?ICSGPIO_Alternate_Function_Enable_newstate_L0
0x2134      [16]    __Lib_System_101_102_103_APBAHBPrescTable
0x2144       [4]    __Lib_System_101_102_103_ADCPrescTable
