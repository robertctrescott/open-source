_FAT_Info:
  begin   (midx: 0)
//Files.c,17 :: 		char FAT_Info(void)
_FAT_Info:
  begin   (midx: 0)
//Files.c,19 :: 		char Rvalue = 0xFF;
   (midx: 0)
//Files.c,20 :: 		DiskStart =0;
	R1 <2> <- 0   (midx: 0)
	R0 <4> <- addr(_DiskStart)   (midx: 0)
	[R0] <2> <- R1   (midx: 0)
//Files.c,21 :: 		Rvalue=MSD_ReadBlock(SectorBuff, 0, 512);
	R2 <1> <- 512   (midx: 0)
	R1 <4> <- 0   (midx: 0)
	R0 <4> <- #_SectorBuff   (midx: 0)
	CALL _MSD_ReadBlock   (midx: 0)
   (midx: 0)
	R1 <1> <- R0   (midx: 0)
//Files.c,22 :: 		if(Rvalue!=0) return Rvalue;
	if ( R0 = 0) then goto 0   (midx: 0)
   (midx: 0)
	R0 <1> <- R1   (midx: 0)
	return   (midx: 0)
0:   (midx: 0)
//Files.c,23 :: 		if((SectorBuff[0] != 0xEB)&&(SectorBuff[0] != 0xE9)){
	R0 <4> <- addr(_SectorBuff)   (midx: 0)
	R0 <1> <- [R0]   (midx: 0)
	if ( R0 = 235) then goto 30   (midx: 0)
	R0 <4> <- addr(_SectorBuff)   (midx: 0)
	R0 <1> <- [R0]   (midx: 0)
	if ( R0 = 233) then goto 29   (midx: 0)
28:   (midx: 0)
//Files.c,24 :: 		DiskStart =(SectorBuff[0x1C9]<<24)+(SectorBuff[0x1C8]<<16)+(SectorBuff[0x1C7]<<8)+(SectorBuff[0x1C6]);
	R0 <4> <- addr(_SectorBuff+456)   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R1 <2> <-  R0 shl 16   (midx: 1)
	R0 <4> <- addr(_SectorBuff+455)   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R0 <2> <-  R0 shl 8   (midx: 1)
	R1 <2> <-  R1 + R0   (midx: 1)
	R0 <4> <- addr(_SectorBuff+454)   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R1 <2> <-  R1 + R0   (midx: 1)
	R0 <4> <- addr(_DiskStart)   (midx: 0)
	[R0] <2> <- R1   (midx: 0)
//Files.c,25 :: 		Rvalue=MSD_ReadBlock(SectorBuff, DiskStart<<9, 512);
	R0 <2> <-  R1 shl 9   (midx: 1)
	R2 <1> <- 512   (midx: 0)
	R1 <4> <- R0   (midx: 0)
	R0 <4> <- #_SectorBuff   (midx: 0)
	CALL _MSD_ReadBlock   (midx: 0)
   (midx: 0)
	R1 <1> <- R0   (midx: 0)
//Files.c,26 :: 		if(Rvalue!=0) return Rvalue;
	if ( R0 = 0) then goto 4   (midx: 0)
   (midx: 0)
	R0 <1> <- R1   (midx: 0)
	return   (midx: 0)
4:   (midx: 0)
//Files.c,23 :: 		if((SectorBuff[0] != 0xEB)&&(SectorBuff[0] != 0xE9)){
30:   (midx: 0)
29:   (midx: 0)
//Files.c,28 :: 		SecPerClus = SectorBuff[0x0D];
	R0 <4> <- addr(_SectorBuff+13)   (midx: 0)
	R1 <1> <- [R0]   (midx: 0)
	R0 <4> <- addr(_SecPerClus)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
//Files.c,29 :: 		RsvdSecCnt =(SectorBuff[0x0F]<<8)+(SectorBuff[0x0E]);//0x0001
	R0 <4> <- addr(_SectorBuff+15)   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R1 <2> <-  R0 shl 8   (midx: 1)
	R0 <4> <- addr(_SectorBuff+14)   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R1 <2> <-  R1 + R0   (midx: 1)
	R0 <4> <- addr(_RsvdSecCnt)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
//Files.c,30 :: 		FAT_Size16 =(SectorBuff[0x17]<<8)+(SectorBuff[0x16]);//0x001F
	R0 <4> <- addr(_SectorBuff+23)   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R1 <2> <-  R0 shl 8   (midx: 1)
	R0 <4> <- addr(_SectorBuff+22)   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R2 <2> <-  R1 + R0   (midx: 1)
	R0 <4> <- addr(_FAT_Size16)   (midx: 0)
	[R0] <1> <- R2   (midx: 0)
//Files.c,31 :: 		Hidden_Sec =(SectorBuff[0x1F]<<24)+(SectorBuff[0x1E]<<16)+(SectorBuff[0x1D]<<8)+(SectorBuff[0x1C]);
	R0 <4> <- addr(_SectorBuff+30)   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R1 <2> <-  R0 shl 16   (midx: 1)
	R0 <4> <- addr(_SectorBuff+29)   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R0 <2> <-  R0 shl 8   (midx: 1)
	R1 <2> <-  R1 + R0   (midx: 1)
	R0 <4> <- addr(_SectorBuff+28)   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R1 <2> <-  R1 + R0   (midx: 1)
	R0 <4> <- addr(_Hidden_Sec)   (midx: 0)
	[R0] <2> <- R1   (midx: 0)
//Files.c,32 :: 		FAT_Size32 =(SectorBuff[0x25]<<8)+(SectorBuff[0x24]);
	R0 <4> <- addr(_SectorBuff+37)   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R1 <2> <-  R0 shl 8   (midx: 1)
	R0 <4> <- addr(_SectorBuff+36)   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R1 <2> <-  R1 + R0   (midx: 1)
	R0 <4> <- addr(_FAT_Size32)   (midx: 0)
	[R0] <1> <- R1   (midx: 0)
//Files.c,33 :: 		if(FAT_Size16==0)
	R0 <1> <- R2   (midx: 0)
	if ( R0 != 0) then goto 5   (midx: 0)
//Files.c,34 :: 		Root_Addr =(DiskStart + RsvdSecCnt + 2*FAT_Size32)*512;
	R0 <4> <- addr(_RsvdSecCnt)   (midx: 0)
	R1 <2> <- [R0]   (midx: 0)
	R0 <4> <- addr(_DiskStart)   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R1 <2> <-  R0 + R1   (midx: 1)
	R0 <4> <- addr(_FAT_Size32)   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R0 <2> <-  R0 shl 1   (midx: 0)
	R0 <2> <-  R1 + R0   (midx: 1)
	R1 <2> <-  R0 shl 9   (midx: 1)
	R0 <4> <- addr(_Root_Addr)   (midx: 0)
	[R0] <2> <- R1   (midx: 0)
	goto	6   (midx: 0)
5:   (midx: 0)
//Files.c,36 :: 		Root_Addr =(DiskStart + RsvdSecCnt + 2*FAT_Size16)*512; //(61+1+1F+1F)*512=14000
	R0 <4> <- addr(_RsvdSecCnt)   (midx: 0)
	R1 <2> <- [R0]   (midx: 0)
	R0 <4> <- addr(_DiskStart)   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R1 <2> <-  R0 + R1   (midx: 1)
	R0 <4> <- addr(_FAT_Size16)   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R0 <2> <-  R0 shl 1   (midx: 0)
	R0 <2> <-  R1 + R0   (midx: 1)
	R1 <2> <-  R0 shl 9   (midx: 1)
	R0 <4> <- addr(_Root_Addr)   (midx: 0)
	[R0] <2> <- R1   (midx: 0)
6:   (midx: 0)
//Files.c,37 :: 		return 0;
	R0 <1> <- 0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_Open_File:
  begin   (midx: 0)
//Files.c,42 :: 		char Open_File(unsigned char *n)
_Open_File:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <4> <- R0   (midx: 0)
   (midx: 0)
//Files.c,44 :: 		char Rvalue = 0xFF;
   (midx: 0)
//Files.c,46 :: 		DirFliePtr =0;
	R2 <1> <- 0   (midx: 0)
	R1 <4> <- addr(_DirFliePtr)   (midx: 0)
	[R1] <1> <- R2   (midx: 0)
//Files.c,47 :: 		DirFlieSec =0;
	R2 <1> <- 0   (midx: 0)
	R1 <4> <- addr(_DirFlieSec)   (midx: 0)
	[R1] <1> <- R2   (midx: 0)
//Files.c,48 :: 		if(FAT_Size16==0)
	R1 <4> <- addr(_FAT_Size16)   (midx: 0)
	R1 <1> <- [R1]   (midx: 0)
	if ( R1 != 0) then goto 7   (midx: 0)
//Files.c,49 :: 		DirSecNum =0;
	R2 <1> <- 0   (midx: 0)
	R1 <4> <- addr(_DirSecNum)   (midx: 0)
	[R1] <1> <- R2   (midx: 0)
	goto	8   (midx: 0)
7:   (midx: 0)
//Files.c,51 :: 		DirSecNum = 0x20;
	R2 <1> <- 32   (midx: 0)
	R1 <4> <- addr(_DirSecNum)   (midx: 0)
	[R1] <1> <- R2   (midx: 0)
8:   (midx: 0)
//Files.c,53 :: 		Rvalue=MSD_ReadBlock(SectorBuff, Root_Addr, 512);
	R1 <4> <- addr(_Root_Addr)   (midx: 0)
	R1 <4> <- [R1]   (midx: 0)
	R3 <4> <- PUSH(R3)   (midx: 255)
	R2 <1> <- 512   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R0 <4> <- #_SectorBuff   (midx: 0)
	CALL _MSD_ReadBlock   (midx: 0)
	R3 <4> <- POP   (midx: 255)
//Files.c,54 :: 		if(Rvalue!=0){
   (midx: 0)
	if ( R0 = 0) then goto 9   (midx: 0)
//Files.c,55 :: 		return 0xFF;
	R0 <1> <- 255   (midx: 0)
	return   (midx: 0)
//Files.c,56 :: 		}
9:   (midx: 0)
//Files.c,57 :: 		for(SectorCnt=0;SectorCnt<DirSecNum;++SectorCnt){
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <1> <- 0   (midx: 0)
	R4 <4> <- R3   (midx: 0)
	R3 <1> <- R0   (midx: 0)
10:   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <4> <- addr(_DirSecNum)   (midx: 0)
	R1 <1> <- [R1]   (midx: 0)
	if ( R3 >= R1) then goto 11   (midx: 0)
//Files.c,58 :: 		Rvalue=MSD_ReadBlock(SectorBuff, Root_Addr + SectorCnt*512, 512);
	R2 <2> <-  R3 shl 9   (midx: 5)
	R1 <4> <- addr(_Root_Addr)   (midx: 0)
	R1 <2> <- [R1]   (midx: 0)
	R1 <2> <-  R1 + R2   (midx: 1)
	R4 <4> <- PUSH(R4)   (midx: 255)
	R3 <1> <- PUSH(R3)   (midx: 255)
	R2 <1> <- 512   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R0 <4> <- #_SectorBuff   (midx: 0)
	CALL _MSD_ReadBlock   (midx: 0)
	R3 <1> <- POP   (midx: 255)
	R4 <4> <- POP   (midx: 255)
   (midx: 0)
	R1 <1> <- R0   (midx: 0)
//Files.c,59 :: 		if(Rvalue!=0){
   (midx: 0)
   (midx: 0)
	if ( R0 = 0) then goto 13   (midx: 0)
//Files.c,60 :: 		return Rvalue;
   (midx: 0)
	R0 <1> <- R1   (midx: 0)
	return   (midx: 0)
//Files.c,61 :: 		}
13:   (midx: 0)
//Files.c,62 :: 		for(i=0; i<512; i+=32){
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <1> <- 0   (midx: 0)
	R3 <1> <- R3   (midx: 0)
	R4 <4> <- R4   (midx: 0)
	R0 <1> <- R0   (midx: 0)
14:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R0 >= 512) then goto 15   (midx: 5)
//Files.c,63 :: 		if((SectorBuff[i]=='F')&&(SectorBuff[i+1]=='I')&&(SectorBuff[i+2]=='L')&&(SectorBuff[i+3]=='E')){
	R1 <4> <- #_SectorBuff   (midx: 0)
	R1 <4> <-  R1 + R0   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	if ( R1 != 70) then goto 43   (midx: 0)
	R2 <2> <-  R0 + 1   (midx: 0)
	R1 <4> <- #_SectorBuff   (midx: 0)
	R1 <4> <-  R1 + R2   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	if ( R1 != 73) then goto 42   (midx: 0)
	R2 <2> <-  R0 + 2   (midx: 0)
	R1 <4> <- #_SectorBuff   (midx: 0)
	R1 <4> <-  R1 + R2   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	if ( R1 != 76) then goto 41   (midx: 0)
	R2 <2> <-  R0 + 3   (midx: 0)
	R1 <4> <- #_SectorBuff   (midx: 0)
	R1 <4> <-  R1 + R2   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	if ( R1 != 69) then goto 40   (midx: 0)
33:   (midx: 0)
//Files.c,64 :: 		if((SectorBuff[i+8]=='D')&&(SectorBuff[i+9]=='A')&&(SectorBuff[i+10]=='T')){
	R2 <2> <-  R0 + 8   (midx: 0)
	R1 <4> <- #_SectorBuff   (midx: 0)
	R1 <4> <-  R1 + R2   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	if ( R1 != 68) then goto 39   (midx: 0)
	R2 <2> <-  R0 + 9   (midx: 0)
	R1 <4> <- #_SectorBuff   (midx: 0)
	R1 <4> <-  R1 + R2   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	if ( R1 != 65) then goto 38   (midx: 0)
	R2 <2> <-  R0 + 10   (midx: 0)
	R1 <4> <- #_SectorBuff   (midx: 0)
	R1 <4> <-  R1 + R2   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	if ( R1 != 84) then goto 37   (midx: 0)
32:   (midx: 0)
//Files.c,65 :: 		if((SectorBuff[i+4]==*n)&&(SectorBuff[i+5]==*(n+1))&&(SectorBuff[i+6]==*(n+2))){
	R2 <2> <-  R0 + 4   (midx: 0)
	R1 <4> <- #_SectorBuff   (midx: 0)
	R1 <4> <-  R1 + R2   (midx: 2)
	R2 <1> <- *R1   (midx: 0)
	R1 <1> <- *R4   (midx: 0)
	if ( R2 != R1) then goto 36   (midx: 0)
	R2 <2> <-  R0 + 5   (midx: 0)
	R1 <4> <- #_SectorBuff   (midx: 0)
	R1 <4> <-  R1 + R2   (midx: 2)
	R2 <1> <- *R1   (midx: 0)
	R1 <4> <-  R4 + 1   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	if ( R2 != R1) then goto 35   (midx: 0)
	R2 <2> <-  R0 + 6   (midx: 0)
	R1 <4> <- #_SectorBuff   (midx: 0)
	R1 <4> <-  R1 + R2   (midx: 2)
	R2 <1> <- *R1   (midx: 0)
	R1 <4> <-  R4 + 2   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
   (midx: 0)
	if ( R2 != R1) then goto 34   (midx: 0)
31:   (midx: 0)
//Files.c,66 :: 		DirFliePtr = i;
	R1 <4> <- addr(_DirFliePtr)   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
//Files.c,67 :: 		DirFlieSec = SectorCnt;
	R1 <4> <- addr(_DirFlieSec)   (midx: 0)
   (midx: 0)
	[R1] <1> <- R3   (midx: 0)
//Files.c,68 :: 		if(FAT_Size16 ==0) SectorBuff[i+0x15]=SectorBuff[i+0x14]=0;
	R1 <4> <- addr(_FAT_Size16)   (midx: 0)
	R1 <1> <- [R1]   (midx: 0)
	if ( R1 != 0) then goto 26   (midx: 0)
	R2 <2> <-  R0 + 21   (midx: 0)
	R1 <4> <- #_SectorBuff   (midx: 0)
	R3 <4> <-  R1 + R2   (midx: 2)
	R2 <2> <-  R0 + 20   (midx: 0)
	R1 <4> <- #_SectorBuff   (midx: 0)
	R2 <4> <-  R1 + R2   (midx: 2)
	R1 <1> <- 0   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
	R1 <1> <- *R2   (midx: 0)
	[R3] <1> <- R1   (midx: 0)
26:   (midx: 0)
//Files.c,69 :: 		ClusterNum =((SectorBuff[i+0x15]<<24)+(SectorBuff[i+0x14]<<16)+(SectorBuff[i+0x1B]<<8)+(SectorBuff[i+0x1A]));
	R2 <2> <-  R0 + 20   (midx: 0)
	R1 <4> <- #_SectorBuff   (midx: 0)
	R1 <4> <-  R1 + R2   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R3 <2> <-  R1 shl 16   (midx: 1)
	R2 <2> <-  R0 + 27   (midx: 0)
	R1 <4> <- #_SectorBuff   (midx: 0)
	R1 <4> <-  R1 + R2   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <2> <-  R1 shl 8   (midx: 1)
	R3 <2> <-  R3 + R1   (midx: 1)
   (midx: 0)
	R2 <2> <-  R0 + 26   (midx: 0)
	R1 <4> <- #_SectorBuff   (midx: 0)
	R1 <4> <-  R1 + R2   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R2 <2> <-  R3 + R1   (midx: 1)
	R1 <4> <- addr(_ClusterNum)   (midx: 0)
	[R1] <2> <- R2   (midx: 0)
//Files.c,70 :: 		File_Addr = Root_Addr +(DirSecNum +(ClusterNum -2)*SecPerClus)*512;
	R2 <2> <-  R2 - 2   (midx: 1)
	R1 <4> <- addr(_SecPerClus)   (midx: 0)
	R1 <2> <- [R1]   (midx: 0)
	R2 <2> <-  R2 * R1   (midx: 1)
	R1 <4> <- addr(_DirSecNum)   (midx: 0)
	R1 <2> <- [R1]   (midx: 0)
	R1 <2> <-  R1 + R2   (midx: 1)
	R2 <2> <-  R1 shl 9   (midx: 1)
	R1 <4> <- addr(_Root_Addr)   (midx: 0)
	R1 <2> <- [R1]   (midx: 0)
	R2 <2> <-  R1 + R2   (midx: 1)
	R1 <4> <- addr(_File_Addr)   (midx: 0)
	[R1] <2> <- R2   (midx: 0)
//Files.c,71 :: 		return 0;
	R0 <1> <- 0   (midx: 0)
	return   (midx: 0)
//Files.c,65 :: 		if((SectorBuff[i+4]==*n)&&(SectorBuff[i+5]==*(n+1))&&(SectorBuff[i+6]==*(n+2))){
36:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
35:   (midx: 0)
34:   (midx: 0)
//Files.c,64 :: 		if((SectorBuff[i+8]=='D')&&(SectorBuff[i+9]=='A')&&(SectorBuff[i+10]=='T')){
39:   (midx: 0)
38:   (midx: 0)
37:   (midx: 0)
//Files.c,63 :: 		if((SectorBuff[i]=='F')&&(SectorBuff[i+1]=='I')&&(SectorBuff[i+2]=='L')&&(SectorBuff[i+3]=='E')){
43:   (midx: 0)
42:   (midx: 0)
41:   (midx: 0)
40:   (midx: 0)
//Files.c,62 :: 		for(i=0; i<512; i+=32){
	R1 <2> <-  R0 + 32   (midx: 0)
	R0 <1> <- R1   (midx: 0)
//Files.c,75 :: 		}
   (midx: 0)
	R3 <1> <- R3   (midx: 0)
	R4 <4> <- R4   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	goto	14   (midx: 0)
15:   (midx: 0)
//Files.c,57 :: 		for(SectorCnt=0;SectorCnt<DirSecNum;++SectorCnt){
	R3 <1> <-  R3 + 1   (midx: 0)
	R3 <1> <- R3   (midx: 0)
//Files.c,76 :: 		}
   (midx: 0)
   (midx: 0)
	R4 <4> <- R4   (midx: 0)
	R3 <1> <- R3   (midx: 0)
	goto	10   (midx: 0)
11:   (midx: 0)
//Files.c,77 :: 		return 0xFF;
	R0 <1> <- 255   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_Read_File:
  begin   (midx: 0)
//Files.c,82 :: 		char Read_File(void)
_Read_File:
  begin   (midx: 0)
//Files.c,84 :: 		return MSD_ReadBlock(SectorBuff, File_Addr, 512);
	R0 <4> <- addr(_File_Addr)   (midx: 0)
	R0 <4> <- [R0]   (midx: 0)
	R2 <1> <- 512   (midx: 0)
	R1 <4> <- R0   (midx: 0)
	R0 <4> <- #_SectorBuff   (midx: 0)
	CALL _MSD_ReadBlock   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_Write_File:
  begin   (midx: 0)
//Files.c,89 :: 		char Write_File(void)
_Write_File:
  begin   (midx: 0)
//Files.c,91 :: 		char Rvalue = 0xFF;
   (midx: 0)
//Files.c,92 :: 		Rvalue = MSD_WriteBlock(SectorBuff, File_Addr, 512);
	R0 <4> <- addr(_File_Addr)   (midx: 0)
	R0 <4> <- [R0]   (midx: 0)
	R2 <1> <- 512   (midx: 0)
	R1 <4> <- R0   (midx: 0)
	R0 <4> <- #_SectorBuff   (midx: 0)
	CALL _MSD_WriteBlock   (midx: 0)
   (midx: 0)
	R1 <1> <- R0   (midx: 0)
//Files.c,93 :: 		if(Rvalue!=0) return Rvalue;
	if ( R0 = 0) then goto 27   (midx: 0)
   (midx: 0)
	R0 <1> <- R1   (midx: 0)
	return   (midx: 0)
27:   (midx: 0)
//Files.c,94 :: 		return Rvalue;
   (midx: 0)
   (midx: 0)
	R0 <1> <- R1   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
