_Delay_us:
  begin   (midx: 0)
//msd.c,13 :: 		void Delay_us(void)
_Delay_us:
  begin   (midx: 0)
//msd.c,14 :: 		{ u32 dlyCount = 0x100;
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <-initialize(256)   (midx: 0)
	R1 <4> <- R1   (midx: 0)
//msd.c,15 :: 		while(--dlyCount);
0:   (midx: 0)
   (midx: 0)
	R0 <4> <-  R1 - 1   (midx: 2)
   (midx: 0)
	R1 <4> <- R0   (midx: 0)
   (midx: 0)
	if (!R0) then goto 1   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	goto	0   (midx: 0)
1:   (midx: 0)
  end
   (midx: 0)
_MSD_SendCmd:
  begin   (midx: 0)
//msd.c,328 :: 		void MSD_SendCmd(u8 Cmd, u32 Arg, u8 Crc)
_MSD_SendCmd:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	R1 <4> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <1> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
//msd.c,329 :: 		{ u32 i=0; u8 Frame[6];
   (midx: 0)
//msd.c,330 :: 		Frame[0] = (Cmd | 0x40);
	R5 <4> <- addr(MSD_SendCmd_Frame_L0)   (midx: 0)
   (midx: 0)
	R3 <1> <-  R0 | 64   (midx: 0)
	[R5] <1> <- R3   (midx: 0)
//msd.c,331 :: 		Frame[1] = (u8)(Arg >> 24);
	R4 <4> <-  R5 + 1   (midx: 2)
	R3 <4> <-  R1 shr 24   (midx: 2)
	R3 <1> <- R3   (midx: 0)
	[R4] <1> <- R3   (midx: 0)
//msd.c,332 :: 		Frame[2] = (u8)(Arg >> 16);
	R4 <4> <-  R5 + 2   (midx: 2)
	R3 <4> <-  R1 shr 16   (midx: 2)
	R3 <1> <- R3   (midx: 0)
	[R4] <1> <- R3   (midx: 0)
//msd.c,333 :: 		Frame[3] = (u8)(Arg >> 8);
	R4 <4> <-  R5 + 3   (midx: 2)
	R3 <4> <-  R1 shr 8   (midx: 2)
	R3 <1> <- R3   (midx: 0)
	[R4] <1> <- R3   (midx: 0)
//msd.c,334 :: 		Frame[4] = (u8)(Arg);
	R4 <4> <-  R5 + 4   (midx: 2)
   (midx: 0)
	R3 <1> <- R1   (midx: 0)
	[R4] <1> <- R3   (midx: 0)
//msd.c,335 :: 		Frame[5] = (Crc);
	R3 <4> <-  R5 + 5   (midx: 2)
   (midx: 0)
	[R3] <1> <- R2   (midx: 0)
//msd.c,336 :: 		for (i=0; i<6; i++) MSD_WriteByte(Frame[i]);
   (midx: 0)
   (midx: 0)
	R0 <4> <- 0   (midx: 0)
	R0 <4> <- R0   (midx: 0)
47:   (midx: 0)
   (midx: 0)
	if ( R0 >= 6) then goto 48   (midx: 2)
	R3 <4> <- addr(MSD_SendCmd_Frame_L0)   (midx: 0)
	R3 <4> <-  R3 + R0   (midx: 2)
	R3 <1> <- *R3   (midx: 0)
	R3 <1> <- R3   (midx: 0)
	R0 <4> <- PUSH(R0)   (midx: 255)
	R0 <1> <- R3   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
	R0 <4> <- POP   (midx: 255)
	R0 <4> <-  R0 + 1   (midx: 2)
	R0 <4> <- R0   (midx: 0)
   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	goto	47   (midx: 0)
48:   (midx: 0)
  end
   (midx: 0)
_MSD_GetResponse:
  begin   (midx: 0)
//msd.c,385 :: 		u8 MSD_GetResponse(u8 Response)
_MSD_GetResponse:
  begin   (midx: 0)
//msd.c,386 :: 		{ u32 Count=0xFFF;
   (midx: 0)
//msd.c,385 :: 		u8 MSD_GetResponse(u8 Response)
   (midx: 0)
//msd.c,386 :: 		{ u32 Count=0xFFF;
   (midx: 0)
//msd.c,385 :: 		u8 MSD_GetResponse(u8 Response)
	FARG_MSD_GetResponse_Response <1> <- R0   (midx: 0)
//msd.c,386 :: 		{ u32 Count=0xFFF;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <-initialize(4095)   (midx: 0)
	R2 <4> <- R3   (midx: 0)
//msd.c,387 :: 		while ((MSD_ReadByte()!=Response)&& Count) Count--;//Check if response is got or a timeout is happen
61:   (midx: 0)
   (midx: 0)
	R2 <4> <- PUSH(R2)   (midx: 255)
	CALL _MSD_ReadByte   (midx: 0)
	R2 <4> <- POP   (midx: 255)
	R1 <1> <- FARG_MSD_GetResponse_Response   (midx: 0)
	if ( R0 = R1) then goto 75   (midx: 0)
	if (!R2) then goto 74   (midx: 0)
73:   (midx: 0)
   (midx: 0)
	R1 <4> <-  R2 - 1   (midx: 2)
   (midx: 0)
	R3 <4> <- R1   (midx: 0)
   (midx: 0)
	R2 <4> <- R3   (midx: 0)
	goto	61   (midx: 0)
75:   (midx: 0)
   (midx: 0)
74:   (midx: 0)
//msd.c,388 :: 		if (Count==0) return MSD_RESPONSE_FAILURE;//After time out
   (midx: 0)
	if ( R2 != 0) then goto 65   (midx: 2)
	R0 <1> <- 255   (midx: 0)
	return   (midx: 0)
65:   (midx: 0)
//msd.c,389 :: 		else return MSD_RESPONSE_NO_ERROR;//Right response got
	R0 <1> <- 0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_MSD_GoIdleState:
  begin   (midx: 0)
//msd.c,428 :: 		u8 MSD_GoIdleState(void)
_MSD_GoIdleState:
  begin   (midx: 0)
//msd.c,431 :: 		MSD_CS_LOW();
	R1 <4> <- 0   (midx: 0)
	R0 <4> <- addr(LitPtrAbs: 40010C14)   (midx: 0)
	[R0] <4> <- R1   (midx: 0)
//msd.c,432 :: 		Delay_us(1);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//msd.c,435 :: 		MSD_SendCmd(MSD_GO_IDLE_STATE, 0, 0x95);
	R2 <1> <- 149   (midx: 0)
	R1 <4> <- 0   (midx: 0)
	R0 <1> <- 0   (midx: 0)
	CALL _MSD_SendCmd   (midx: 0)
//msd.c,438 :: 		if (MSD_GetResponse(MSD_IN_IDLE_STATE))
	R0 <1> <- 1   (midx: 0)
	CALL _MSD_GetResponse   (midx: 0)
	if (!R0) then goto 69   (midx: 0)
//msd.c,441 :: 		return MSD_RESPONSE_FAILURE;
	R0 <1> <- 255   (midx: 0)
	return   (midx: 0)
//msd.c,442 :: 		}
69:   (midx: 0)
//msd.c,444 :: 		do
70:   (midx: 0)
//msd.c,447 :: 		MSD_CS_HIGH();
	R1 <4> <- 0   (midx: 0)
	R0 <4> <- addr(LitPtrAbs: 40010C10)   (midx: 0)
	[R0] <4> <- R1   (midx: 0)
//msd.c,449 :: 		MSD_WriteByte(DUMMY);
	R0 <1> <- 255   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
//msd.c,452 :: 		MSD_CS_LOW();
	R1 <4> <- 0   (midx: 0)
	R0 <4> <- addr(LitPtrAbs: 40010C14)   (midx: 0)
	[R0] <4> <- R1   (midx: 0)
//msd.c,455 :: 		MSD_SendCmd(MSD_SEND_OP_COND, 0, 0xFF);
	R2 <1> <- 255   (midx: 0)
	R1 <4> <- 0   (midx: 0)
	R0 <1> <- 1   (midx: 0)
	CALL _MSD_SendCmd   (midx: 0)
//msd.c,458 :: 		while (MSD_GetResponse(MSD_RESPONSE_NO_ERROR));
	R0 <1> <- 0   (midx: 0)
	CALL _MSD_GetResponse   (midx: 0)
	if (R0) then goto 70   (midx: 0)
//msd.c,461 :: 		MSD_CS_HIGH();
	R1 <4> <- 0   (midx: 0)
	R0 <4> <- addr(LitPtrAbs: 40010C10)   (midx: 0)
	[R0] <4> <- R1   (midx: 0)
//msd.c,463 :: 		MSD_WriteByte(DUMMY);
	R0 <1> <- 255   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
//msd.c,465 :: 		return MSD_RESPONSE_NO_ERROR;
	R0 <1> <- 0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_MSD_Init:
  begin   (midx: 0)
//msd.c,20 :: 		u8 MSD_Init(void)
_MSD_Init:
  begin   (midx: 0)
//msd.c,21 :: 		{  u32 i=0;
   (midx: 0)
//msd.c,22 :: 		SPI_Config();
	CALL _SPI_Config   (midx: 0)
//msd.c,23 :: 		MSD_CS_HIGH();
	R1 <4> <- 0   (midx: 0)
	R0 <4> <- addr(LitPtrAbs: 40010C10)   (midx: 0)
	[R0] <4> <- R1   (midx: 0)
//msd.c,24 :: 		for(i=0; i <10; i++) MSD_WriteByte(DUMMY);  //Send dummy byte: 8 Clock pulses of delay
   (midx: 0)
   (midx: 0)
	R1 <4> <- 0   (midx: 0)
	R1 <4> <- R1   (midx: 0)
2:   (midx: 0)
   (midx: 0)
	if ( R1 >= 10) then goto 3   (midx: 2)
	R1 <4> <- PUSH(R1)   (midx: 255)
	R0 <1> <- 255   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
	R1 <4> <- POP   (midx: 255)
	R1 <4> <-  R1 + 1   (midx: 2)
	R1 <4> <- R1   (midx: 0)
   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	goto	2   (midx: 0)
3:   (midx: 0)
//msd.c,25 :: 		return (MSD_GoIdleState());
	CALL _MSD_GoIdleState   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_MSD_GetDataResponse:
  begin   (midx: 0)
//msd.c,349 :: 		u8 MSD_GetDataResponse(void)
_MSD_GetDataResponse:
  begin   (midx: 0)
//msd.c,350 :: 		{ u32 i=0; u8 response, rvalue;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <-initialize(0)   (midx: 0)
	R1 <4> <- R1   (midx: 0)
//msd.c,351 :: 		while (i<=64){
50:   (midx: 0)
   (midx: 0)
	if ( R1 > 64) then goto 51   (midx: 2)
//msd.c,352 :: 		response = MSD_ReadByte();//Read resonse
	R1 <4> <- PUSH(R1)   (midx: 255)
	CALL _MSD_ReadByte   (midx: 0)
	R1 <4> <- POP   (midx: 255)
//msd.c,353 :: 		response &= 0x1F;//Mask unused bits
	R0 <1> <-  R0 & 31   (midx: 0)
	MSD_GetDataResponse_response_L0_4 <1> <- R0   (midx: 0)
//msd.c,354 :: 		switch (response){
	goto	52   (midx: 0)
//msd.c,355 :: 		case MSD_DATA_OK:
54:   (midx: 0)
//msd.c,357 :: 		rvalue = MSD_DATA_OK;
   (midx: 0)
	R0 <1> <- 5   (midx: 0)
//msd.c,358 :: 		break;
   (midx: 0)
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	goto	53   (midx: 0)
//msd.c,360 :: 		case MSD_DATA_CRC_ERROR:
55:   (midx: 0)
//msd.c,361 :: 		return MSD_DATA_CRC_ERROR;
	R0 <1> <- 11   (midx: 0)
	return   (midx: 0)
//msd.c,362 :: 		case MSD_DATA_WRITE_ERROR:
56:   (midx: 0)
//msd.c,363 :: 		return MSD_DATA_WRITE_ERROR;
	R0 <1> <- 13   (midx: 0)
	return   (midx: 0)
//msd.c,364 :: 		default:
57:   (midx: 0)
//msd.c,366 :: 		rvalue = MSD_DATA_OTHER_ERROR;
   (midx: 0)
   (midx: 0)
	R0 <1> <- 255   (midx: 0)
//msd.c,367 :: 		break;
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	goto	53   (midx: 0)
//msd.c,369 :: 		}
52:   (midx: 0)
	R0 <1> <- MSD_GetDataResponse_response_L0_4   (midx: 0)
	if ( R0 = 5) then goto 54   (midx: 0)
	R0 <1> <- MSD_GetDataResponse_response_L0_4   (midx: 0)
	if ( R0 = 11) then goto 55   (midx: 0)
	R0 <1> <- MSD_GetDataResponse_response_L0_4   (midx: 0)
	if ( R0 = 13) then goto 56   (midx: 0)
	goto	57   (midx: 0)
53:   (midx: 0)
//msd.c,370 :: 		if (rvalue == MSD_DATA_OK)//Exit loop in case of data ok
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R0 != 5) then goto 58   (midx: 0)
//msd.c,371 :: 		break;
	goto	51   (midx: 0)
58:   (midx: 0)
//msd.c,372 :: 		i++;//Increment loop counter
   (midx: 0)
	R1 <4> <-  R1 + 1   (midx: 2)
	R1 <4> <- R1   (midx: 0)
//msd.c,373 :: 		}
   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	goto	50   (midx: 0)
51:   (midx: 0)
//msd.c,374 :: 		while (MSD_ReadByte()==0);//Wait null data
59:   (midx: 0)
	CALL _MSD_ReadByte   (midx: 0)
	if ( R0 != 0) then goto 60   (midx: 0)
	goto	59   (midx: 0)
60:   (midx: 0)
//msd.c,375 :: 		return response;//Return response
	R0 <1> <- MSD_GetDataResponse_response_L0_11   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_MSD_WriteBlock:
  begin   (midx: 0)
//msd.c,30 :: 		u8 MSD_WriteBlock(u8* pBuffer, u32 WriteAddr, u16 NumByteToWrite)
_MSD_WriteBlock:
  begin   (midx: 0)
   (midx: 0)
	FARG_MSD_WriteBlock_pBuffer <4> <- R0   (midx: 0)
	R0 <4> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
	FARG_MSD_WriteBlock_NumByteToWrite <1> <- R2   (midx: 0)
   (midx: 0)
//msd.c,31 :: 		{   u32 i=0;
   (midx: 0)
//msd.c,32 :: 		u8 rvalue = MSD_RESPONSE_FAILURE;
   (midx: 0)
	R3 <4> <- 0   (midx: 0)
	MSD_WriteBlock_rvalue_L0 <-initialize(255)   (midx: 0)
//msd.c,33 :: 		MSD_CS_LOW();
	R4 <4> <- 0   (midx: 0)
	R3 <4> <- addr(LitPtrAbs: 40010C14)   (midx: 0)
	[R3] <4> <- R4   (midx: 0)
//msd.c,34 :: 		Delay_us(1);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//msd.c,35 :: 		MSD_SendCmd(MSD_WRITE_BLOCK, WriteAddr, 0xFF);//Send CMD24
	R2 <1> <- 255   (midx: 0)
   (midx: 0)
	R1 <4> <- R0   (midx: 0)
	R0 <1> <- 24   (midx: 0)
	CALL _MSD_SendCmd   (midx: 0)
//msd.c,36 :: 		if(!MSD_GetResponse(MSD_RESPONSE_NO_ERROR)){
	R0 <1> <- 0   (midx: 0)
	CALL _MSD_GetResponse   (midx: 0)
	if (R0) then goto 6   (midx: 0)
//msd.c,37 :: 		MSD_WriteByte(DUMMY);                       //Send dummy byte: 8 Clock pulses of delay
	R0 <1> <- 255   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
//msd.c,38 :: 		MSD_WriteByte(0xFE);
	R0 <1> <- 254   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
//msd.c,39 :: 		for(i=0; i<NumByteToWrite; i++) {
	R3 <4> <- 0   (midx: 0)
	MSD_WriteBlock_i_L0 <4> <- R3   (midx: 0)
7:   (midx: 0)
	R4 <1> <- FARG_MSD_WriteBlock_NumByteToWrite   (midx: 0)
	R3 <4> <- MSD_WriteBlock_i_L0   (midx: 0)
	if ( R3 >= R4) then goto 8   (midx: 2)
//msd.c,40 :: 		MSD_WriteByte(*pBuffer); pBuffer++;
	R3 <4> <- FARG_MSD_WriteBlock_pBuffer   (midx: 0)
	R3 <1> <- *R3   (midx: 0)
	R3 <1> <- R3   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
	R3 <4> <- FARG_MSD_WriteBlock_pBuffer   (midx: 0)
	R3 <4> <-  R3 + 1   (midx: 2)
	FARG_MSD_WriteBlock_pBuffer <4> <- R3   (midx: 0)
//msd.c,39 :: 		for(i=0; i<NumByteToWrite; i++) {
	R3 <4> <- MSD_WriteBlock_i_L0   (midx: 0)
	R3 <4> <-  R3 + 1   (midx: 2)
	MSD_WriteBlock_i_L0 <4> <- R3   (midx: 0)
//msd.c,41 :: 		}
	goto	7   (midx: 0)
8:   (midx: 0)
//msd.c,42 :: 		MSD_ReadByte(); MSD_ReadByte();             //DUMMY CRC bytes
	CALL _MSD_ReadByte   (midx: 0)
	CALL _MSD_ReadByte   (midx: 0)
//msd.c,43 :: 		if(MSD_GetDataResponse()==MSD_DATA_OK) rvalue=MSD_RESPONSE_NO_ERROR;
	CALL _MSD_GetDataResponse   (midx: 0)
	if ( R0 != 5) then goto 10   (midx: 0)
	R3 <1> <- 0   (midx: 0)
	MSD_WriteBlock_rvalue_L0 <1> <- R3   (midx: 0)
10:   (midx: 0)
//msd.c,44 :: 		}
6:   (midx: 0)
//msd.c,45 :: 		MSD_CS_HIGH(); MSD_WriteByte(DUMMY);          //Send dummy byte: 8 Clock pulses of delay
	R4 <4> <- 0   (midx: 0)
	R3 <4> <- addr(LitPtrAbs: 40010C10)   (midx: 0)
	[R3] <4> <- R4   (midx: 0)
	R0 <1> <- 255   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
//msd.c,46 :: 		return rvalue;
	R0 <1> <- MSD_WriteBlock_rvalue_L0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_MSD_ReadBlock:
  begin   (midx: 0)
//msd.c,51 :: 		u8 MSD_ReadBlock(u8* pBuffer, u32 ReadAddr, u16 NumByteToRead)
_MSD_ReadBlock:
  begin   (midx: 0)
   (midx: 0)
	FARG_MSD_ReadBlock_pBuffer <4> <- R0   (midx: 0)
	R0 <4> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
	FARG_MSD_ReadBlock_NumByteToRead <1> <- R2   (midx: 0)
   (midx: 0)
//msd.c,52 :: 		{ u32 i = 0; u8 rvalue = MSD_RESPONSE_FAILURE;
   (midx: 0)
   (midx: 0)
	R3 <4> <- 0   (midx: 0)
	MSD_ReadBlock_rvalue_L0 <-initialize(255)   (midx: 0)
//msd.c,53 :: 		MSD_CS_LOW(); Delay_us(1);
	R4 <4> <- 0   (midx: 0)
	R3 <4> <- addr(LitPtrAbs: 40010C14)   (midx: 0)
	[R3] <4> <- R4   (midx: 0)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//msd.c,54 :: 		MSD_SendCmd(MSD_READ_SINGLE_BLOCK, ReadAddr, 0xFF);//send CMD17
	R2 <1> <- 255   (midx: 0)
   (midx: 0)
	R1 <4> <- R0   (midx: 0)
	R0 <1> <- 17   (midx: 0)
	CALL _MSD_SendCmd   (midx: 0)
//msd.c,55 :: 		if (!MSD_GetResponse(MSD_RESPONSE_NO_ERROR)) {
	R0 <1> <- 0   (midx: 0)
	CALL _MSD_GetResponse   (midx: 0)
	if (R0) then goto 12   (midx: 0)
//msd.c,56 :: 		if (!MSD_GetResponse(MSD_START_DATA_SINGLE_BLOCK_READ)) {
	R0 <1> <- 254   (midx: 0)
	CALL _MSD_GetResponse   (midx: 0)
	if (R0) then goto 13   (midx: 0)
//msd.c,57 :: 		for (i = 0; i < NumByteToRead; i++) {
	R3 <4> <- 0   (midx: 0)
	MSD_ReadBlock_i_L0 <4> <- R3   (midx: 0)
14:   (midx: 0)
	R4 <1> <- FARG_MSD_ReadBlock_NumByteToRead   (midx: 0)
	R3 <4> <- MSD_ReadBlock_i_L0   (midx: 0)
	if ( R3 >= R4) then goto 15   (midx: 2)
//msd.c,58 :: 		*pBuffer = MSD_ReadByte(); pBuffer++;
	CALL _MSD_ReadByte   (midx: 0)
	R3 <4> <- FARG_MSD_ReadBlock_pBuffer   (midx: 0)
	[R3] <1> <- R0   (midx: 0)
	R3 <4> <- FARG_MSD_ReadBlock_pBuffer   (midx: 0)
	R3 <4> <-  R3 + 1   (midx: 2)
	FARG_MSD_ReadBlock_pBuffer <4> <- R3   (midx: 0)
//msd.c,57 :: 		for (i = 0; i < NumByteToRead; i++) {
	R3 <4> <- MSD_ReadBlock_i_L0   (midx: 0)
	R3 <4> <-  R3 + 1   (midx: 2)
	MSD_ReadBlock_i_L0 <4> <- R3   (midx: 0)
//msd.c,59 :: 		}
	goto	14   (midx: 0)
15:   (midx: 0)
//msd.c,60 :: 		MSD_ReadByte(); MSD_ReadByte();                //DUMMY CRC bytes
	CALL _MSD_ReadByte   (midx: 0)
	CALL _MSD_ReadByte   (midx: 0)
//msd.c,61 :: 		rvalue = MSD_RESPONSE_NO_ERROR;
	R3 <1> <- 0   (midx: 0)
	MSD_ReadBlock_rvalue_L0 <1> <- R3   (midx: 0)
//msd.c,62 :: 		}
13:   (midx: 0)
//msd.c,63 :: 		}
12:   (midx: 0)
//msd.c,64 :: 		MSD_CS_HIGH(); MSD_WriteByte(DUMMY);               //Send dummy byte: 8 Clock pulses of delay
	R4 <4> <- 0   (midx: 0)
	R3 <4> <- addr(LitPtrAbs: 40010C10)   (midx: 0)
	[R3] <4> <- R4   (midx: 0)
	R0 <1> <- 255   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
//msd.c,65 :: 		return rvalue;
	R0 <1> <- MSD_ReadBlock_rvalue_L0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_MSD_WriteBuffer:
  begin   (midx: 0)
//msd.c,70 :: 		u8 MSD_WriteBuffer(u8* pBuffer, u32 WriteAddr, u32 NumByteToWrite)
_MSD_WriteBuffer:
  begin   (midx: 0)
   (midx: 0)
	FARG_MSD_WriteBuffer_pBuffer <4> <- R0   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <4> <- R2   (midx: 0)
   (midx: 0)
//msd.c,71 :: 		{ u32 i=0, NbrOfBlock=0, Offset=0; u8 rvalue=MSD_RESPONSE_FAILURE;
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <4> <- 0   (midx: 0)
	MSD_WriteBuffer_rvalue_L0 <-initialize(255)   (midx: 0)
//msd.c,72 :: 		NbrOfBlock = NumByteToWrite/BLOCK_SIZE;
   (midx: 0)
	R3 <4> <-  R2 shr 9   (midx: 2)
	MSD_WriteBuffer_NbrOfBlock_L0 <4> <- R3   (midx: 0)
//msd.c,73 :: 		MSD_CS_LOW(); Delay_us(1);
	R4 <4> <- 0   (midx: 0)
	R3 <4> <- addr(LitPtrAbs: 40010C14)   (midx: 0)
	[R3] <4> <- R4   (midx: 0)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//msd.c,74 :: 		while(NbrOfBlock --) {
18:   (midx: 0)
	R4 <4> <- MSD_WriteBuffer_NbrOfBlock_L0   (midx: 0)
	R3 <4> <- MSD_WriteBuffer_NbrOfBlock_L0   (midx: 0)
	R3 <4> <-  R3 - 1   (midx: 2)
	MSD_WriteBuffer_NbrOfBlock_L0 <4> <- R3   (midx: 0)
	if (!R4) then goto 19   (midx: 0)
//msd.c,75 :: 		if(MSD_GetResponse(MSD_RESPONSE_NO_ERROR)){
	R0 <1> <- 0   (midx: 0)
	CALL _MSD_GetResponse   (midx: 0)
	if (!R0) then goto 20   (midx: 0)
//msd.c,76 :: 		return MSD_RESPONSE_FAILURE;
	R0 <1> <- 255   (midx: 0)
	return   (midx: 0)
//msd.c,77 :: 		}
20:   (midx: 0)
//msd.c,78 :: 		MSD_WriteByte(DUMMY);                       //Send dummy byte: 8 Clock pulses of delay
	R0 <1> <- 255   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
//msd.c,79 :: 		MSD_WriteByte(MSD_START_DATA_SINGLE_BLOCK_WRITE);
	R0 <1> <- 254   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
//msd.c,80 :: 		for(i=0; i<BLOCK_SIZE; i++){
   (midx: 0)
   (midx: 0)
	R0 <4> <- 0   (midx: 0)
	R0 <4> <- R0   (midx: 0)
21:   (midx: 0)
   (midx: 0)
	if ( R0 >= 512) then goto 22   (midx: 2)
//msd.c,81 :: 		MSD_WriteByte(*pBuffer); pBuffer++;
	R3 <4> <- FARG_MSD_WriteBuffer_pBuffer   (midx: 0)
	R3 <1> <- *R3   (midx: 0)
	R3 <1> <- R3   (midx: 0)
	R0 <4> <- PUSH(R0)   (midx: 255)
	R0 <1> <- R3   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
	R0 <4> <- POP   (midx: 255)
	R3 <4> <- FARG_MSD_WriteBuffer_pBuffer   (midx: 0)
	R3 <4> <-  R3 + 1   (midx: 2)
	FARG_MSD_WriteBuffer_pBuffer <4> <- R3   (midx: 0)
//msd.c,80 :: 		for(i=0; i<BLOCK_SIZE; i++){
   (midx: 0)
	R3 <4> <-  R0 + 1   (midx: 2)
   (midx: 0)
	R1 <4> <- R3   (midx: 0)
//msd.c,82 :: 		}
   (midx: 0)
	R0 <4> <- R1   (midx: 0)
	goto	21   (midx: 0)
22:   (midx: 0)
//msd.c,84 :: 		MSD_ReadByte(); MSD_ReadByte();            //DUMMY CRC bytes
	CALL _MSD_ReadByte   (midx: 0)
	CALL _MSD_ReadByte   (midx: 0)
//msd.c,85 :: 		if(MSD_GetDataResponse()==MSD_DATA_OK) {
	CALL _MSD_GetDataResponse   (midx: 0)
	if ( R0 != 5) then goto 24   (midx: 0)
//msd.c,86 :: 		rvalue=MSD_RESPONSE_NO_ERROR;
	R3 <1> <- 0   (midx: 0)
	MSD_WriteBuffer_rvalue_L0 <1> <- R3   (midx: 0)
//msd.c,87 :: 		} else {
	goto	25   (midx: 0)
24:   (midx: 0)
//msd.c,88 :: 		rvalue=MSD_RESPONSE_FAILURE;
	R3 <1> <- 255   (midx: 0)
	MSD_WriteBuffer_rvalue_L0 <1> <- R3   (midx: 0)
//msd.c,89 :: 		}
25:   (midx: 0)
//msd.c,90 :: 		}
	goto	18   (midx: 0)
19:   (midx: 0)
//msd.c,91 :: 		MSD_CS_HIGH(); MSD_WriteByte(DUMMY);         //Send dummy byte: 8 Clock pulses of delay
	R4 <4> <- 0   (midx: 0)
	R3 <4> <- addr(LitPtrAbs: 40010C10)   (midx: 0)
	[R3] <4> <- R4   (midx: 0)
	R0 <1> <- 255   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
//msd.c,92 :: 		return rvalue;
	R0 <1> <- MSD_WriteBuffer_rvalue_L0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_MSD_ReadBuffer:
  begin   (midx: 0)
//msd.c,97 :: 		u8 MSD_ReadBuffer(u8* pBuffer, u32 ReadAddr, u32 NumByteToRead)
_MSD_ReadBuffer:
  begin   (midx: 0)
   (midx: 0)
	FARG_MSD_ReadBuffer_pBuffer <4> <- R0   (midx: 0)
	R0 <4> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
	FARG_MSD_ReadBuffer_ReadAddr <4> <- R1   (midx: 0)
   (midx: 0)
//msd.c,98 :: 		{ u32 i=0, NbrOfBlock=0, Offset=0; u8 rvalue=MSD_RESPONSE_FAILURE;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <4> <- 0   (midx: 0)
	MSD_ReadBuffer_Offset_L0 <-initialize(0)   (midx: 0)
   (midx: 0)
	MSD_ReadBuffer_rvalue_L0 <-initialize(255)   (midx: 0)
//msd.c,99 :: 		NbrOfBlock=NumByteToRead / BLOCK_SIZE;
   (midx: 0)
	R3 <4> <-  R0 shr 9   (midx: 2)
	MSD_ReadBuffer_NbrOfBlock_L0 <4> <- R3   (midx: 0)
//msd.c,100 :: 		MSD_CS_LOW(); Delay_us(1);
	R4 <4> <- 0   (midx: 0)
	R3 <4> <- addr(LitPtrAbs: 40010C14)   (midx: 0)
	[R3] <4> <- R4   (midx: 0)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//msd.c,101 :: 		while(NbrOfBlock --){
27:   (midx: 0)
	R4 <4> <- MSD_ReadBuffer_NbrOfBlock_L0   (midx: 0)
	R3 <4> <- MSD_ReadBuffer_NbrOfBlock_L0   (midx: 0)
	R3 <4> <-  R3 - 1   (midx: 2)
	MSD_ReadBuffer_NbrOfBlock_L0 <4> <- R3   (midx: 0)
	if (!R4) then goto 28   (midx: 0)
//msd.c,102 :: 		MSD_SendCmd (MSD_READ_SINGLE_BLOCK, ReadAddr+Offset, 0xFF);//send CMD17
	R4 <4> <- MSD_ReadBuffer_Offset_L0   (midx: 0)
	R3 <4> <- FARG_MSD_ReadBuffer_ReadAddr   (midx: 0)
	R3 <4> <-  R3 + R4   (midx: 2)
	R2 <1> <- 255   (midx: 0)
	R1 <4> <- R3   (midx: 0)
	R0 <1> <- 17   (midx: 0)
	CALL _MSD_SendCmd   (midx: 0)
//msd.c,104 :: 		if (MSD_GetResponse(MSD_RESPONSE_NO_ERROR)){
	R0 <1> <- 0   (midx: 0)
	CALL _MSD_GetResponse   (midx: 0)
	if (!R0) then goto 29   (midx: 0)
//msd.c,105 :: 		return  MSD_RESPONSE_FAILURE;
	R0 <1> <- 255   (midx: 0)
	return   (midx: 0)
//msd.c,106 :: 		}
29:   (midx: 0)
//msd.c,108 :: 		if (!MSD_GetResponse(MSD_START_DATA_SINGLE_BLOCK_READ)){
	R0 <1> <- 254   (midx: 0)
	CALL _MSD_GetResponse   (midx: 0)
	if (R0) then goto 30   (midx: 0)
//msd.c,109 :: 		for(i=0; i<BLOCK_SIZE; i++) {
   (midx: 0)
   (midx: 0)
	R4 <4> <- 0   (midx: 0)
	R1 <4> <- R4   (midx: 0)
31:   (midx: 0)
   (midx: 0)
	if ( R1 >= 512) then goto 32   (midx: 2)
//msd.c,110 :: 		*pBuffer = MSD_ReadByte(); pBuffer++;
	R1 <4> <- PUSH(R1)   (midx: 255)
	CALL _MSD_ReadByte   (midx: 0)
	R1 <4> <- POP   (midx: 255)
	R3 <4> <- FARG_MSD_ReadBuffer_pBuffer   (midx: 0)
	[R3] <1> <- R0   (midx: 0)
	R3 <4> <- FARG_MSD_ReadBuffer_pBuffer   (midx: 0)
	R3 <4> <-  R3 + 1   (midx: 2)
	FARG_MSD_ReadBuffer_pBuffer <4> <- R3   (midx: 0)
//msd.c,109 :: 		for(i=0; i<BLOCK_SIZE; i++) {
   (midx: 0)
	R3 <4> <-  R1 + 1   (midx: 2)
   (midx: 0)
	R4 <4> <- R3   (midx: 0)
//msd.c,111 :: 		}
   (midx: 0)
	R1 <4> <- R4   (midx: 0)
	goto	31   (midx: 0)
32:   (midx: 0)
//msd.c,112 :: 		Offset+=512;
	R3 <4> <- MSD_ReadBuffer_Offset_L0   (midx: 0)
	R3 <4> <-  R3 + 512   (midx: 2)
	MSD_ReadBuffer_Offset_L0 <4> <- R3   (midx: 0)
//msd.c,113 :: 		MSD_ReadByte(); MSD_ReadByte();         //DUMMY CRC bytes
	CALL _MSD_ReadByte   (midx: 0)
	CALL _MSD_ReadByte   (midx: 0)
//msd.c,114 :: 		rvalue = MSD_RESPONSE_NO_ERROR;
	R3 <1> <- 0   (midx: 0)
	MSD_ReadBuffer_rvalue_L0 <1> <- R3   (midx: 0)
//msd.c,115 :: 		} else {
	goto	34   (midx: 0)
30:   (midx: 0)
//msd.c,116 :: 		rvalue = MSD_RESPONSE_FAILURE;
	R3 <1> <- 255   (midx: 0)
	MSD_ReadBuffer_rvalue_L0 <1> <- R3   (midx: 0)
//msd.c,117 :: 		}
34:   (midx: 0)
//msd.c,118 :: 		}
	goto	27   (midx: 0)
28:   (midx: 0)
//msd.c,119 :: 		MSD_CS_HIGH(); MSD_WriteByte(DUMMY);
	R4 <4> <- 0   (midx: 0)
	R3 <4> <- addr(LitPtrAbs: 40010C10)   (midx: 0)
	[R3] <4> <- R4   (midx: 0)
	R0 <1> <- 255   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
//msd.c,120 :: 		return rvalue;
	R0 <1> <- MSD_ReadBuffer_rvalue_L0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_MSD_GetCSDRegister:
  begin   (midx: 0)
//msd.c,133 :: 		u8 MSD_GetCSDRegister(sMSD_CSD* MSD_csd)
_MSD_GetCSDRegister:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <4> <- R0   (midx: 0)
   (midx: 0)
//msd.c,135 :: 		u32 i = 0;
   (midx: 0)
//msd.c,136 :: 		u8 rvalue = MSD_RESPONSE_FAILURE;
   (midx: 0)
   (midx: 0)
	R4 <-initialize(255)   (midx: 0)
//msd.c,140 :: 		MSD_CS_LOW();
	R2 <4> <- 0   (midx: 0)
	R1 <4> <- addr(LitPtrAbs: 40010C14)   (midx: 0)
	[R1] <4> <- R2   (midx: 0)
//msd.c,141 :: 		Delay_us(1);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//msd.c,144 :: 		MSD_SendCmd(MSD_SEND_CSD, 0, 0xFF);
	R4 <1> <- PUSH(R4)   (midx: 255)
	R3 <4> <- PUSH(R3)   (midx: 255)
	R2 <1> <- 255   (midx: 0)
	R1 <4> <- 0   (midx: 0)
	R0 <1> <- 9   (midx: 0)
	CALL _MSD_SendCmd   (midx: 0)
	R3 <4> <- POP   (midx: 255)
	R4 <1> <- POP   (midx: 255)
//msd.c,147 :: 		if (!MSD_GetResponse(MSD_RESPONSE_NO_ERROR))
	R4 <1> <- PUSH(R4)   (midx: 255)
	R3 <4> <- PUSH(R3)   (midx: 255)
	R0 <1> <- 0   (midx: 0)
	CALL _MSD_GetResponse   (midx: 0)
	R3 <4> <- POP   (midx: 255)
	R4 <1> <- POP   (midx: 255)
   (midx: 0)
	if (R0) then goto 77   (midx: 0)
//msd.c,149 :: 		if (!MSD_GetResponse(MSD_START_DATA_SINGLE_BLOCK_READ))
	R3 <4> <- PUSH(R3)   (midx: 255)
	R0 <1> <- 254   (midx: 0)
	CALL _MSD_GetResponse   (midx: 0)
	R3 <4> <- POP   (midx: 255)
	if (R0) then goto 76   (midx: 0)
//msd.c,151 :: 		for (i = 0; i < 16; i++)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <4> <- 0   (midx: 0)
	R3 <4> <- R3   (midx: 0)
	R2 <4> <- R2   (midx: 0)
38:   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R2 >= 16) then goto 39   (midx: 2)
//msd.c,154 :: 		CSD_Tab[i] = MSD_ReadByte();
	R1 <4> <- addr(MSD_GetCSDRegister_CSD_Tab_L0)   (midx: 0)
	R1 <4> <-  R1 + R2   (midx: 2)
	FLOC_MSD_GetCSDRegister+28 <4> <- R1   (midx: 0)
	R3 <4> <- PUSH(R3)   (midx: 255)
	R2 <4> <- PUSH(R2)   (midx: 255)
	CALL _MSD_ReadByte   (midx: 0)
	R2 <4> <- POP   (midx: 255)
	R3 <4> <- POP   (midx: 255)
	R1 <4> <- FLOC_MSD_GetCSDRegister+28   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
//msd.c,151 :: 		for (i = 0; i < 16; i++)
	R2 <4> <-  R2 + 1   (midx: 2)
	R2 <4> <- R2   (midx: 0)
//msd.c,155 :: 		}
   (midx: 0)
	R3 <4> <- R3   (midx: 0)
	R2 <4> <- R2   (midx: 0)
	goto	38   (midx: 0)
39:   (midx: 0)
//msd.c,156 :: 		}
	R0 <4> <- R3   (midx: 0)
   (midx: 0)
	goto	37   (midx: 0)
76:   (midx: 0)
//msd.c,149 :: 		if (!MSD_GetResponse(MSD_START_DATA_SINGLE_BLOCK_READ))
	R0 <4> <- R3   (midx: 0)
//msd.c,156 :: 		}
37:   (midx: 0)
//msd.c,158 :: 		MSD_WriteByte(DUMMY);
   (midx: 0)
	R0 <4> <- PUSH(R0)   (midx: 255)
	R0 <1> <- 255   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
	R0 <4> <- POP   (midx: 255)
//msd.c,159 :: 		MSD_WriteByte(DUMMY);
	R0 <4> <- PUSH(R0)   (midx: 255)
	R0 <1> <- 255   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
	R0 <4> <- POP   (midx: 255)
//msd.c,161 :: 		rvalue = MSD_RESPONSE_NO_ERROR;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <1> <- 0   (midx: 0)
	R5 <4> <- R0   (midx: 0)
	R0 <1> <- R1   (midx: 0)
//msd.c,162 :: 		}
	goto	36   (midx: 0)
77:   (midx: 0)
//msd.c,147 :: 		if (!MSD_GetResponse(MSD_RESPONSE_NO_ERROR))
	R0 <1> <- R4   (midx: 0)
	R5 <4> <- R3   (midx: 0)
//msd.c,162 :: 		}
36:   (midx: 0)
//msd.c,165 :: 		MSD_CS_HIGH();
   (midx: 0)
   (midx: 0)
	R2 <4> <- 0   (midx: 0)
	R1 <4> <- addr(LitPtrAbs: 40010C10)   (midx: 0)
	[R1] <4> <- R2   (midx: 0)
//msd.c,167 :: 		MSD_WriteByte(DUMMY);
	R5 <4> <- PUSH(R5)   (midx: 255)
	R0 <1> <- PUSH(R0)   (midx: 255)
	R0 <1> <- 255   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
	R0 <1> <- POP   (midx: 255)
	R5 <4> <- POP   (midx: 255)
//msd.c,170 :: 		MSD_csd->CSDStruct = (CSD_Tab[0] & 0xC0) >> 6;
	R4 <4> <- addr(MSD_GetCSDRegister_CSD_Tab_L0)   (midx: 0)
	R1 <1> <- *R4   (midx: 0)
	R1 <1> <-  R1 & 192   (midx: 0)
	R1 <1> <-  R1 shr 6   (midx: 0)
	[R5] <1> <- R1   (midx: 0)
//msd.c,171 :: 		MSD_csd->SysSpecVersion = (CSD_Tab[0] & 0x3C) >> 2;
	R2 <4> <-  R5 + 1   (midx: 2)
	R1 <1> <- *R4   (midx: 0)
	R1 <1> <-  R1 & 60   (midx: 0)
	R1 <1> <-  R1 shr 2   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,172 :: 		MSD_csd->Reserved1 = CSD_Tab[0] & 0x03;
	R2 <4> <-  R5 + 2   (midx: 2)
	R1 <1> <- *R4   (midx: 0)
	R1 <1> <-  R1 & 3   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,174 :: 		MSD_csd->TAAC = CSD_Tab[1] ;
	R2 <4> <-  R5 + 3   (midx: 2)
	R1 <4> <-  R4 + 1   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,176 :: 		MSD_csd->NSAC = CSD_Tab[2];
	R2 <4> <-  R5 + 4   (midx: 2)
	R1 <4> <-  R4 + 2   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,178 :: 		MSD_csd->MaxBusClkFrec = CSD_Tab[3];
	R2 <4> <-  R5 + 5   (midx: 2)
	R1 <4> <-  R4 + 3   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,180 :: 		MSD_csd->CardComdClasses = CSD_Tab[4] << 4;
	R2 <4> <-  R5 + 6   (midx: 2)
	R1 <4> <-  R4 + 4   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <2> <-  R1 shl 4   (midx: 1)
	[R2] <1> <- R1   (midx: 0)
//msd.c,182 :: 		MSD_csd->CardComdClasses |= (CSD_Tab[5] & 0xF0) >> 4;
	R3 <4> <-  R5 + 6   (midx: 2)
	R1 <4> <-  R4 + 5   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 240   (midx: 0)
	R2 <1> <-  R1 shr 4   (midx: 0)
	R1 <1> <- *R3   (midx: 0)
	R1 <1> <-  R1 | R2   (midx: 0)
	[R3] <1> <- R1   (midx: 0)
//msd.c,183 :: 		MSD_csd->RdBlockLen = CSD_Tab[5] & 0x0F;
	R2 <4> <-  R5 + 7   (midx: 2)
	R1 <4> <-  R4 + 5   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 15   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,185 :: 		MSD_csd->PartBlockRead = (CSD_Tab[6] & 0x80) >> 7;
	R2 <4> <-  R5 + 8   (midx: 2)
	R1 <4> <-  R4 + 6   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 128   (midx: 0)
	R1 <1> <-  R1 shr 7   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,186 :: 		MSD_csd->WrBlockMisalign = (CSD_Tab[6] & 0x40) >> 6;
	R2 <4> <-  R5 + 9   (midx: 2)
	R1 <4> <-  R4 + 6   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 64   (midx: 0)
	R1 <1> <-  R1 shr 6   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,187 :: 		MSD_csd->RdBlockMisalign = (CSD_Tab[6] & 0x20) >> 5;
	R2 <4> <-  R5 + 10   (midx: 2)
	R1 <4> <-  R4 + 6   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 32   (midx: 0)
	R1 <1> <-  R1 shr 5   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,188 :: 		MSD_csd->DSRImpl = (CSD_Tab[6] & 0x10) >> 4;
	R2 <4> <-  R5 + 11   (midx: 2)
	R1 <4> <-  R4 + 6   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 16   (midx: 0)
	R1 <1> <-  R1 shr 4   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,189 :: 		MSD_csd->Reserved2 = 0; /* Reserved */
	R2 <4> <-  R5 + 12   (midx: 2)
	R1 <1> <- 0   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,190 :: 		MSD_csd->DeviceSize = (CSD_Tab[6] & 0x03) << 10;
	R2 <4> <-  R5 + 13   (midx: 2)
	R1 <4> <-  R4 + 6   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 3   (midx: 0)
	R1 <2> <-  R1 shl 10   (midx: 1)
	[R2] <1> <- R1   (midx: 0)
//msd.c,192 :: 		MSD_csd->DeviceSize |= (CSD_Tab[7]) << 2;
	R3 <4> <-  R5 + 13   (midx: 2)
	R1 <4> <-  R4 + 7   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R2 <2> <-  R1 shl 2   (midx: 1)
	R1 <1> <- *R3   (midx: 0)
	R1 <2> <-  R1 | R2   (midx: 1)
	[R3] <1> <- R1   (midx: 0)
//msd.c,194 :: 		MSD_csd->DeviceSize |= (CSD_Tab[8] & 0xC0) >> 6;
	R3 <4> <-  R5 + 13   (midx: 2)
	R1 <4> <-  R4 + 8   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 192   (midx: 0)
	R2 <1> <-  R1 shr 6   (midx: 0)
	R1 <1> <- *R3   (midx: 0)
	R1 <1> <-  R1 | R2   (midx: 0)
	[R3] <1> <- R1   (midx: 0)
//msd.c,195 :: 		MSD_csd->MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
	R2 <4> <-  R5 + 14   (midx: 2)
	R1 <4> <-  R4 + 8   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 56   (midx: 0)
	R1 <1> <-  R1 shr 3   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,196 :: 		MSD_csd->MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07);
	R2 <4> <-  R5 + 15   (midx: 2)
	R1 <4> <-  R4 + 8   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 7   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,198 :: 		MSD_csd->MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
	R2 <4> <-  R5 + 16   (midx: 2)
	R1 <4> <-  R4 + 9   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 224   (midx: 0)
	R1 <1> <-  R1 shr 5   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,199 :: 		MSD_csd->MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
	R2 <4> <-  R5 + 17   (midx: 2)
	R1 <4> <-  R4 + 9   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 28   (midx: 0)
	R1 <1> <-  R1 shr 2   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,200 :: 		MSD_csd->DeviceSizeMul = (CSD_Tab[9] & 0x03) << 1;
	R2 <4> <-  R5 + 18   (midx: 2)
	R1 <4> <-  R4 + 9   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 3   (midx: 0)
	R1 <2> <-  R1 shl 1   (midx: 1)
	[R2] <1> <- R1   (midx: 0)
//msd.c,202 :: 		MSD_csd->DeviceSizeMul |= (CSD_Tab[10] & 0x80) >> 7;
	R3 <4> <-  R5 + 18   (midx: 2)
	R1 <4> <-  R4 + 10   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 128   (midx: 0)
	R2 <1> <-  R1 shr 7   (midx: 0)
	R1 <1> <- *R3   (midx: 0)
	R1 <1> <-  R1 | R2   (midx: 0)
	[R3] <1> <- R1   (midx: 0)
//msd.c,203 :: 		MSD_csd->EraseGrSize = (CSD_Tab[10] & 0x7C) >> 2;
	R2 <4> <-  R5 + 19   (midx: 2)
	R1 <4> <-  R4 + 10   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 124   (midx: 0)
	R1 <1> <-  R1 shr 2   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,204 :: 		MSD_csd->EraseGrMul = (CSD_Tab[10] & 0x03) << 3;
	R2 <4> <-  R5 + 20   (midx: 2)
	R1 <4> <-  R4 + 10   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 3   (midx: 0)
	R1 <2> <-  R1 shl 3   (midx: 1)
	[R2] <1> <- R1   (midx: 0)
//msd.c,206 :: 		MSD_csd->EraseGrMul |= (CSD_Tab[11] & 0xE0) >> 5;
	R3 <4> <-  R5 + 20   (midx: 2)
	R1 <4> <-  R4 + 11   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 224   (midx: 0)
	R2 <1> <-  R1 shr 5   (midx: 0)
	R1 <1> <- *R3   (midx: 0)
	R1 <1> <-  R1 | R2   (midx: 0)
	[R3] <1> <- R1   (midx: 0)
//msd.c,207 :: 		MSD_csd->WrProtectGrSize = (CSD_Tab[11] & 0x1F);
	R2 <4> <-  R5 + 21   (midx: 2)
	R1 <4> <-  R4 + 11   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 31   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,209 :: 		MSD_csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
	R2 <4> <-  R5 + 22   (midx: 2)
	R1 <4> <-  R4 + 12   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 128   (midx: 0)
	R1 <1> <-  R1 shr 7   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,210 :: 		MSD_csd->ManDeflECC = (CSD_Tab[12] & 0x60) >> 5;
	R2 <4> <-  R5 + 23   (midx: 2)
	R1 <4> <-  R4 + 12   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 96   (midx: 0)
	R1 <1> <-  R1 shr 5   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,211 :: 		MSD_csd->WrSpeedFact = (CSD_Tab[12] & 0x1C) >> 2;
	R2 <4> <-  R5 + 24   (midx: 2)
	R1 <4> <-  R4 + 12   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 28   (midx: 0)
	R1 <1> <-  R1 shr 2   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,212 :: 		MSD_csd->MaxWrBlockLen = (CSD_Tab[12] & 0x03) << 2;
	R2 <4> <-  R5 + 25   (midx: 2)
	R1 <4> <-  R4 + 12   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 3   (midx: 0)
	R1 <2> <-  R1 shl 2   (midx: 1)
	[R2] <1> <- R1   (midx: 0)
//msd.c,214 :: 		MSD_csd->MaxWrBlockLen |= (CSD_Tab[13] & 0xc0) >> 6;
	R3 <4> <-  R5 + 25   (midx: 2)
	R1 <4> <-  R4 + 13   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 192   (midx: 0)
	R2 <1> <-  R1 shr 6   (midx: 0)
	R1 <1> <- *R3   (midx: 0)
	R1 <1> <-  R1 | R2   (midx: 0)
	[R3] <1> <- R1   (midx: 0)
//msd.c,215 :: 		MSD_csd->WriteBlockPaPartial = (CSD_Tab[13] & 0x20) >> 5;
	R2 <4> <-  R5 + 26   (midx: 2)
	R1 <4> <-  R4 + 13   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 32   (midx: 0)
	R1 <1> <-  R1 shr 5   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,216 :: 		MSD_csd->Reserved3 = 0;
	R2 <4> <-  R5 + 27   (midx: 2)
	R1 <1> <- 0   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,217 :: 		MSD_csd->ContentProtectAppli = (CSD_Tab[13] & 0x01);
	R2 <4> <-  R5 + 28   (midx: 2)
	R1 <4> <-  R4 + 13   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 1   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,219 :: 		MSD_csd->FileFormatGrouop = (CSD_Tab[14] & 0x80) >> 7;
	R2 <4> <-  R5 + 29   (midx: 2)
	R1 <4> <-  R4 + 14   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 128   (midx: 0)
	R1 <1> <-  R1 shr 7   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,220 :: 		MSD_csd->CopyFlag = (CSD_Tab[14] & 0x40) >> 6;
	R2 <4> <-  R5 + 30   (midx: 2)
	R1 <4> <-  R4 + 14   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 64   (midx: 0)
	R1 <1> <-  R1 shr 6   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,221 :: 		MSD_csd->PermWrProtect = (CSD_Tab[14] & 0x20) >> 5;
	R2 <4> <-  R5 + 31   (midx: 2)
	R1 <4> <-  R4 + 14   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 32   (midx: 0)
	R1 <1> <-  R1 shr 5   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,222 :: 		MSD_csd->TempWrProtect = (CSD_Tab[14] & 0x10) >> 4;
	R2 <4> <-  R5 + 32   (midx: 2)
	R1 <4> <-  R4 + 14   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 16   (midx: 0)
	R1 <1> <-  R1 shr 4   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,223 :: 		MSD_csd->FileFormat = (CSD_Tab[14] & 0x0C) >> 2;
	R2 <4> <-  R5 + 33   (midx: 2)
	R1 <4> <-  R4 + 14   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 12   (midx: 0)
	R1 <1> <-  R1 shr 2   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,224 :: 		MSD_csd->ECC = (CSD_Tab[14] & 0x03);
	R2 <4> <-  R5 + 34   (midx: 2)
	R1 <4> <-  R4 + 14   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 3   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,226 :: 		MSD_csd->CRC = (CSD_Tab[15] & 0xFE) >> 1;
	R2 <4> <-  R5 + 35   (midx: 2)
	R1 <4> <-  R4 + 15   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 254   (midx: 0)
	R1 <1> <-  R1 shr 1   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,227 :: 		MSD_csd->Reserved4 = 1;
   (midx: 0)
	R2 <4> <-  R5 + 36   (midx: 2)
	R1 <1> <- 1   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,230 :: 		return rvalue;
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_MSD_GetCIDRegister:
  begin   (midx: 0)
//msd.c,243 :: 		u8 MSD_GetCIDRegister(sMSD_CID* MSD_cid)
_MSD_GetCIDRegister:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <4> <- R0   (midx: 0)
   (midx: 0)
//msd.c,245 :: 		u32 i = 0;
   (midx: 0)
//msd.c,246 :: 		u8 rvalue = MSD_RESPONSE_FAILURE;
   (midx: 0)
   (midx: 0)
	R4 <-initialize(255)   (midx: 0)
//msd.c,250 :: 		MSD_CS_LOW();
	R2 <4> <- 0   (midx: 0)
	R1 <4> <- addr(LitPtrAbs: 40010C14)   (midx: 0)
	[R1] <4> <- R2   (midx: 0)
//msd.c,251 :: 		Delay_us(1);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//msd.c,254 :: 		MSD_SendCmd(MSD_SEND_CID, 0, 0xFF);
	R4 <1> <- PUSH(R4)   (midx: 255)
	R3 <4> <- PUSH(R3)   (midx: 255)
	R2 <1> <- 255   (midx: 0)
	R1 <4> <- 0   (midx: 0)
	R0 <1> <- 10   (midx: 0)
	CALL _MSD_SendCmd   (midx: 0)
	R3 <4> <- POP   (midx: 255)
	R4 <1> <- POP   (midx: 255)
//msd.c,257 :: 		if (!MSD_GetResponse(MSD_RESPONSE_NO_ERROR))
	R4 <1> <- PUSH(R4)   (midx: 255)
	R3 <4> <- PUSH(R3)   (midx: 255)
	R0 <1> <- 0   (midx: 0)
	CALL _MSD_GetResponse   (midx: 0)
	R3 <4> <- POP   (midx: 255)
	R4 <1> <- POP   (midx: 255)
   (midx: 0)
	if (R0) then goto 79   (midx: 0)
//msd.c,259 :: 		if (!MSD_GetResponse(MSD_START_DATA_SINGLE_BLOCK_READ))
	R3 <4> <- PUSH(R3)   (midx: 255)
	R0 <1> <- 254   (midx: 0)
	CALL _MSD_GetResponse   (midx: 0)
	R3 <4> <- POP   (midx: 255)
	if (R0) then goto 78   (midx: 0)
//msd.c,262 :: 		for (i = 0; i < 16; i++)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <4> <- 0   (midx: 0)
	R3 <4> <- R3   (midx: 0)
	R2 <4> <- R2   (midx: 0)
44:   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R2 >= 16) then goto 45   (midx: 2)
//msd.c,264 :: 		CID_Tab[i] = MSD_ReadByte();
	R1 <4> <- addr(MSD_GetCIDRegister_CID_Tab_L0)   (midx: 0)
	R1 <4> <-  R1 + R2   (midx: 2)
	FLOC_MSD_GetCIDRegister+28 <4> <- R1   (midx: 0)
	R3 <4> <- PUSH(R3)   (midx: 255)
	R2 <4> <- PUSH(R2)   (midx: 255)
	CALL _MSD_ReadByte   (midx: 0)
	R2 <4> <- POP   (midx: 255)
	R3 <4> <- POP   (midx: 255)
	R1 <4> <- FLOC_MSD_GetCIDRegister+28   (midx: 0)
	[R1] <1> <- R0   (midx: 0)
//msd.c,262 :: 		for (i = 0; i < 16; i++)
	R2 <4> <-  R2 + 1   (midx: 2)
	R2 <4> <- R2   (midx: 0)
//msd.c,265 :: 		}
   (midx: 0)
	R3 <4> <- R3   (midx: 0)
	R2 <4> <- R2   (midx: 0)
	goto	44   (midx: 0)
45:   (midx: 0)
//msd.c,266 :: 		}
	R0 <4> <- R3   (midx: 0)
   (midx: 0)
	goto	43   (midx: 0)
78:   (midx: 0)
//msd.c,259 :: 		if (!MSD_GetResponse(MSD_START_DATA_SINGLE_BLOCK_READ))
	R0 <4> <- R3   (midx: 0)
//msd.c,266 :: 		}
43:   (midx: 0)
//msd.c,268 :: 		MSD_WriteByte(DUMMY);
   (midx: 0)
	R0 <4> <- PUSH(R0)   (midx: 255)
	R0 <1> <- 255   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
	R0 <4> <- POP   (midx: 255)
//msd.c,269 :: 		MSD_WriteByte(DUMMY);
	R0 <4> <- PUSH(R0)   (midx: 255)
	R0 <1> <- 255   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
	R0 <4> <- POP   (midx: 255)
//msd.c,271 :: 		rvalue = MSD_RESPONSE_NO_ERROR;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <1> <- 0   (midx: 0)
	R5 <4> <- R0   (midx: 0)
	R0 <1> <- R1   (midx: 0)
//msd.c,272 :: 		}
	goto	42   (midx: 0)
79:   (midx: 0)
//msd.c,257 :: 		if (!MSD_GetResponse(MSD_RESPONSE_NO_ERROR))
	R0 <1> <- R4   (midx: 0)
	R5 <4> <- R3   (midx: 0)
//msd.c,272 :: 		}
42:   (midx: 0)
//msd.c,275 :: 		MSD_CS_HIGH();
   (midx: 0)
   (midx: 0)
	R2 <4> <- 0   (midx: 0)
	R1 <4> <- addr(LitPtrAbs: 40010C10)   (midx: 0)
	[R1] <4> <- R2   (midx: 0)
//msd.c,277 :: 		MSD_WriteByte(DUMMY);
	R5 <4> <- PUSH(R5)   (midx: 255)
	R0 <1> <- PUSH(R0)   (midx: 255)
	R0 <1> <- 255   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
	R0 <1> <- POP   (midx: 255)
	R5 <4> <- POP   (midx: 255)
//msd.c,280 :: 		MSD_cid->ManufacturerID = CID_Tab[0];
	R4 <4> <- addr(MSD_GetCIDRegister_CID_Tab_L0)   (midx: 0)
	R1 <1> <- *R4   (midx: 0)
	[R5] <1> <- R1   (midx: 0)
//msd.c,282 :: 		MSD_cid->OEM_AppliID = CID_Tab[1] << 8;
	R2 <4> <-  R5 + 1   (midx: 2)
	R1 <4> <-  R4 + 1   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <2> <-  R1 shl 8   (midx: 1)
	[R2] <1> <- R1   (midx: 0)
//msd.c,284 :: 		MSD_cid->OEM_AppliID |= CID_Tab[2];
	R3 <4> <-  R5 + 1   (midx: 2)
	R1 <4> <-  R4 + 2   (midx: 2)
	R2 <1> <- *R1   (midx: 0)
	R1 <1> <- *R3   (midx: 0)
	R1 <1> <-  R1 | R2   (midx: 0)
	[R3] <1> <- R1   (midx: 0)
//msd.c,286 :: 		MSD_cid->ProdName1 = CID_Tab[3] << 24;
	R2 <4> <-  R5 + 4   (midx: 2)
	R1 <4> <- 0   (midx: 0)
	[R2] <4> <- R1   (midx: 0)
//msd.c,288 :: 		MSD_cid->ProdName1 |= CID_Tab[4] << 16;
	R3 <4> <-  R5 + 4   (midx: 2)
	R1 <4> <-  R4 + 4   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R2 <2> <-  R1 shl 16   (midx: 1)
	R1 <4> <- *R3   (midx: 0)
	R1 <4> <-  R1 | R2   (midx: 2)
	[R3] <4> <- R1   (midx: 0)
//msd.c,290 :: 		MSD_cid->ProdName1 |= CID_Tab[5] << 8;
	R3 <4> <-  R5 + 4   (midx: 2)
	R1 <4> <-  R4 + 5   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R2 <2> <-  R1 shl 8   (midx: 1)
	R1 <4> <- *R3   (midx: 0)
	R1 <4> <-  R1 | R2   (midx: 2)
	[R3] <4> <- R1   (midx: 0)
//msd.c,292 :: 		MSD_cid->ProdName1 |= CID_Tab[6];
	R3 <4> <-  R5 + 4   (midx: 2)
	R1 <4> <-  R4 + 6   (midx: 2)
	R2 <1> <- *R1   (midx: 0)
	R1 <4> <- *R3   (midx: 0)
	R1 <4> <-  R1 | R2   (midx: 2)
	[R3] <4> <- R1   (midx: 0)
//msd.c,294 :: 		MSD_cid->ProdName2 = CID_Tab[7];
	R2 <4> <-  R5 + 8   (midx: 2)
	R1 <4> <-  R4 + 7   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,296 :: 		MSD_cid->ProdRev = CID_Tab[8];
	R2 <4> <-  R5 + 9   (midx: 2)
	R1 <4> <-  R4 + 8   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,298 :: 		MSD_cid->ProdSN = CID_Tab[9] << 24;
	R2 <4> <-  R5 + 12   (midx: 2)
	R1 <4> <- 0   (midx: 0)
	[R2] <4> <- R1   (midx: 0)
//msd.c,300 :: 		MSD_cid->ProdSN |= CID_Tab[10] << 16;
	R3 <4> <-  R5 + 12   (midx: 2)
	R1 <4> <-  R4 + 10   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R2 <2> <-  R1 shl 16   (midx: 1)
	R1 <4> <- *R3   (midx: 0)
	R1 <4> <-  R1 | R2   (midx: 2)
	[R3] <4> <- R1   (midx: 0)
//msd.c,302 :: 		MSD_cid->ProdSN |= CID_Tab[11] << 8;
	R3 <4> <-  R5 + 12   (midx: 2)
	R1 <4> <-  R4 + 11   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R2 <2> <-  R1 shl 8   (midx: 1)
	R1 <4> <- *R3   (midx: 0)
	R1 <4> <-  R1 | R2   (midx: 2)
	[R3] <4> <- R1   (midx: 0)
//msd.c,304 :: 		MSD_cid->ProdSN |= CID_Tab[12];
	R3 <4> <-  R5 + 12   (midx: 2)
	R1 <4> <-  R4 + 12   (midx: 2)
	R2 <1> <- *R1   (midx: 0)
	R1 <4> <- *R3   (midx: 0)
	R1 <4> <-  R1 | R2   (midx: 2)
	[R3] <4> <- R1   (midx: 0)
//msd.c,306 :: 		MSD_cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
	R3 <4> <-  R5 + 16   (midx: 2)
	R1 <4> <-  R4 + 13   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 240   (midx: 0)
	R2 <1> <-  R1 shr 4   (midx: 0)
	R1 <1> <- *R3   (midx: 0)
	R1 <1> <-  R1 | R2   (midx: 0)
	[R3] <1> <- R1   (midx: 0)
//msd.c,308 :: 		MSD_cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
	R2 <4> <-  R5 + 17   (midx: 2)
	R1 <4> <-  R4 + 13   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 15   (midx: 0)
	R1 <2> <-  R1 shl 8   (midx: 1)
	[R2] <1> <- R1   (midx: 0)
//msd.c,310 :: 		MSD_cid->ManufactDate |= CID_Tab[14];
	R3 <4> <-  R5 + 17   (midx: 2)
	R1 <4> <-  R4 + 14   (midx: 2)
	R2 <1> <- *R1   (midx: 0)
	R1 <1> <- *R3   (midx: 0)
	R1 <1> <-  R1 | R2   (midx: 0)
	[R3] <1> <- R1   (midx: 0)
//msd.c,312 :: 		MSD_cid->CRC = (CID_Tab[15] & 0xFE) >> 1;
	R2 <4> <-  R5 + 18   (midx: 2)
	R1 <4> <-  R4 + 15   (midx: 2)
	R1 <1> <- *R1   (midx: 0)
	R1 <1> <-  R1 & 254   (midx: 0)
	R1 <1> <-  R1 shr 1   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,313 :: 		MSD_cid->Reserved2 = 1;
   (midx: 0)
	R2 <4> <-  R5 + 19   (midx: 2)
	R1 <1> <- 1   (midx: 0)
	[R2] <1> <- R1   (midx: 0)
//msd.c,316 :: 		return rvalue;
   (midx: 0)
	R0 <1> <- R0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
_MSD_GetStatus:
  begin   (midx: 0)
//msd.c,398 :: 		u16 MSD_GetStatus(void)
_MSD_GetStatus:
  begin   (midx: 0)
//msd.c,400 :: 		u16 Status = 0;
   (midx: 0)
//msd.c,403 :: 		MSD_CS_LOW();
	R1 <4> <- 0   (midx: 0)
	R0 <4> <- addr(LitPtrAbs: 40010C14)   (midx: 0)
	[R0] <4> <- R1   (midx: 0)
//msd.c,404 :: 		Delay_us(1);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//msd.c,407 :: 		MSD_SendCmd(MSD_SEND_STATUS, 0, 0xFF);
	R2 <1> <- 255   (midx: 0)
	R1 <4> <- 0   (midx: 0)
	R0 <1> <- 13   (midx: 0)
	CALL _MSD_SendCmd   (midx: 0)
//msd.c,409 :: 		Status = MSD_ReadByte();
	CALL _MSD_ReadByte   (midx: 0)
	MSD_GetStatus_Status_L0 <1> <- R0   (midx: 0)
//msd.c,410 :: 		Status |= (u16)(MSD_ReadByte() << 8);
	CALL _MSD_ReadByte   (midx: 0)
	R0 <2> <-  R0 shl 8   (midx: 1)
	R1 <1> <- R0   (midx: 0)
	R0 <1> <- MSD_GetStatus_Status_L0   (midx: 0)
	R0 <1> <-  R0 | R1   (midx: 0)
	MSD_GetStatus_Status_L0 <1> <- R0   (midx: 0)
//msd.c,413 :: 		MSD_CS_HIGH();
	R1 <4> <- 0   (midx: 0)
	R0 <4> <- addr(LitPtrAbs: 40010C10)   (midx: 0)
	[R0] <4> <- R1   (midx: 0)
//msd.c,415 :: 		MSD_WriteByte(DUMMY);
	R0 <1> <- 255   (midx: 0)
	CALL _MSD_WriteByte   (midx: 0)
//msd.c,417 :: 		return Status;
	R0 <1> <- MSD_GetStatus_Status_L0   (midx: 0)
	return   (midx: 0)
  end
   (midx: 0)
