_LCD_WR_REG:
  begin   (midx: 0)
//Lcd.c,118 :: 		void LCD_WR_REG(unsigned int Reg, unsigned int Data)
_LCD_WR_REG:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <2> <- R0   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <2> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
//Lcd.c,120 :: 		LCD_DATA_OUT=Reg;     //Reg. Addr.
	R2 <4> <- addr(GPIOE_ODR)   (midx: 0)
   (midx: 0)
	[R2] <4> <- R0   (midx: 0)
//Lcd.c,121 :: 		LCD_RS_LOW();         //RS=0,Piont to Index Reg.
	R5 <1> <- 1   (midx: 0)
	R2 <4> <- addr(BR1_GPIOD_BSRR_bit)   (midx: 0)
	[R2] <0> <- R5   (midx: 0)
//Lcd.c,122 :: 		LCD_nWR_LOW();
	R4 <4> <- addr(BR5_GPIOD_BSRR_bit)   (midx: 0)
	[R4] <0> <- R5   (midx: 0)
//Lcd.c,123 :: 		LCD_nWR_HIGH();
	R3 <4> <- addr(BS5_GPIOD_BSRR_bit)   (midx: 0)
	[R3] <0> <- R5   (midx: 0)
//Lcd.c,124 :: 		LCD_RS_HIGH();        //RS=1,Piont to object Reg.
	R2 <4> <- addr(BS1_GPIOD_BSRR_bit)   (midx: 0)
	[R2] <0> <- R5   (midx: 0)
//Lcd.c,125 :: 		LCD_DATA_OUT=Data;    //Reg. Data
	R2 <4> <- addr(GPIOE_ODR)   (midx: 0)
   (midx: 0)
	[R2] <4> <- R1   (midx: 0)
//Lcd.c,126 :: 		LCD_nWR_LOW();
	[R4] <0> <- R5   (midx: 0)
//Lcd.c,127 :: 		LCD_nWR_HIGH();
	[R3] <0> <- R5   (midx: 0)
  end
   (midx: 0)
_LCD_Initial:
  begin   (midx: 0)
//Lcd.c,133 :: 		void LCD_Initial(void)
_LCD_Initial:
  begin   (midx: 0)
//Lcd.c,136 :: 		LCD_DATA_BUS_OUT();   //Set LCD Data Bus as Output Mode
	R1 <4> <- 858993459   (midx: 0)
	R0 <4> <- addr(GPIOE_CRH)   (midx: 0)
	[R0] <4> <- R1   (midx: 0)
	R0 <4> <- addr(GPIOE_CRH)   (midx: 0)
	R1 <4> <- [R0]   (midx: 0)
	R0 <4> <- addr(GPIOE_CRL)   (midx: 0)
	[R0] <4> <- R1   (midx: 0)
//Lcd.c,137 :: 		LCD_nWR_HIGH();
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- addr(BS5_GPIOD_BSRR_bit)   (midx: 0)
	FLOC_LCD_Initial+4 <4> <- R0   (midx: 0)
	[R0] <0> <- R1   (midx: 0)
//Lcd.c,138 :: 		LCD_nRD_HIGH();
	R0 <4> <- addr(BS4_GPIOD_BSRR_bit)   (midx: 0)
	[R0] <0> <- R1   (midx: 0)
//Lcd.c,139 :: 		LCD_RS_HIGH();        //RS=1
	R0 <4> <- addr(BS1_GPIOD_BSRR_bit)   (midx: 0)
	FLOC_LCD_Initial+0 <4> <- R0   (midx: 0)
	[R0] <0> <- R1   (midx: 0)
//Lcd.c,140 :: 		LCD_nRST_HIGH();
	R0 <4> <- addr(BS0_GPIOC_BSRR_bit)   (midx: 0)
	[R0] <0> <- R1   (midx: 0)
//Lcd.c,141 :: 		Delay_ms(1);           //RST=1£¬Delay 1ms
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//Lcd.c,142 :: 		LCD_nRST_LOW();
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- addr(BR0_GPIOC_BSRR_bit)   (midx: 0)
	[R0] <0> <- R1   (midx: 0)
//Lcd.c,143 :: 		Delay_ms(1);          //RST=0 Reset LCD£¬Delay 1ms
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//Lcd.c,144 :: 		LCD_nRST_HIGH();
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- addr(BS0_GPIOC_BSRR_bit)   (midx: 0)
	[R0] <0> <- R1   (midx: 0)
//Lcd.c,145 :: 		Delay_ms(5);          //RST=1£¬Delay 5 ms
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//Lcd.c,147 :: 		LCD_WR_REG(0x00FF, 0x0001);
	R1 <2> <- 1   (midx: 0)
	R0 <2> <- 255   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,148 :: 		LCD_WR_REG(0x00F3, 0x0008);
	R1 <2> <- 8   (midx: 0)
	R0 <2> <- 243   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,149 :: 		LCD_DATA_OUT=0x00F3;
	R1 <4> <- 243   (midx: 0)
	R0 <4> <- addr(GPIOE_ODR)   (midx: 0)
	[R0] <4> <- R1   (midx: 0)
//Lcd.c,150 :: 		LCD_RS_LOW();
	R1 <1> <- 1   (midx: 0)
	R0 <4> <- addr(BR1_GPIOD_BSRR_bit)   (midx: 0)
	[R0] <0> <- R1   (midx: 0)
//Lcd.c,151 :: 		LCD_nWR_LOW();
	R0 <4> <- addr(BR5_GPIOD_BSRR_bit)   (midx: 0)
	[R0] <0> <- R1   (midx: 0)
//Lcd.c,152 :: 		LCD_nWR_HIGH();
	R0 <4> <- FLOC_LCD_Initial+4   (midx: 0)
	[R0] <0> <- R1   (midx: 0)
//Lcd.c,154 :: 		LCD_RS_HIGH();
	R0 <4> <- FLOC_LCD_Initial+0   (midx: 0)
	[R0] <0> <- R1   (midx: 0)
//Lcd.c,156 :: 		LCD_WR_REG(0x0001, 0x0100);    //Output Direct
	R1 <2> <- 256   (midx: 0)
	R0 <2> <- 1   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,157 :: 		LCD_WR_REG(0x0002, 0x0700);    //Line Inversion
	R1 <2> <- 1792   (midx: 0)
	R0 <2> <- 2   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,158 :: 		LCD_WR_REG(0x0003, 0x0030);    //BGR=0,ID=11
	R1 <2> <- 48   (midx: 0)
	R0 <2> <- 3   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,159 :: 		LCD_WR_REG(0x0008, 0x0302);    //Porch Setting
	R1 <2> <- 770   (midx: 0)
	R0 <2> <- 8   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,160 :: 		LCD_WR_REG(0x0009, 0x0000);    //Scan Cycle
	R1 <2> <- 0   (midx: 0)
	R0 <2> <- 9   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,161 :: 		LCD_WR_REG(0x000A, 0x0000);    //FMARK off
	R1 <2> <- 0   (midx: 0)
	R0 <2> <- 10   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,163 :: 		LCD_WR_REG(0x0010, 0x0790);    //Power Control1
	R1 <2> <- 1936   (midx: 0)
	R0 <2> <- 16   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,164 :: 		LCD_WR_REG(0x0011, 0x0005);    //Power Control2
	R1 <2> <- 5   (midx: 0)
	R0 <2> <- 17   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,165 :: 		LCD_WR_REG(0x0012, 0x0000);    //Power Control3
	R1 <2> <- 0   (midx: 0)
	R0 <2> <- 18   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,166 :: 		LCD_WR_REG(0x0013, 0x0000);    //Power Control4
	R1 <2> <- 0   (midx: 0)
	R0 <2> <- 19   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,167 :: 		Delay_ms(100);                  //Delay 100ms
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//Lcd.c,168 :: 		LCD_WR_REG(0x0010, 0x12B0);    //Power Control1
	R1 <2> <- 4784   (midx: 0)
	R0 <2> <- 16   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,169 :: 		Delay_ms(50);                   //delay 50ms
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//Lcd.c,170 :: 		LCD_WR_REG(0x0011, 0x0007);    //Power Control2
	R1 <2> <- 7   (midx: 0)
	R0 <2> <- 17   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,171 :: 		Delay_ms(50);                   //delay 50ms
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//Lcd.c,172 :: 		LCD_WR_REG(0x0012, 0x008C);    //Power Control3
	R1 <2> <- 140   (midx: 0)
	R0 <2> <- 18   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,173 :: 		LCD_WR_REG(0x0013, 0x1700);    //Power Control4
	R1 <2> <- 5888   (midx: 0)
	R0 <2> <- 19   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,174 :: 		LCD_WR_REG(0x0029, 0x001A);    //VCOMH Setting
	R1 <2> <- 26   (midx: 0)
	R0 <2> <- 41   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,175 :: 		Delay_ms(50);                   //delay 50ms
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//Lcd.c,177 :: 		LCD_WR_REG(0x0030, 0x0000);
	R1 <2> <- 0   (midx: 0)
	R0 <2> <- 48   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,178 :: 		LCD_WR_REG(0x0031, 0x0507);
	R1 <2> <- 1287   (midx: 0)
	R0 <2> <- 49   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,179 :: 		LCD_WR_REG(0x0032, 0x0003);
	R1 <2> <- 3   (midx: 0)
	R0 <2> <- 50   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,180 :: 		LCD_WR_REG(0x0035, 0x0200);
	R1 <2> <- 512   (midx: 0)
	R0 <2> <- 53   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,181 :: 		LCD_WR_REG(0x0036, 0x0106);
	R1 <2> <- 262   (midx: 0)
	R0 <2> <- 54   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,182 :: 		LCD_WR_REG(0x0037, 0x0000);
	R1 <2> <- 0   (midx: 0)
	R0 <2> <- 55   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,183 :: 		LCD_WR_REG(0x0038, 0x0507);
	R1 <2> <- 1287   (midx: 0)
	R0 <2> <- 56   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,184 :: 		LCD_WR_REG(0x0039, 0x0104);
	R1 <2> <- 260   (midx: 0)
	R0 <2> <- 57   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,185 :: 		LCD_WR_REG(0x003C, 0x0200);
	R1 <2> <- 512   (midx: 0)
	R0 <2> <- 60   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,186 :: 		LCD_WR_REG(0x003D, 0x0005);
	R1 <2> <- 5   (midx: 0)
	R0 <2> <- 61   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,188 :: 		LCD_WR_REG(0x0050, 0x0000);
	R1 <2> <- 0   (midx: 0)
	R0 <2> <- 80   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,189 :: 		LCD_WR_REG(0x0051, 0x00EF);
	R1 <2> <- 239   (midx: 0)
	R0 <2> <- 81   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,190 :: 		LCD_WR_REG(0x0052, 0x0000);
	R1 <2> <- 0   (midx: 0)
	R0 <2> <- 82   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,191 :: 		LCD_WR_REG(0x0053, 0x013F);
	R1 <2> <- 319   (midx: 0)
	R0 <2> <- 83   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,193 :: 		LCD_WR_REG(0x0060, 0xA700);
	R1 <2> <- 42752   (midx: 0)
	R0 <2> <- 96   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,194 :: 		LCD_WR_REG(0x0061, 0x0001);
	R1 <2> <- 1   (midx: 0)
	R0 <2> <- 97   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,195 :: 		LCD_WR_REG(0x0090, 0x0033);
	R1 <2> <- 51   (midx: 0)
	R0 <2> <- 144   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,196 :: 		LCD_WR_REG(0x0007, 0x0133);
	R1 <2> <- 307   (midx: 0)
	R0 <2> <- 7   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,197 :: 		Delay_ms(50);                   //delay 50ms
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
  end
   (midx: 0)
_Point_SCR:
  begin   (midx: 0)
//Lcd.c,203 :: 		void Point_SCR(unsigned int x0, unsigned int y0)
_Point_SCR:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
	R6 <2> <- R0   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <2> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
//Lcd.c,205 :: 		LCD_WR_REG(0x0020,y0);
   (midx: 0)
	R1 <2> <- R1   (midx: 0)
	R0 <2> <- 32   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,206 :: 		LCD_WR_REG(0x0021,x0);
   (midx: 0)
	R1 <2> <- R6   (midx: 0)
	R0 <2> <- 33   (midx: 0)
	CALL _LCD_WR_REG   (midx: 0)
//Lcd.c,207 :: 		LCD_DATA_OUT=0x0022;  //DRAM Reg.
	R3 <4> <- 34   (midx: 0)
	R2 <4> <- addr(GPIOE_ODR)   (midx: 0)
	[R2] <4> <- R3   (midx: 0)
//Lcd.c,208 :: 		LCD_RS_LOW();
	R4 <1> <- 1   (midx: 0)
	R2 <4> <- addr(BR1_GPIOD_BSRR_bit)   (midx: 0)
	[R2] <0> <- R4   (midx: 0)
//Lcd.c,209 :: 		LCD_nWR_LOW();
	R3 <4> <- addr(BR5_GPIOD_BSRR_bit)   (midx: 0)
	[R3] <0> <- R4   (midx: 0)
//Lcd.c,210 :: 		LCD_nWR_HIGH();
	R2 <4> <- addr(BS5_GPIOD_BSRR_bit)   (midx: 0)
	[R2] <0> <- R4   (midx: 0)
//Lcd.c,211 :: 		LCD_nWR_LOW();
	[R3] <0> <- R4   (midx: 0)
//Lcd.c,212 :: 		LCD_nWR_HIGH();
	[R2] <0> <- R4   (midx: 0)
//Lcd.c,213 :: 		LCD_RS_HIGH();
	R2 <4> <- addr(BS1_GPIOD_BSRR_bit)   (midx: 0)
	[R2] <0> <- R4   (midx: 0)
  end
   (midx: 0)
_Set_Pixel:
  begin   (midx: 0)
//Lcd.c,218 :: 		void Set_Pixel(unsigned int Color)
_Set_Pixel:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <2> <- R0   (midx: 0)
   (midx: 0)
//Lcd.c,220 :: 		LCD_DATA_OUT=Color;   //Color Data
	R1 <4> <- addr(GPIOE_ODR)   (midx: 0)
   (midx: 0)
	[R1] <4> <- R0   (midx: 0)
//Lcd.c,221 :: 		LCD_nWR_LOW();
	R2 <1> <- 1   (midx: 0)
	R1 <4> <- addr(BR5_GPIOD_BSRR_bit)   (midx: 0)
	[R1] <0> <- R2   (midx: 0)
//Lcd.c,222 :: 		LCD_nWR_HIGH();
	R1 <4> <- addr(BS5_GPIOD_BSRR_bit)   (midx: 0)
	[R1] <0> <- R2   (midx: 0)
  end
   (midx: 0)
_Clear_Screen:
  begin   (midx: 0)
//Lcd.c,228 :: 		void Clear_Screen(unsigned int Color)
_Clear_Screen:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R7 <2> <- R0   (midx: 0)
   (midx: 0)
//Lcd.c,231 :: 		Point_SCR(0, 0);    //X_pos=0£¬Y_pos=0
	R1 <2> <- 0   (midx: 0)
	R0 <2> <- 0   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,232 :: 		for(i=0; i<240*320; ++i)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <4> <- 0   (midx: 0)
	R3 <2> <- R7   (midx: 0)
	R4 <4> <- R4   (midx: 0)
8:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R4 >= 76800) then goto 9   (midx: 2)
//Lcd.c,233 :: 		Set_Pixel(Color);
   (midx: 0)
	R0 <2> <- R3   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
//Lcd.c,232 :: 		for(i=0; i<240*320; ++i)
	R4 <4> <-  R4 + 1   (midx: 2)
	R4 <4> <- R4   (midx: 0)
//Lcd.c,233 :: 		Set_Pixel(Color);
   (midx: 0)
   (midx: 0)
	R3 <2> <- R3   (midx: 0)
	R4 <4> <- R4   (midx: 0)
	goto	8   (midx: 0)
9:   (midx: 0)
  end
   (midx: 0)
_Display_Frame:
  begin   (midx: 0)
//Lcd.c,238 :: 		void Display_Frame(void)
_Display_Frame:
  begin   (midx: 0)
//Lcd.c,241 :: 		for(i=0; i<320; ++i) {
   (midx: 0)
   (midx: 0)
	R7 <2> <- 0   (midx: 0)
	R7 <2> <- R7   (midx: 0)
11:   (midx: 0)
   (midx: 0)
	if ( R7 >= 320) then goto 12   (midx: 1)
//Lcd.c,242 :: 		Point_SCR(i,0);
	R1 <2> <- 0   (midx: 0)
	R0 <2> <- R7   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,243 :: 		for(j=0; j<MIN_Y-1; ++j) Set_Pixel(PANEL);
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <2> <- 0   (midx: 0)
	R4 <2> <- R7   (midx: 0)
	R3 <2> <- R3   (midx: 0)
14:   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R3 >= 18) then goto 15   (midx: 1)
	R0 <2> <- 65504   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
	R3 <2> <-  R3 + 1   (midx: 1)
	R3 <2> <- R3   (midx: 0)
   (midx: 0)
	R4 <2> <- R4   (midx: 0)
	R3 <2> <- R3   (midx: 0)
	goto	14   (midx: 0)
15:   (midx: 0)
//Lcd.c,241 :: 		for(i=0; i<320; ++i) {
   (midx: 0)
	R7 <2> <-  R4 + 1   (midx: 1)
   (midx: 0)
	R7 <2> <- R7   (midx: 0)
//Lcd.c,244 :: 		}
   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	goto	11   (midx: 0)
12:   (midx: 0)
//Lcd.c,245 :: 		for(i=0; i<320; ++i) {
   (midx: 0)
   (midx: 0)
	R7 <2> <- 0   (midx: 0)
	R7 <2> <- R7   (midx: 0)
17:   (midx: 0)
   (midx: 0)
	if ( R7 >= 320) then goto 18   (midx: 1)
//Lcd.c,246 :: 		Point_SCR(i,MAX_Y+3);
	R1 <2> <- 222   (midx: 0)
	R0 <2> <- R7   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,247 :: 		for(j=MAX_Y+3; j<240; ++j) Set_Pixel(PANEL);
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <2> <- 222   (midx: 0)
	R4 <2> <- R7   (midx: 0)
	R3 <2> <- R3   (midx: 0)
20:   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R3 >= 240) then goto 21   (midx: 1)
	R0 <2> <- 65504   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
	R3 <2> <-  R3 + 1   (midx: 1)
	R3 <2> <- R3   (midx: 0)
   (midx: 0)
	R4 <2> <- R4   (midx: 0)
	R3 <2> <- R3   (midx: 0)
	goto	20   (midx: 0)
21:   (midx: 0)
//Lcd.c,245 :: 		for(i=0; i<320; ++i) {
   (midx: 0)
	R0 <2> <-  R4 + 1   (midx: 1)
   (midx: 0)
	R7 <2> <- R0   (midx: 0)
//Lcd.c,248 :: 		}
   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	goto	17   (midx: 0)
18:   (midx: 0)
  end
   (midx: 0)
_Display_Grid:
  begin   (midx: 0)
//Lcd.c,253 :: 		void Display_Grid(void)
_Display_Grid:
  begin   (midx: 0)
//Lcd.c,256 :: 		for(j=MIN_Y; j<=MAX_Y; j+=25)  for(i=MIN_X; i<MAX_X+1; ++i){
   (midx: 0)
   (midx: 0)
	R7 <2> <- 19   (midx: 0)
	R7 <2> <- R7   (midx: 0)
23:   (midx: 0)
   (midx: 0)
	if ( R7 > 219) then goto 24   (midx: 1)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <2> <- 1   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	R8 <2> <- R0   (midx: 0)
26:   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R8 >= 302) then goto 27   (midx: 1)
//Lcd.c,257 :: 		Point_SCR(i,j);
	R1 <2> <- R7   (midx: 0)
	R0 <2> <- R8   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,258 :: 		Set_Pixel(GRID);
	R0 <2> <- 29582   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
//Lcd.c,256 :: 		for(j=MIN_Y; j<=MAX_Y; j+=25)  for(i=MIN_X; i<MAX_X+1; ++i){
	R8 <2> <-  R8 + 1   (midx: 1)
	R8 <2> <- R8   (midx: 0)
//Lcd.c,259 :: 		}
   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	goto	26   (midx: 0)
27:   (midx: 0)
//Lcd.c,256 :: 		for(j=MIN_Y; j<=MAX_Y; j+=25)  for(i=MIN_X; i<MAX_X+1; ++i){
	R7 <2> <-  R7 + 25   (midx: 1)
	R7 <2> <- R7   (midx: 0)
//Lcd.c,259 :: 		}
   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	goto	23   (midx: 0)
24:   (midx: 0)
//Lcd.c,260 :: 		for(i=MIN_X;i<=MAX_X; i+=25){
   (midx: 0)
   (midx: 0)
	R7 <2> <- 1   (midx: 0)
	R7 <2> <- R7   (midx: 0)
29:   (midx: 0)
   (midx: 0)
	R0 <4> <- 301   (midx: 0)
	if ( R7 > R0) then goto 30   (midx: 1)
//Lcd.c,261 :: 		Point_SCR(i,MIN_Y);
	R1 <2> <- 19   (midx: 0)
	R0 <2> <- R7   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,262 :: 		for(j=MIN_Y; j<=MAX_Y; ++j) Set_Pixel(GRID);
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <2> <- 19   (midx: 0)
	R4 <2> <- R7   (midx: 0)
	R3 <2> <- R3   (midx: 0)
32:   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R3 > 219) then goto 33   (midx: 1)
	R0 <2> <- 29582   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
	R3 <2> <-  R3 + 1   (midx: 1)
	R3 <2> <- R3   (midx: 0)
   (midx: 0)
	R4 <2> <- R4   (midx: 0)
	R3 <2> <- R3   (midx: 0)
	goto	32   (midx: 0)
33:   (midx: 0)
//Lcd.c,260 :: 		for(i=MIN_X;i<=MAX_X; i+=25){
   (midx: 0)
	R7 <2> <-  R4 + 25   (midx: 1)
   (midx: 0)
	R7 <2> <- R7   (midx: 0)
//Lcd.c,263 :: 		}
   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	goto	29   (midx: 0)
30:   (midx: 0)
//Lcd.c,264 :: 		for(i=MIN_X+5; i<MAX_X; i+=5){
   (midx: 0)
   (midx: 0)
	R7 <2> <- 6   (midx: 0)
	R7 <2> <- R7   (midx: 0)
35:   (midx: 0)
   (midx: 0)
	R0 <4> <- 301   (midx: 0)
	if ( R7 >= R0) then goto 36   (midx: 1)
//Lcd.c,265 :: 		Point_SCR(i,MIN_Y+1);
	R1 <2> <- 20   (midx: 0)
	R0 <2> <- R7   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,266 :: 		Set_Pixel(GRID);
	R0 <2> <- 29582   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
//Lcd.c,267 :: 		Point_SCR(i,MAX_Y-1);
	R1 <2> <- 218   (midx: 0)
	R0 <2> <- R7   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,268 :: 		Set_Pixel(GRID);
	R0 <2> <- 29582   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
//Lcd.c,269 :: 		Point_SCR(i,((MIN_Y+MAX_Y)/2+1));
	R1 <2> <- 120   (midx: 0)
	R0 <2> <- R7   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,270 :: 		Set_Pixel(GRID);
	R0 <2> <- 29582   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
//Lcd.c,271 :: 		Point_SCR(i,((MIN_Y+MAX_Y)/2-1));
	R1 <2> <- 118   (midx: 0)
	R0 <2> <- R7   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,272 :: 		Set_Pixel(GRID);
	R0 <2> <- 29582   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
//Lcd.c,264 :: 		for(i=MIN_X+5; i<MAX_X; i+=5){
	R7 <2> <-  R7 + 5   (midx: 1)
	R7 <2> <- R7   (midx: 0)
//Lcd.c,273 :: 		}
   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	goto	35   (midx: 0)
36:   (midx: 0)
//Lcd.c,274 :: 		for(j=MIN_Y+5; j<MAX_Y; j+=5){
   (midx: 0)
   (midx: 0)
	R7 <2> <- 24   (midx: 0)
	R7 <2> <- R7   (midx: 0)
38:   (midx: 0)
   (midx: 0)
	if ( R7 >= 219) then goto 39   (midx: 1)
//Lcd.c,275 :: 		Point_SCR(MIN_X+1,j);
	R1 <2> <- R7   (midx: 0)
	R0 <2> <- 2   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,276 :: 		Set_Pixel(GRID);
	R0 <2> <- 29582   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
//Lcd.c,277 :: 		Point_SCR(MAX_X-1,j);
	R1 <2> <- R7   (midx: 0)
	R0 <2> <- 300   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,278 :: 		Set_Pixel(GRID);
	R0 <2> <- 29582   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
//Lcd.c,279 :: 		Point_SCR(((MIN_X+MAX_X)/2+1),j);
	R1 <2> <- R7   (midx: 0)
	R0 <2> <- 152   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,280 :: 		Set_Pixel(GRID);
	R0 <2> <- 29582   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
//Lcd.c,281 :: 		Point_SCR(((MIN_X+MAX_X)/2-1),j);
	R1 <2> <- R7   (midx: 0)
	R0 <2> <- 150   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,282 :: 		Set_Pixel(GRID);
	R0 <2> <- 29582   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
//Lcd.c,274 :: 		for(j=MIN_Y+5; j<MAX_Y; j+=5){
	R7 <2> <-  R7 + 5   (midx: 1)
	R7 <2> <- R7   (midx: 0)
//Lcd.c,283 :: 		}
   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	goto	38   (midx: 0)
39:   (midx: 0)
  end
   (midx: 0)
_Display_Char:
  begin   (midx: 0)
//Lcd.c,290 :: 		void Display_Char(unsigned int x0, unsigned int y0, unsigned int Color, unsigned char Mode, char s)
_Display_Char:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R9 <2> <- R0   (midx: 0)
	R8 <2> <- R1   (midx: 0)
	R7 <2> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R10 <1> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R11 <1> <- FARG_Display_Char_s   (midx: 0)
//Lcd.c,294 :: 		Point_SCR(x0, y0);
	R1 <2> <- R8   (midx: 0)
	R0 <2> <- R9   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,295 :: 		for (j=0; j<14;++j){
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R5 <2> <- 0   (midx: 0)
	R9 <2> <- R9   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	R6 <1> <- R10   (midx: 0)
	R3 <1> <- R11   (midx: 0)
	R5 <2> <- R5   (midx: 0)
41:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R5 >= 14) then goto 42   (midx: 5)
//Lcd.c,296 :: 		if(Mode==0) Set_Pixel(BLACK);   //Normal replace Display
	if ( R6 != 0) then goto 44   (midx: 0)
	R0 <2> <- 0   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
44:   (midx: 0)
//Lcd.c,297 :: 		if(Mode==1) Set_Pixel(Color);   //Inverse replace Display
	if ( R6 != 1) then goto 45   (midx: 0)
	R0 <2> <- R7   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
45:   (midx: 0)
//Lcd.c,295 :: 		for (j=0; j<14;++j){
	R5 <2> <-  R5 + 1   (midx: 1)
	R5 <2> <- R5   (midx: 0)
//Lcd.c,298 :: 		}
   (midx: 0)
	R9 <2> <- R9   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	R6 <1> <- R6   (midx: 0)
	R3 <1> <- R3   (midx: 0)
	R5 <2> <- R5   (midx: 0)
	goto	41   (midx: 0)
42:   (midx: 0)
//Lcd.c,300 :: 		x0++;
	R9 <2> <-  R9 + 1   (midx: 1)
	R9 <2> <- R9   (midx: 0)
//Lcd.c,301 :: 		if (s!=0) {
	if ( R3 = 0) then goto 46   (midx: 0)
//Lcd.c,302 :: 		unsigned const int *scanline=Char_Dot+((s-0x22)*8);
	R4 <2> <-  R3 - 34   (midx: 0)
	R4 <2> <-  R4 shl 3   (midx: 5)
	R5 <4> <-  R4 shl 1   (midx: 2)
	R4 <4> <- #_Char_Dot   (midx: 0)
	R4 <4> <-  R4 + R5   (midx: 2)
   (midx: 0)
	R1 <4> <- R4   (midx: 0)
//Lcd.c,303 :: 		for(i=0;i<8;++i){
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <2> <- 0   (midx: 0)
	R11 <2> <- R7   (midx: 0)
	R7 <2> <- R0   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	R12 <1> <- R6   (midx: 0)
	R10 <2> <- R8   (midx: 0)
	R8 <4> <- R1   (midx: 0)
	R9 <2> <- R9   (midx: 0)
47:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R7 >= 8) then goto 48   (midx: 5)
//Lcd.c,304 :: 		Point_SCR(x0+i, y0);
	R4 <2> <-  R9 + R7   (midx: 1)
	R0 <1> <- PUSH(R0)   (midx: 255)
	R1 <2> <- R10   (midx: 0)
	R0 <2> <- R4   (midx: 0)
	CALL _Point_SCR   (midx: 0)
	R0 <1> <- POP   (midx: 255)
//Lcd.c,305 :: 		if((s==0x20)||(s==0x21)) b=0x0000;
	if ( R0 = 32) then goto 133   (midx: 0)
	if ( R0 = 33) then goto 132   (midx: 0)
	goto	52   (midx: 0)
133:   (midx: 0)
132:   (midx: 0)
   (midx: 0)
	R1 <2> <- 0   (midx: 0)
   (midx: 0)
	R1 <2> <- R1   (midx: 0)
	goto	53   (midx: 0)
52:   (midx: 0)
//Lcd.c,306 :: 		else                       b=scanline[i];
	R4 <4> <-  R7 shl 1   (midx: 2)
	R4 <4> <-  R8 + R4   (midx: 2)
	R1 <2> <- *R4   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <2> <- R1   (midx: 0)
	R1 <2> <- R1   (midx: 0)
53:   (midx: 0)
//Lcd.c,307 :: 		if((s==0x21)&&(i==4)) break;
   (midx: 0)
	if ( R0 != 33) then goto 135   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R7 != 4) then goto 134   (midx: 5)
130:   (midx: 0)
	goto	48   (midx: 0)
135:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
134:   (midx: 0)
//Lcd.c,308 :: 		for(j=0;j<14;++j){
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R6 <2> <- 0   (midx: 0)
	R5 <2> <- R7   (midx: 0)
	R7 <2> <- R1   (midx: 0)
	R8 <4> <- R8   (midx: 0)
	R9 <2> <- R9   (midx: 0)
	R10 <2> <- R10   (midx: 0)
	R11 <2> <- R11   (midx: 0)
	R12 <1> <- R12   (midx: 0)
	R3 <1> <- R0   (midx: 0)
	R6 <2> <- R6   (midx: 0)
57:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R6 >= 14) then goto 58   (midx: 5)
//Lcd.c,309 :: 		if(b&4) {
	R4 <2> <-  R7 & 4   (midx: 5)
	if (!R4) then goto 60   (midx: 0)
//Lcd.c,310 :: 		if(Mode==0) Set_Pixel(Color);
	if ( R12 != 0) then goto 61   (midx: 0)
	R0 <2> <- R11   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
61:   (midx: 0)
//Lcd.c,311 :: 		if(Mode==1) Set_Pixel(BLACK);
	if ( R12 != 1) then goto 62   (midx: 0)
	R0 <2> <- 0   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
62:   (midx: 0)
//Lcd.c,312 :: 		if(Mode==2) Set_Pixel(Color);
	if ( R12 != 2) then goto 63   (midx: 0)
	R0 <2> <- R11   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
63:   (midx: 0)
//Lcd.c,313 :: 		if(Mode==3) Set_Pixel(BLACK);
	if ( R12 != 3) then goto 64   (midx: 0)
	R0 <2> <- 0   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
64:   (midx: 0)
//Lcd.c,314 :: 		} else {
	goto	65   (midx: 0)
60:   (midx: 0)
//Lcd.c,315 :: 		if(Mode==0) Set_Pixel(BLACK);
	if ( R12 != 0) then goto 66   (midx: 0)
	R0 <2> <- 0   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
66:   (midx: 0)
//Lcd.c,316 :: 		if(Mode==1) Set_Pixel(Color);
	if ( R12 != 1) then goto 67   (midx: 0)
	R0 <2> <- R11   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
67:   (midx: 0)
//Lcd.c,317 :: 		if(Mode==2) Set_Pixel(BLACK);
	if ( R12 != 2) then goto 68   (midx: 0)
	R0 <2> <- 0   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
68:   (midx: 0)
//Lcd.c,318 :: 		if(Mode==3) Set_Pixel(Color);
	if ( R12 != 3) then goto 69   (midx: 0)
	R0 <2> <- R11   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
69:   (midx: 0)
//Lcd.c,319 :: 		}
65:   (midx: 0)
//Lcd.c,320 :: 		b>>=1;
   (midx: 0)
	R4 <2> <-  R7 shr 1   (midx: 5)
   (midx: 0)
	R0 <2> <- R4   (midx: 0)
//Lcd.c,308 :: 		for(j=0;j<14;++j){
	R6 <2> <-  R6 + 1   (midx: 1)
	R6 <2> <- R6   (midx: 0)
//Lcd.c,321 :: 		}
   (midx: 0)
   (midx: 0)
	R5 <2> <- R5   (midx: 0)
	R8 <4> <- R8   (midx: 0)
	R9 <2> <- R9   (midx: 0)
	R10 <2> <- R10   (midx: 0)
	R11 <2> <- R11   (midx: 0)
	R12 <1> <- R12   (midx: 0)
	R3 <1> <- R3   (midx: 0)
	R7 <2> <- R0   (midx: 0)
	R6 <2> <- R6   (midx: 0)
	goto	57   (midx: 0)
58:   (midx: 0)
//Lcd.c,303 :: 		for(i=0;i<8;++i){
   (midx: 0)
	R4 <2> <-  R5 + 1   (midx: 1)
   (midx: 0)
	R7 <2> <- R4   (midx: 0)
//Lcd.c,322 :: 		}
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <1> <- R3   (midx: 0)
	R12 <1> <- R12   (midx: 0)
	R11 <2> <- R11   (midx: 0)
	R10 <2> <- R10   (midx: 0)
	R9 <2> <- R9   (midx: 0)
	R8 <4> <- R8   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	goto	47   (midx: 0)
48:   (midx: 0)
//Lcd.c,323 :: 		if(s==0x21) x0 +=4;
   (midx: 0)
   (midx: 0)
	if ( R0 != 33) then goto 70   (midx: 0)
	goto	71   (midx: 0)
70:   (midx: 0)
//Lcd.c,324 :: 		else  x0 += 8;
71:   (midx: 0)
//Lcd.c,325 :: 		}
46:   (midx: 0)
  end
   (midx: 0)
_Display_Str:
  begin   (midx: 0)
//Lcd.c,331 :: 		void Display_Str(unsigned int x0, unsigned int y0, unsigned int Color, unsigned char Mode, unsigned const char *s)
_Display_Str:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R7 <2> <- R0   (midx: 0)
	R9 <2> <- R1   (midx: 0)
	R8 <2> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R10 <1> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R11 <4> <- FARG_Display_Str_s   (midx: 0)
//Lcd.c,334 :: 		Point_SCR(x0, y0);
	R1 <2> <- R9   (midx: 0)
	R0 <2> <- R7   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,335 :: 		for (j=0; j<14;++j){
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R6 <2> <- 0   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	R9 <2> <- R9   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	R5 <1> <- R10   (midx: 0)
	R3 <4> <- R11   (midx: 0)
	R6 <2> <- R6   (midx: 0)
72:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R6 >= 14) then goto 73   (midx: 5)
//Lcd.c,336 :: 		if(Mode==0) Set_Pixel(BLACK);   //Normal replace Display
	if ( R5 != 0) then goto 75   (midx: 0)
	R0 <2> <- 0   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
75:   (midx: 0)
//Lcd.c,337 :: 		if(Mode==1) Set_Pixel(Color);   //Inverse replace Display
	if ( R5 != 1) then goto 76   (midx: 0)
	R0 <2> <- R8   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
76:   (midx: 0)
//Lcd.c,335 :: 		for (j=0; j<14;++j){
	R6 <2> <-  R6 + 1   (midx: 1)
	R6 <2> <- R6   (midx: 0)
//Lcd.c,338 :: 		}
   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	R9 <2> <- R9   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	R5 <1> <- R5   (midx: 0)
	R3 <4> <- R3   (midx: 0)
	R6 <2> <- R6   (midx: 0)
	goto	72   (midx: 0)
73:   (midx: 0)
//Lcd.c,339 :: 		x0++;
   (midx: 0)
	R1 <2> <-  R7 + 1   (midx: 1)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <2> <- R1   (midx: 0)
	R0 <4> <- R3   (midx: 0)
	R7 <1> <- R5   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	R9 <2> <- R9   (midx: 0)
	R1 <2> <- R1   (midx: 0)
//Lcd.c,340 :: 		while (*s!=0) {
77:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <1> <- *R0   (midx: 0)
	if ( R4 = 0) then goto 78   (midx: 0)
//Lcd.c,341 :: 		unsigned const int *scanline=Char_Dot+((*s-0x22)*8);
	R4 <1> <- *R0   (midx: 0)
	R4 <2> <-  R4 - 34   (midx: 0)
	R4 <2> <-  R4 shl 3   (midx: 5)
	R5 <4> <-  R4 shl 1   (midx: 2)
	R4 <4> <- #_Char_Dot   (midx: 0)
	R12 <4> <-  R4 + R5   (midx: 2)
   (midx: 0)
	R12 <4> <- R12   (midx: 0)
//Lcd.c,342 :: 		for(i=0;i<8;++i){
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R11 <2> <- 0   (midx: 0)
	R10 <4> <- R0   (midx: 0)
	R0 <2> <- R1   (midx: 0)
	R9 <2> <- R9   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	R7 <1> <- R7   (midx: 0)
	R12 <4> <- R12   (midx: 0)
	R11 <2> <- R11   (midx: 0)
79:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R11 >= 8) then goto 80   (midx: 5)
//Lcd.c,343 :: 		Point_SCR(x0+i, y0);
	R4 <2> <-  R0 + R11   (midx: 1)
	R0 <2> <- PUSH(R0)   (midx: 255)
	R1 <2> <- R9   (midx: 0)
	R0 <2> <- R4   (midx: 0)
	CALL _Point_SCR   (midx: 0)
	R0 <2> <- POP   (midx: 255)
//Lcd.c,344 :: 		if((*s==0x20)||(*s==0x21)) b=0x0000;
	R4 <1> <- *R10   (midx: 0)
	if ( R4 = 32) then goto 139   (midx: 0)
	R4 <1> <- *R10   (midx: 0)
	if ( R4 = 33) then goto 138   (midx: 0)
	goto	84   (midx: 0)
139:   (midx: 0)
138:   (midx: 0)
	R4 <2> <- 0   (midx: 0)
	Display_Str_b_L0_31 <2> <- R4   (midx: 0)
	goto	85   (midx: 0)
84:   (midx: 0)
//Lcd.c,345 :: 		else                       b=scanline[i];
	R4 <4> <-  R11 shl 1   (midx: 2)
	R4 <4> <-  R12 + R4   (midx: 2)
	R4 <2> <- *R4   (midx: 0)
	Display_Str_b_L0_32 <2> <- R4   (midx: 0)
85:   (midx: 0)
//Lcd.c,346 :: 		if((*s==0x21)&&(i==4)) break;
	R4 <1> <- *R10   (midx: 0)
	if ( R4 != 33) then goto 141   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R11 != 4) then goto 140   (midx: 5)
136:   (midx: 0)
	goto	80   (midx: 0)
141:   (midx: 0)
   (midx: 0)
   (midx: 0)
140:   (midx: 0)
//Lcd.c,347 :: 		for(j=0;j<14;++j){
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R5 <2> <- 0   (midx: 0)
	R6 <2> <- R11   (midx: 0)
	R12 <4> <- R12   (midx: 0)
	R10 <4> <- R10   (midx: 0)
	R7 <1> <- R7   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	R9 <2> <- R9   (midx: 0)
	R3 <2> <- R0   (midx: 0)
	R5 <2> <- R5   (midx: 0)
89:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R5 >= 14) then goto 90   (midx: 5)
//Lcd.c,348 :: 		if(b&4) {
	R4 <2> <- Display_Str_b_L0_36   (midx: 0)
	R4 <2> <-  R4 & 4   (midx: 5)
	if (!R4) then goto 92   (midx: 0)
//Lcd.c,349 :: 		if(Mode==0) Set_Pixel(Color);
	if ( R7 != 0) then goto 93   (midx: 0)
	R0 <2> <- R8   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
93:   (midx: 0)
//Lcd.c,350 :: 		if(Mode==1) Set_Pixel(BLACK);
	if ( R7 != 1) then goto 94   (midx: 0)
	R0 <2> <- 0   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
94:   (midx: 0)
//Lcd.c,351 :: 		if(Mode==2) Set_Pixel(Color);
	if ( R7 != 2) then goto 95   (midx: 0)
	R0 <2> <- R8   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
95:   (midx: 0)
//Lcd.c,352 :: 		if(Mode==3) Set_Pixel(BLACK);
	if ( R7 != 3) then goto 96   (midx: 0)
	R0 <2> <- 0   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
96:   (midx: 0)
//Lcd.c,353 :: 		} else {
	goto	97   (midx: 0)
92:   (midx: 0)
//Lcd.c,354 :: 		if(Mode==0) Set_Pixel(BLACK);
	if ( R7 != 0) then goto 98   (midx: 0)
	R0 <2> <- 0   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
98:   (midx: 0)
//Lcd.c,355 :: 		if(Mode==1) Set_Pixel(Color);
	if ( R7 != 1) then goto 99   (midx: 0)
	R0 <2> <- R8   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
99:   (midx: 0)
//Lcd.c,356 :: 		if(Mode==2) Set_Pixel(BLACK);
	if ( R7 != 2) then goto 100   (midx: 0)
	R0 <2> <- 0   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
100:   (midx: 0)
//Lcd.c,357 :: 		if(Mode==3) Set_Pixel(Color);
	if ( R7 != 3) then goto 101   (midx: 0)
	R0 <2> <- R8   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
101:   (midx: 0)
//Lcd.c,358 :: 		}
97:   (midx: 0)
//Lcd.c,359 :: 		b>>=1;
	R4 <2> <- Display_Str_b_L0_36   (midx: 0)
	R4 <2> <-  R4 shr 1   (midx: 5)
	Display_Str_b_L0_45 <2> <- R4   (midx: 0)
//Lcd.c,347 :: 		for(j=0;j<14;++j){
	R5 <2> <-  R5 + 1   (midx: 1)
	R5 <2> <- R5   (midx: 0)
//Lcd.c,360 :: 		}
   (midx: 0)
	R6 <2> <- R6   (midx: 0)
	R12 <4> <- R12   (midx: 0)
	R10 <4> <- R10   (midx: 0)
	R7 <1> <- R7   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	R9 <2> <- R9   (midx: 0)
	R3 <2> <- R3   (midx: 0)
	R5 <2> <- R5   (midx: 0)
	goto	89   (midx: 0)
90:   (midx: 0)
//Lcd.c,342 :: 		for(i=0;i<8;++i){
   (midx: 0)
	R4 <2> <-  R6 + 1   (midx: 1)
   (midx: 0)
	R11 <2> <- R4   (midx: 0)
//Lcd.c,361 :: 		}
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <2> <- R3   (midx: 0)
	R9 <2> <- R9   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	R7 <1> <- R7   (midx: 0)
	R10 <4> <- R10   (midx: 0)
	R12 <4> <- R12   (midx: 0)
	R11 <2> <- R11   (midx: 0)
	goto	79   (midx: 0)
80:   (midx: 0)
//Lcd.c,362 :: 		if(*s==0x21) x0 +=4;
   (midx: 0)
	R4 <1> <- *R10   (midx: 0)
	if ( R4 != 33) then goto 102   (midx: 0)
   (midx: 0)
	R1 <2> <-  R0 + 4   (midx: 1)
   (midx: 0)
	R1 <2> <- R1   (midx: 0)
   (midx: 0)
	R1 <2> <- R1   (midx: 0)
	goto	103   (midx: 0)
102:   (midx: 0)
//Lcd.c,363 :: 		else  x0 += 8;
   (midx: 0)
   (midx: 0)
	R1 <2> <-  R0 + 8   (midx: 1)
   (midx: 0)
   (midx: 0)
	R1 <2> <- R1   (midx: 0)
	R1 <2> <- R1   (midx: 0)
103:   (midx: 0)
//Lcd.c,364 :: 		++s;                           //next character
   (midx: 0)
   (midx: 0)
	R4 <4> <-  R10 + 1   (midx: 2)
   (midx: 0)
	R0 <4> <- R4   (midx: 0)
//Lcd.c,365 :: 		}
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	R7 <1> <- R7   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	R9 <2> <- R9   (midx: 0)
	R1 <2> <- R1   (midx: 0)
	goto	77   (midx: 0)
78:   (midx: 0)
  end
   (midx: 0)
_Display_Logo:
  begin   (midx: 0)
//Lcd.c,370 :: 		void Display_Logo(unsigned int Dot_x, unsigned int Dot_y)
_Display_Logo:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <2> <- R0   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <2> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
//Lcd.c,373 :: 		for (i=0; i<256;++i)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R7 <2> <- 0   (midx: 0)
	R9 <2> <- R0   (midx: 0)
	R8 <2> <- R1   (midx: 0)
	R7 <2> <- R7   (midx: 0)
104:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R7 >= 256) then goto 105   (midx: 1)
//Lcd.c,375 :: 		Point_SCR(Dot_x+i, Dot_y);
	R2 <2> <-  R9 + R7   (midx: 1)
	R1 <2> <- R8   (midx: 0)
	R0 <2> <- R2   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,376 :: 		for (j=0; j<2;++j)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <2> <- 0   (midx: 0)
	R6 <2> <- R7   (midx: 0)
	R5 <2> <- R8   (midx: 0)
	R1 <2> <- R9   (midx: 0)
	R0 <2> <- R0   (midx: 0)
107:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R0 >= 2) then goto 108   (midx: 1)
//Lcd.c,378 :: 		b=Logo_Dot[(i*2)+j];
	R2 <2> <-  R6 shl 1   (midx: 1)
	R2 <2> <-  R2 + R0   (midx: 1)
	R3 <4> <-  R2 shl 2   (midx: 2)
	R2 <4> <- #_Logo_Dot   (midx: 0)
	R2 <4> <-  R2 + R3   (midx: 2)
	R7 <4> <- *R2   (midx: 0)
   (midx: 0)
	R7 <4> <- R7   (midx: 0)
//Lcd.c,379 :: 		for (k=0;k<32;++k)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <2> <- 0   (midx: 0)
	R8 <2> <- R0   (midx: 0)
	R3 <2> <- R6   (midx: 0)
	R6 <2> <- R1   (midx: 0)
	R5 <2> <- R5   (midx: 0)
	R7 <4> <- R7   (midx: 0)
	R4 <2> <- R4   (midx: 0)
110:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R4 >= 32) then goto 111   (midx: 1)
//Lcd.c,381 :: 		if(b&0x80000000)
	R2 <4> <-  R7 & 2147483648   (midx: 2)
	if (!R2) then goto 113   (midx: 0)
//Lcd.c,383 :: 		Color=0x07E0; //Green?
   (midx: 0)
	R0 <2> <- 2016   (midx: 0)
//Lcd.c,384 :: 		}
   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	goto	114   (midx: 0)
113:   (midx: 0)
//Lcd.c,385 :: 		else Color=0;
   (midx: 0)
   (midx: 0)
	R0 <2> <- 0   (midx: 0)
	R0 <2> <- R0   (midx: 0)
114:   (midx: 0)
//Lcd.c,386 :: 		Set_Pixel(Color);
   (midx: 0)
   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
//Lcd.c,387 :: 		b <<=1;
	R7 <4> <-  R7 shl 1   (midx: 6)
	R7 <4> <- R7   (midx: 0)
//Lcd.c,379 :: 		for (k=0;k<32;++k)
	R4 <2> <-  R4 + 1   (midx: 1)
	R4 <2> <- R4   (midx: 0)
//Lcd.c,388 :: 		}
   (midx: 0)
   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	R6 <2> <- R6   (midx: 0)
	R5 <2> <- R5   (midx: 0)
	R3 <2> <- R3   (midx: 0)
	R7 <4> <- R7   (midx: 0)
	R4 <2> <- R4   (midx: 0)
	goto	110   (midx: 0)
111:   (midx: 0)
//Lcd.c,376 :: 		for (j=0; j<2;++j)
   (midx: 0)
	R2 <2> <-  R8 + 1   (midx: 1)
   (midx: 0)
	R0 <2> <- R2   (midx: 0)
//Lcd.c,389 :: 		}
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <2> <- R6   (midx: 0)
	R6 <2> <- R3   (midx: 0)
	R5 <2> <- R5   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	goto	107   (midx: 0)
108:   (midx: 0)
//Lcd.c,373 :: 		for (i=0; i<256;++i)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R7 <2> <-  R6 + 1   (midx: 1)
   (midx: 0)
	R7 <2> <- R7   (midx: 0)
//Lcd.c,390 :: 		}
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R9 <2> <- R1   (midx: 0)
	R8 <2> <- R5   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	goto	104   (midx: 0)
105:   (midx: 0)
//Lcd.c,392 :: 		for(i=3; i<317; ++i)
   (midx: 0)
   (midx: 0)
	R7 <2> <- 3   (midx: 0)
	R7 <2> <- R7   (midx: 0)
115:   (midx: 0)
   (midx: 0)
	R2 <4> <- 317   (midx: 0)
	if ( R7 >= R2) then goto 116   (midx: 1)
//Lcd.c,394 :: 		Point_SCR(i, 3);
	R1 <2> <- 3   (midx: 0)
	R0 <2> <- R7   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,395 :: 		Set_Pixel(0xFFFF);
	R0 <2> <- 65535   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
//Lcd.c,396 :: 		Point_SCR(i, 236);
	R1 <2> <- 236   (midx: 0)
	R0 <2> <- R7   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,397 :: 		Set_Pixel(0xFFFF);
	R0 <2> <- 65535   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
//Lcd.c,392 :: 		for(i=3; i<317; ++i)
	R7 <2> <-  R7 + 1   (midx: 1)
	R7 <2> <- R7   (midx: 0)
//Lcd.c,398 :: 		}
   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	goto	115   (midx: 0)
116:   (midx: 0)
//Lcd.c,400 :: 		Point_SCR(0, 0);
	R1 <2> <- 0   (midx: 0)
	R0 <2> <- 0   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,401 :: 		for(j=0; j<240; ++j) Set_Pixel(0xFFFF);
   (midx: 0)
   (midx: 0)
	R3 <2> <- 0   (midx: 0)
	R3 <2> <- R3   (midx: 0)
118:   (midx: 0)
   (midx: 0)
	if ( R3 >= 240) then goto 119   (midx: 1)
	R0 <2> <- 65535   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
	R3 <2> <-  R3 + 1   (midx: 1)
	R3 <2> <- R3   (midx: 0)
   (midx: 0)
	R3 <2> <- R3   (midx: 0)
	goto	118   (midx: 0)
119:   (midx: 0)
//Lcd.c,402 :: 		Point_SCR(3, 3);
	R1 <2> <- 3   (midx: 0)
	R0 <2> <- 3   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,403 :: 		for(j=3; j<237; ++j) Set_Pixel(0xFFFF);
   (midx: 0)
   (midx: 0)
	R3 <2> <- 3   (midx: 0)
	R3 <2> <- R3   (midx: 0)
121:   (midx: 0)
   (midx: 0)
	if ( R3 >= 237) then goto 122   (midx: 1)
	R0 <2> <- 65535   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
	R3 <2> <-  R3 + 1   (midx: 1)
	R3 <2> <- R3   (midx: 0)
   (midx: 0)
	R3 <2> <- R3   (midx: 0)
	goto	121   (midx: 0)
122:   (midx: 0)
//Lcd.c,404 :: 		Point_SCR(316, 3);
	R1 <2> <- 3   (midx: 0)
	R0 <2> <- 316   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,405 :: 		for(j=3; j<237; ++j) Set_Pixel(0xFFFF);
   (midx: 0)
   (midx: 0)
	R3 <2> <- 3   (midx: 0)
	R3 <2> <- R3   (midx: 0)
124:   (midx: 0)
   (midx: 0)
	if ( R3 >= 237) then goto 125   (midx: 1)
	R0 <2> <- 65535   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
	R3 <2> <-  R3 + 1   (midx: 1)
	R3 <2> <- R3   (midx: 0)
   (midx: 0)
	R3 <2> <- R3   (midx: 0)
	goto	124   (midx: 0)
125:   (midx: 0)
//Lcd.c,406 :: 		Point_SCR(319, 0);
	R1 <2> <- 0   (midx: 0)
	R0 <2> <- 319   (midx: 0)
	CALL _Point_SCR   (midx: 0)
//Lcd.c,407 :: 		for(j=0; j<240; ++j) Set_Pixel(0xFFFF);
   (midx: 0)
   (midx: 0)
	R3 <2> <- 0   (midx: 0)
	R3 <2> <- R3   (midx: 0)
127:   (midx: 0)
   (midx: 0)
	if ( R3 >= 240) then goto 128   (midx: 1)
	R0 <2> <- 65535   (midx: 0)
	CALL _Set_Pixel   (midx: 0)
	R3 <2> <-  R3 + 1   (midx: 1)
	R3 <2> <- R3   (midx: 0)
   (midx: 0)
	R3 <2> <- R3   (midx: 0)
	goto	127   (midx: 0)
128:   (midx: 0)
  end
   (midx: 0)
