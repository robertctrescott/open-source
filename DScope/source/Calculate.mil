_Int32String_sign:
  begin   (midx: 0)
//Calculate.c,10 :: 		void Int32String_sign(I32STR_RES *r, int n, int e)
_Int32String_sign:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	R4 <2> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <2> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
//Calculate.c,13 :: 		char *p = r->str;
	R5 <4> <-  R0 + 2   (midx: 2)
   (midx: 0)
	R5 <4> <- R5   (midx: 0)
//Calculate.c,14 :: 		fixlen=e+2;
	R3 <2> <-  R2 + 2   (midx: 5)
   (midx: 0)
	R1 <2> <- R3   (midx: 0)
//Calculate.c,15 :: 		if ( n == 0 ) {
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R4 != 0) then goto 0   (midx: 5)
//Calculate.c,16 :: 		*p++ = ' ';
	R3 <1> <- 32   (midx: 0)
	[R5] <1> <- R3   (midx: 0)
   (midx: 0)
	R4 <4> <-  R5 + 1   (midx: 2)
   (midx: 0)
	R1 <4> <- R4   (midx: 0)
//Calculate.c,17 :: 		*p++ = '0';
	R3 <1> <- 48   (midx: 0)
	[R4] <1> <- R3   (midx: 0)
	R4 <4> <-  R1 + 1   (midx: 2)
	R1 <4> <- R4   (midx: 0)
//Calculate.c,18 :: 		*p++ = '.';
	R3 <1> <- 46   (midx: 0)
	[R4] <1> <- R3   (midx: 0)
	R4 <4> <-  R1 + 1   (midx: 2)
	R1 <4> <- R4   (midx: 0)
//Calculate.c,19 :: 		*p++ = '0';
	R3 <1> <- 48   (midx: 0)
	[R4] <1> <- R3   (midx: 0)
	R4 <4> <-  R1 + 1   (midx: 2)
	R1 <4> <- R4   (midx: 0)
//Calculate.c,20 :: 		*p++ = '0';
	R3 <1> <- 48   (midx: 0)
	[R4] <1> <- R3   (midx: 0)
	R4 <4> <-  R1 + 1   (midx: 2)
	R1 <4> <- R4   (midx: 0)
//Calculate.c,21 :: 		*p = 0;
	R3 <1> <- 0   (midx: 0)
	[R4] <1> <- R3   (midx: 0)
//Calculate.c,22 :: 		r->decPos = 0;
	R3 <1> <- 0   (midx: 0)
	[R0] <1> <- R3   (midx: 0)
//Calculate.c,23 :: 		r->len = p-r->str;
	R4 <4> <-  R0 + 1   (midx: 2)
   (midx: 0)
	R3 <4> <-  R0 + 2   (midx: 2)
   (midx: 0)
	R3 <4> <-  R1 - R3   (midx: 2)
	[R4] <1> <- R3   (midx: 0)
//Calculate.c,24 :: 		return;
	return   (midx: 0)
//Calculate.c,25 :: 		}
0:   (midx: 0)
//Calculate.c,26 :: 		if ( n > 0 )
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R4 <= 0) then goto 1   (midx: 5)
//Calculate.c,27 :: 		*p++ = ' ';
	R3 <1> <- 32   (midx: 0)
	[R5] <1> <- R3   (midx: 0)
   (midx: 0)
	R3 <4> <-  R5 + 1   (midx: 2)
   (midx: 0)
	R3 <4> <- R3   (midx: 0)
   (midx: 0)
	R3 <4> <- R3   (midx: 0)
	R7 <2> <- R4   (midx: 0)
	goto	2   (midx: 0)
1:   (midx: 0)
//Calculate.c,29 :: 		*p++ = '-';
   (midx: 0)
	R3 <1> <- 45   (midx: 0)
	[R5] <1> <- R3   (midx: 0)
	R5 <4> <-  R5 + 1   (midx: 2)
	R5 <4> <- R5   (midx: 0)
//Calculate.c,30 :: 		n = -n;
   (midx: 0)
	R7 <2> <-  0 - R4   (midx: 5)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	R3 <4> <- R5   (midx: 0)
	R7 <2> <- R7   (midx: 0)
//Calculate.c,31 :: 		}
2:   (midx: 0)
//Calculate.c,32 :: 		m = n;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <2> <- R7   (midx: 0)
//Calculate.c,33 :: 		i = 0;
   (midx: 0)
	R6 <2> <- 0   (midx: 0)
//Calculate.c,34 :: 		c = 5;
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R8 <2> <- 5   (midx: 0)
	R1 <2> <- PUSH(R1)   (midx: 254)
	R1 <4> <- R0   (midx: 0)
	R5 <2> <- R2   (midx: 0)
	R2 <4> <- R3   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	R4 <2> <- R4   (midx: 0)
	R6 <2> <- R6   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	R0 <2> <- POP   (midx: 254)
//Calculate.c,35 :: 		while ( m >= 10 ) {
3:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R4 < 10) then goto 4   (midx: 5)
//Calculate.c,36 :: 		m /= 10;
	R3 <2> <- 10   (midx: 0)
	R4 <2> <-  R4 / R3   (midx: 5)
	R4 <2> <- R4   (midx: 0)
//Calculate.c,37 :: 		if ( ++i > e ) c *= 10;
	R3 <2> <-  R6 + 1   (midx: 1)
	R6 <2> <- R3   (midx: 0)
	if ( R3 <= R5) then goto 66   (midx: 5)
	R3 <2> <- 10   (midx: 0)
	R8 <2> <-  R8 * R3   (midx: 5)
   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	goto	5   (midx: 0)
66:   (midx: 0)
	R8 <2> <- R8   (midx: 0)
5:   (midx: 0)
//Calculate.c,38 :: 		}
   (midx: 0)
   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R5 <2> <- R5   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	R2 <4> <- R2   (midx: 0)
	R4 <2> <- R4   (midx: 0)
	R6 <2> <- R6   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	goto	3   (midx: 0)
4:   (midx: 0)
//Calculate.c,39 :: 		r->decPos = i/3;
	R4 <4> <- R1   (midx: 0)
	R3 <2> <- 3   (midx: 0)
	R3 <2> <-  R6 / R3   (midx: 5)
	[R4] <1> <- R3   (midx: 0)
//Calculate.c,40 :: 		if ( i >= e ) n += c;
	if ( R6 < R5) then goto 67   (midx: 5)
   (midx: 0)
	R7 <2> <-  R7 + R8   (midx: 5)
   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	goto	6   (midx: 0)
67:   (midx: 0)
	R7 <2> <- R7   (midx: 0)
6:   (midx: 0)
//Calculate.c,41 :: 		switch ( i ) {
   (midx: 0)
   (midx: 0)
	goto	7   (midx: 0)
//Calculate.c,42 :: 		case 9:
9:   (midx: 0)
//Calculate.c,43 :: 		*p++ = '0'+n/1000000000;
	R3 <4> <- 1000000000   (midx: 0)
	R3 <4> <-  R7 / R3   (midx: 6)
	R3 <4> <-  48 + R3   (midx: 6)
	[R2] <1> <- R3   (midx: 0)
   (midx: 0)
	R6 <4> <-  R2 + 1   (midx: 2)
   (midx: 0)
	R6 <4> <- R6   (midx: 0)
//Calculate.c,44 :: 		if ( --e == 0 ) break;
	R3 <2> <-  R5 - 1   (midx: 1)
   (midx: 0)
   (midx: 0)
	if ( R3 != 0) then goto 10   (midx: 5)
	R2 <4> <- R6   (midx: 0)
	goto	8   (midx: 0)
10:   (midx: 0)
//Calculate.c,45 :: 		n %= 1000000000;
   (midx: 0)
   (midx: 0)
	R4 <4> <- 1000000000   (midx: 0)
   (midx: 0)
	R3 <4> <-  R7 mod R4   (midx: 6)
   (midx: 0)
	R2 <2> <- R3   (midx: 0)
//Calculate.c,46 :: 		*p++ = '.', i = 0;
	R3 <1> <- 46   (midx: 0)
	[R6] <1> <- R3   (midx: 0)
   (midx: 0)
	R4 <4> <-  R6 + 1   (midx: 2)
   (midx: 0)
	R4 <4> <- R4   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R6 <2> <- 0   (midx: 0)
	R2 <2> <- R2   (midx: 0)
	R4 <4> <- R4   (midx: 0)
	R6 <2> <- R6   (midx: 0)
//Calculate.c,47 :: 		case 8:
	goto	11   (midx: 0)
68:   (midx: 0)
//Calculate.c,83 :: 		}
	R6 <2> <- R6   (midx: 0)
	R4 <4> <- R2   (midx: 0)
	R2 <2> <- R7   (midx: 0)
//Calculate.c,47 :: 		case 8:
11:   (midx: 0)
//Calculate.c,48 :: 		*p++ = '0'+n/100000000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <4> <- 100000000   (midx: 0)
	R3 <4> <-  R2 / R3   (midx: 6)
	R3 <4> <-  48 + R3   (midx: 6)
	[R4] <1> <- R3   (midx: 0)
   (midx: 0)
	R3 <4> <-  R4 + 1   (midx: 2)
   (midx: 0)
	R7 <4> <- R3   (midx: 0)
//Calculate.c,49 :: 		if ( --e == 0 ) break;
	R3 <2> <-  R5 - 1   (midx: 1)
	R5 <2> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R3 != 0) then goto 12   (midx: 5)
	R2 <4> <- R7   (midx: 0)
	goto	8   (midx: 0)
12:   (midx: 0)
//Calculate.c,50 :: 		n %= 100000000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <4> <- 100000000   (midx: 0)
	R3 <4> <-  R2 mod R4   (midx: 6)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <2> <- R3   (midx: 0)
	R4 <2> <- R5   (midx: 0)
	R5 <4> <- R7   (midx: 0)
	R7 <2> <- R2   (midx: 0)
	R2 <2> <- R6   (midx: 0)
//Calculate.c,51 :: 		case 7:
	goto	13   (midx: 0)
69:   (midx: 0)
//Calculate.c,83 :: 		}
	R7 <2> <- R7   (midx: 0)
	R4 <2> <- R5   (midx: 0)
	R5 <4> <- R2   (midx: 0)
	R2 <2> <- R6   (midx: 0)
//Calculate.c,51 :: 		case 7:
13:   (midx: 0)
//Calculate.c,52 :: 		*p++ = '0'+n/10000000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <4> <- 10000000   (midx: 0)
	R3 <4> <-  R7 / R3   (midx: 6)
	R3 <4> <-  48 + R3   (midx: 6)
	[R5] <1> <- R3   (midx: 0)
	R5 <4> <-  R5 + 1   (midx: 2)
	R5 <4> <- R5   (midx: 0)
//Calculate.c,53 :: 		if ( --e == 0 ) break;
   (midx: 0)
	R3 <2> <-  R4 - 1   (midx: 1)
   (midx: 0)
	R6 <2> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R3 != 0) then goto 14   (midx: 5)
	R2 <4> <- R5   (midx: 0)
	goto	8   (midx: 0)
14:   (midx: 0)
//Calculate.c,54 :: 		n %= 10000000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <4> <- 10000000   (midx: 0)
	R3 <4> <-  R7 mod R4   (midx: 6)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R7 <2> <- R3   (midx: 0)
	R5 <4> <- PUSH(R5)   (midx: 254)
	R5 <2> <- R2   (midx: 0)
	R4 <2> <- R6   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	R2 <4> <- POP   (midx: 254)
//Calculate.c,55 :: 		case 6:
	goto	15   (midx: 0)
70:   (midx: 0)
//Calculate.c,83 :: 		}
	R7 <2> <- R7   (midx: 0)
	R4 <2> <- R5   (midx: 0)
	R5 <2> <- R6   (midx: 0)
	R2 <4> <- R2   (midx: 0)
//Calculate.c,55 :: 		case 6:
15:   (midx: 0)
//Calculate.c,56 :: 		*p++ = '0'+n/1000000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <4> <- 1000000   (midx: 0)
	R3 <4> <-  R7 / R3   (midx: 6)
	R3 <4> <-  48 + R3   (midx: 6)
	[R2] <1> <- R3   (midx: 0)
   (midx: 0)
	R6 <4> <-  R2 + 1   (midx: 2)
   (midx: 0)
	R6 <4> <- R6   (midx: 0)
//Calculate.c,57 :: 		if ( --e == 0 ) break;
   (midx: 0)
	R3 <2> <-  R4 - 1   (midx: 1)
   (midx: 0)
	R2 <2> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R3 != 0) then goto 16   (midx: 5)
	R2 <4> <- R6   (midx: 0)
	goto	8   (midx: 0)
16:   (midx: 0)
//Calculate.c,58 :: 		n %= 1000000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <4> <- 1000000   (midx: 0)
   (midx: 0)
	R3 <4> <-  R7 mod R4   (midx: 6)
   (midx: 0)
	R4 <2> <- R3   (midx: 0)
//Calculate.c,59 :: 		if ( i ) *p++ = '.', i = 0;
   (midx: 0)
	if (!R5) then goto 71   (midx: 0)
	R3 <1> <- 46   (midx: 0)
	[R6] <1> <- R3   (midx: 0)
   (midx: 0)
	R5 <4> <-  R6 + 1   (midx: 2)
   (midx: 0)
	R5 <4> <- R5   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <2> <- 0   (midx: 0)
	R3 <2> <- PUSH(R3)   (midx: 254)
	R3 <4> <- R5   (midx: 0)
	R5 <2> <- POP   (midx: 254)
	goto	17   (midx: 0)
71:   (midx: 0)
	R5 <2> <- R5   (midx: 0)
	R3 <4> <- R6   (midx: 0)
17:   (midx: 0)
//Calculate.c,60 :: 		case 5:
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R7 <2> <- R2   (midx: 0)
	R2 <2> <- R5   (midx: 0)
	R6 <2> <- R4   (midx: 0)
	R4 <4> <- R3   (midx: 0)
	goto	18   (midx: 0)
72:   (midx: 0)
//Calculate.c,83 :: 		}
	R4 <4> <- R2   (midx: 0)
	R2 <2> <- R6   (midx: 0)
	R6 <2> <- R7   (midx: 0)
	R7 <2> <- R5   (midx: 0)
//Calculate.c,60 :: 		case 5:
18:   (midx: 0)
//Calculate.c,61 :: 		*p++ = '0'+n/100000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <4> <- 100000   (midx: 0)
	R3 <4> <-  R6 / R3   (midx: 6)
	R3 <4> <-  48 + R3   (midx: 6)
	[R4] <1> <- R3   (midx: 0)
   (midx: 0)
	R5 <4> <-  R4 + 1   (midx: 2)
   (midx: 0)
	R5 <4> <- R5   (midx: 0)
//Calculate.c,62 :: 		if ( --e == 0 ) break;
	R3 <2> <-  R7 - 1   (midx: 1)
	R7 <2> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R3 != 0) then goto 19   (midx: 5)
	R2 <4> <- R5   (midx: 0)
	goto	8   (midx: 0)
19:   (midx: 0)
//Calculate.c,63 :: 		n %= 100000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <4> <- 100000   (midx: 0)
   (midx: 0)
	R3 <4> <-  R6 mod R4   (midx: 6)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <2> <- R3   (midx: 0)
	R4 <2> <- PUSH(R4)   (midx: 254)
	R2 <2> <- R2   (midx: 0)
	R5 <4> <- R5   (midx: 0)
	R4 <2> <- R7   (midx: 0)
	R7 <2> <- POP   (midx: 254)
//Calculate.c,64 :: 		case 4:
	goto	20   (midx: 0)
73:   (midx: 0)
//Calculate.c,83 :: 		}
	R7 <2> <- R7   (midx: 0)
	R4 <2> <- R5   (midx: 0)
	R5 <4> <- R2   (midx: 0)
	R2 <2> <- R6   (midx: 0)
//Calculate.c,64 :: 		case 4:
20:   (midx: 0)
//Calculate.c,65 :: 		*p++ = '0'+n/10000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <2> <- 10000   (midx: 0)
	R3 <2> <-  R7 / R3   (midx: 5)
	R3 <2> <-  48 + R3   (midx: 5)
	[R5] <1> <- R3   (midx: 0)
	R5 <4> <-  R5 + 1   (midx: 2)
	R5 <4> <- R5   (midx: 0)
//Calculate.c,66 :: 		if ( --e == 0 ) break;
   (midx: 0)
	R3 <2> <-  R4 - 1   (midx: 1)
   (midx: 0)
	R6 <2> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R3 != 0) then goto 21   (midx: 5)
	R2 <4> <- R5   (midx: 0)
	goto	8   (midx: 0)
21:   (midx: 0)
//Calculate.c,67 :: 		n %= 10000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <2> <- 10000   (midx: 0)
	R7 <2> <-  R7 mod R4   (midx: 5)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	R5 <4> <- PUSH(R5)   (midx: 254)
	R5 <2> <- R2   (midx: 0)
	R4 <2> <- R6   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	R2 <4> <- POP   (midx: 254)
//Calculate.c,68 :: 		case 3:
	goto	22   (midx: 0)
74:   (midx: 0)
//Calculate.c,83 :: 		}
	R7 <2> <- R7   (midx: 0)
	R4 <2> <- R5   (midx: 0)
	R5 <2> <- R6   (midx: 0)
	R2 <4> <- R2   (midx: 0)
//Calculate.c,68 :: 		case 3:
22:   (midx: 0)
//Calculate.c,69 :: 		*p++ = '0'+n/1000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <2> <- 1000   (midx: 0)
	R3 <2> <-  R7 / R3   (midx: 5)
	R3 <2> <-  48 + R3   (midx: 5)
	[R2] <1> <- R3   (midx: 0)
   (midx: 0)
	R3 <4> <-  R2 + 1   (midx: 2)
   (midx: 0)
	R6 <4> <- R3   (midx: 0)
//Calculate.c,70 :: 		if ( --e == 0 ) break;
   (midx: 0)
	R3 <2> <-  R4 - 1   (midx: 1)
   (midx: 0)
	R2 <2> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R3 != 0) then goto 23   (midx: 5)
	R2 <4> <- R6   (midx: 0)
	goto	8   (midx: 0)
23:   (midx: 0)
//Calculate.c,71 :: 		n %= 1000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <2> <- 1000   (midx: 0)
   (midx: 0)
	R4 <2> <-  R7 mod R4   (midx: 5)
   (midx: 0)
	R4 <2> <- R4   (midx: 0)
//Calculate.c,72 :: 		if ( i ) *p++ = '.', i = 0;
   (midx: 0)
	if (!R5) then goto 75   (midx: 0)
	R3 <1> <- 46   (midx: 0)
	[R6] <1> <- R3   (midx: 0)
   (midx: 0)
	R5 <4> <-  R6 + 1   (midx: 2)
   (midx: 0)
   (midx: 0)
	R5 <4> <- R5   (midx: 0)
	R3 <4> <- R5   (midx: 0)
	goto	24   (midx: 0)
75:   (midx: 0)
	R3 <4> <- R6   (midx: 0)
24:   (midx: 0)
//Calculate.c,73 :: 		case 2:
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R6 <2> <- R2   (midx: 0)
	R2 <2> <- R4   (midx: 0)
	R4 <4> <- R3   (midx: 0)
	goto	25   (midx: 0)
76:   (midx: 0)
//Calculate.c,83 :: 		}
	R4 <4> <- R2   (midx: 0)
	R2 <2> <- R7   (midx: 0)
	R6 <2> <- R5   (midx: 0)
//Calculate.c,73 :: 		case 2:
25:   (midx: 0)
//Calculate.c,74 :: 		*p++ = '0'+n/100;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <2> <- 100   (midx: 0)
	R3 <2> <-  R2 / R3   (midx: 5)
	R3 <2> <-  48 + R3   (midx: 5)
	[R4] <1> <- R3   (midx: 0)
   (midx: 0)
	R5 <4> <-  R4 + 1   (midx: 2)
   (midx: 0)
	R5 <4> <- R5   (midx: 0)
//Calculate.c,75 :: 		if ( --e == 0 ) break;
	R3 <2> <-  R6 - 1   (midx: 1)
	R6 <2> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R3 != 0) then goto 26   (midx: 5)
	R2 <4> <- R5   (midx: 0)
	goto	8   (midx: 0)
26:   (midx: 0)
//Calculate.c,76 :: 		n %= 100;
   (midx: 0)
   (midx: 0)
	R4 <2> <- 100   (midx: 0)
	R3 <2> <-  R2 mod R4   (midx: 5)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <2> <- R3   (midx: 0)
	R4 <2> <- R6   (midx: 0)
	R6 <2> <- R2   (midx: 0)
	R2 <4> <- R5   (midx: 0)
//Calculate.c,77 :: 		case 1:
	goto	27   (midx: 0)
77:   (midx: 0)
//Calculate.c,83 :: 		}
	R6 <2> <- R7   (midx: 0)
	R4 <2> <- R5   (midx: 0)
	R2 <4> <- R2   (midx: 0)
//Calculate.c,77 :: 		case 1:
27:   (midx: 0)
//Calculate.c,78 :: 		*p++ = '0'+n/10;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <2> <- 10   (midx: 0)
	R3 <2> <-  R6 / R3   (midx: 5)
	R3 <2> <-  48 + R3   (midx: 5)
	[R2] <1> <- R3   (midx: 0)
   (midx: 0)
	R3 <4> <-  R2 + 1   (midx: 2)
   (midx: 0)
	R5 <4> <- R3   (midx: 0)
//Calculate.c,79 :: 		if ( --e == 0 ) break;
   (midx: 0)
	R3 <2> <-  R4 - 1   (midx: 1)
   (midx: 0)
	if ( R3 != 0) then goto 28   (midx: 5)
	R2 <4> <- R5   (midx: 0)
	goto	8   (midx: 0)
28:   (midx: 0)
//Calculate.c,80 :: 		n %= 10;
   (midx: 0)
	R4 <2> <- 10   (midx: 0)
   (midx: 0)
	R4 <2> <-  R6 mod R4   (midx: 5)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <2> <- R4   (midx: 0)
	R2 <4> <- R5   (midx: 0)
	R4 <2> <- R4   (midx: 0)
//Calculate.c,81 :: 		case 0:
	goto	29   (midx: 0)
78:   (midx: 0)
//Calculate.c,83 :: 		}
	R4 <2> <- R7   (midx: 0)
	R2 <4> <- R2   (midx: 0)
//Calculate.c,81 :: 		case 0:
29:   (midx: 0)
//Calculate.c,82 :: 		*p++ = '0'+n;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <2> <-  48 + R4   (midx: 5)
	[R2] <1> <- R3   (midx: 0)
	R2 <4> <-  R2 + 1   (midx: 2)
	R2 <4> <- R2   (midx: 0)
//Calculate.c,83 :: 		}
	R2 <4> <- R2   (midx: 0)
	goto	8   (midx: 0)
7:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R6 = 9) then goto 9   (midx: 5)
	if ( R6 = 8) then goto 68   (midx: 5)
	if ( R6 = 7) then goto 69   (midx: 5)
	if ( R6 = 6) then goto 70   (midx: 5)
	if ( R6 = 5) then goto 72   (midx: 5)
	if ( R6 = 4) then goto 73   (midx: 5)
	if ( R6 = 3) then goto 74   (midx: 5)
	if ( R6 = 2) then goto 76   (midx: 5)
   (midx: 0)
	if ( R6 = 1) then goto 77   (midx: 5)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R6 = 0) then goto 78   (midx: 5)
	R2 <4> <- R2   (midx: 0)
8:   (midx: 0)
//Calculate.c,84 :: 		while ( p < r->str+fixlen )
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <4> <- PUSH(R1)   (midx: 254)
	R1 <4> <- R2   (midx: 0)
	R2 <2> <- R0   (midx: 0)
	R0 <4> <- POP   (midx: 254)
30:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <4> <-  R0 + 2   (midx: 2)
	R3 <4> <-  R3 + R2   (midx: 2)
	if ( R1 >= R3) then goto 31   (midx: 2)
//Calculate.c,85 :: 		*p++ = ' ';
	R3 <1> <- 32   (midx: 0)
	[R1] <1> <- R3   (midx: 0)
	R1 <4> <-  R1 + 1   (midx: 2)
	R1 <4> <- R1   (midx: 0)
   (midx: 0)
	R2 <2> <- R2   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	goto	30   (midx: 0)
31:   (midx: 0)
//Calculate.c,86 :: 		*p = 0;
	R3 <1> <- 0   (midx: 0)
	[R1] <1> <- R3   (midx: 0)
//Calculate.c,87 :: 		r->len = p-r->str;
	R4 <4> <-  R0 + 1   (midx: 2)
   (midx: 0)
	R3 <4> <-  R0 + 2   (midx: 2)
   (midx: 0)
	R3 <4> <-  R1 - R3   (midx: 2)
	[R4] <1> <- R3   (midx: 0)
  end
   (midx: 0)
_Int32String:
  begin   (midx: 0)
//Calculate.c,92 :: 		void Int32String(I32STR_RES *r, int n, int e)
_Int32String:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	R1 <2> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <2> <- R2   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
//Calculate.c,95 :: 		char *p = r->str;
	R2 <4> <-  R0 + 2   (midx: 2)
   (midx: 0)
	R2 <4> <- R2   (midx: 0)
//Calculate.c,96 :: 		fixlen=e+2;
	R3 <2> <-  R4 + 2   (midx: 5)
   (midx: 0)
	R3 <2> <- R3   (midx: 0)
//Calculate.c,97 :: 		if ( n == 0 ) {
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R1 != 0) then goto 32   (midx: 5)
//Calculate.c,98 :: 		*p++ = '0';
	R3 <1> <- 48   (midx: 0)
	[R2] <1> <- R3   (midx: 0)
   (midx: 0)
	R4 <4> <-  R2 + 1   (midx: 2)
   (midx: 0)
	R1 <4> <- R4   (midx: 0)
//Calculate.c,99 :: 		*p++ = '.';
	R3 <1> <- 46   (midx: 0)
	[R4] <1> <- R3   (midx: 0)
	R4 <4> <-  R1 + 1   (midx: 2)
	R1 <4> <- R4   (midx: 0)
//Calculate.c,100 :: 		*p++ = '0';
	R3 <1> <- 48   (midx: 0)
	[R4] <1> <- R3   (midx: 0)
	R4 <4> <-  R1 + 1   (midx: 2)
	R1 <4> <- R4   (midx: 0)
//Calculate.c,101 :: 		*p++ = '0';
	R3 <1> <- 48   (midx: 0)
	[R4] <1> <- R3   (midx: 0)
	R4 <4> <-  R1 + 1   (midx: 2)
	R1 <4> <- R4   (midx: 0)
//Calculate.c,102 :: 		*p++ = '0';
	R3 <1> <- 48   (midx: 0)
	[R4] <1> <- R3   (midx: 0)
	R4 <4> <-  R1 + 1   (midx: 2)
	R1 <4> <- R4   (midx: 0)
//Calculate.c,103 :: 		*p = 0;
	R3 <1> <- 0   (midx: 0)
	[R4] <1> <- R3   (midx: 0)
//Calculate.c,104 :: 		r->decPos = 0;
	R3 <1> <- 0   (midx: 0)
	[R0] <1> <- R3   (midx: 0)
//Calculate.c,105 :: 		r->len = p-r->str;
	R4 <4> <-  R0 + 1   (midx: 2)
   (midx: 0)
	R3 <4> <-  R0 + 2   (midx: 2)
   (midx: 0)
	R3 <4> <-  R1 - R3   (midx: 2)
	[R4] <1> <- R3   (midx: 0)
//Calculate.c,106 :: 		return;
	return   (midx: 0)
//Calculate.c,107 :: 		}
32:   (midx: 0)
//Calculate.c,114 :: 		m = n;
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R5 <2> <- R1   (midx: 0)
//Calculate.c,115 :: 		i = 0;
   (midx: 0)
	R6 <2> <- 0   (midx: 0)
//Calculate.c,116 :: 		c = 5;
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R8 <2> <- 5   (midx: 0)
	R5 <2> <- PUSH(R5)   (midx: 254)
	R7 <2> <- R1   (midx: 0)
	R1 <4> <- R0   (midx: 0)
	R0 <2> <- R3   (midx: 0)
	R5 <2> <- R4   (midx: 0)
	R2 <4> <- R2   (midx: 0)
	R6 <2> <- R6   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	R4 <2> <- POP   (midx: 254)
//Calculate.c,117 :: 		while ( m >= 10 ) {
33:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R4 < 10) then goto 34   (midx: 5)
//Calculate.c,118 :: 		m /= 10;
	R3 <2> <- 10   (midx: 0)
	R4 <2> <-  R4 / R3   (midx: 5)
	R4 <2> <- R4   (midx: 0)
//Calculate.c,119 :: 		if ( ++i > e ) c *= 10;
	R3 <2> <-  R6 + 1   (midx: 1)
	R6 <2> <- R3   (midx: 0)
	if ( R3 <= R5) then goto 79   (midx: 5)
	R3 <2> <- 10   (midx: 0)
	R8 <2> <-  R8 * R3   (midx: 5)
   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	goto	35   (midx: 0)
79:   (midx: 0)
	R8 <2> <- R8   (midx: 0)
35:   (midx: 0)
//Calculate.c,120 :: 		}
   (midx: 0)
   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	R5 <2> <- R5   (midx: 0)
	R2 <4> <- R2   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	R4 <2> <- R4   (midx: 0)
	R6 <2> <- R6   (midx: 0)
	R8 <2> <- R8   (midx: 0)
	goto	33   (midx: 0)
34:   (midx: 0)
//Calculate.c,121 :: 		r->decPos = i/3;
	R4 <4> <- R1   (midx: 0)
	R3 <2> <- 3   (midx: 0)
	R3 <2> <-  R6 / R3   (midx: 5)
	[R4] <1> <- R3   (midx: 0)
//Calculate.c,122 :: 		if ( i >= e ) n += c;
	if ( R6 < R5) then goto 80   (midx: 5)
   (midx: 0)
	R7 <2> <-  R7 + R8   (midx: 5)
   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	goto	36   (midx: 0)
80:   (midx: 0)
	R7 <2> <- R7   (midx: 0)
36:   (midx: 0)
//Calculate.c,123 :: 		switch ( i ) {
   (midx: 0)
   (midx: 0)
	goto	37   (midx: 0)
//Calculate.c,124 :: 		case 9:
39:   (midx: 0)
//Calculate.c,125 :: 		*p++ = '0'+n/1000000000;
	R3 <4> <- 1000000000   (midx: 0)
	R3 <4> <-  R7 / R3   (midx: 6)
	R3 <4> <-  48 + R3   (midx: 6)
	[R2] <1> <- R3   (midx: 0)
   (midx: 0)
	R6 <4> <-  R2 + 1   (midx: 2)
   (midx: 0)
	R6 <4> <- R6   (midx: 0)
//Calculate.c,126 :: 		if ( --e == 0 ) break;
	R3 <2> <-  R5 - 1   (midx: 1)
   (midx: 0)
   (midx: 0)
	if ( R3 != 0) then goto 40   (midx: 5)
	R2 <4> <- R6   (midx: 0)
	goto	38   (midx: 0)
40:   (midx: 0)
//Calculate.c,127 :: 		n %= 1000000000;
   (midx: 0)
   (midx: 0)
	R4 <4> <- 1000000000   (midx: 0)
   (midx: 0)
	R3 <4> <-  R7 mod R4   (midx: 6)
   (midx: 0)
	R2 <2> <- R3   (midx: 0)
//Calculate.c,128 :: 		*p++ = '.', i = 0;
	R3 <1> <- 46   (midx: 0)
	[R6] <1> <- R3   (midx: 0)
   (midx: 0)
	R4 <4> <-  R6 + 1   (midx: 2)
   (midx: 0)
	R4 <4> <- R4   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R6 <2> <- 0   (midx: 0)
	R2 <2> <- R2   (midx: 0)
	R4 <4> <- R4   (midx: 0)
	R6 <2> <- R6   (midx: 0)
//Calculate.c,129 :: 		case 8:
	goto	41   (midx: 0)
81:   (midx: 0)
//Calculate.c,165 :: 		}
	R6 <2> <- R6   (midx: 0)
	R4 <4> <- R2   (midx: 0)
	R2 <2> <- R7   (midx: 0)
//Calculate.c,129 :: 		case 8:
41:   (midx: 0)
//Calculate.c,130 :: 		*p++ = '0'+n/100000000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <4> <- 100000000   (midx: 0)
	R3 <4> <-  R2 / R3   (midx: 6)
	R3 <4> <-  48 + R3   (midx: 6)
	[R4] <1> <- R3   (midx: 0)
   (midx: 0)
	R3 <4> <-  R4 + 1   (midx: 2)
   (midx: 0)
	R7 <4> <- R3   (midx: 0)
//Calculate.c,131 :: 		if ( --e == 0 ) break;
	R3 <2> <-  R5 - 1   (midx: 1)
	R5 <2> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R3 != 0) then goto 42   (midx: 5)
	R2 <4> <- R7   (midx: 0)
	goto	38   (midx: 0)
42:   (midx: 0)
//Calculate.c,132 :: 		n %= 100000000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <4> <- 100000000   (midx: 0)
	R3 <4> <-  R2 mod R4   (midx: 6)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <2> <- R3   (midx: 0)
	R4 <2> <- R5   (midx: 0)
	R5 <4> <- R7   (midx: 0)
	R7 <2> <- R2   (midx: 0)
	R2 <2> <- R6   (midx: 0)
//Calculate.c,133 :: 		case 7:
	goto	43   (midx: 0)
82:   (midx: 0)
//Calculate.c,165 :: 		}
	R7 <2> <- R7   (midx: 0)
	R4 <2> <- R5   (midx: 0)
	R5 <4> <- R2   (midx: 0)
	R2 <2> <- R6   (midx: 0)
//Calculate.c,133 :: 		case 7:
43:   (midx: 0)
//Calculate.c,134 :: 		*p++ = '0'+n/10000000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <4> <- 10000000   (midx: 0)
	R3 <4> <-  R7 / R3   (midx: 6)
	R3 <4> <-  48 + R3   (midx: 6)
	[R5] <1> <- R3   (midx: 0)
	R5 <4> <-  R5 + 1   (midx: 2)
	R5 <4> <- R5   (midx: 0)
//Calculate.c,135 :: 		if ( --e == 0 ) break;
   (midx: 0)
	R3 <2> <-  R4 - 1   (midx: 1)
   (midx: 0)
	R6 <2> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R3 != 0) then goto 44   (midx: 5)
	R2 <4> <- R5   (midx: 0)
	goto	38   (midx: 0)
44:   (midx: 0)
//Calculate.c,136 :: 		n %= 10000000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <4> <- 10000000   (midx: 0)
	R3 <4> <-  R7 mod R4   (midx: 6)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R7 <2> <- R3   (midx: 0)
	R5 <4> <- PUSH(R5)   (midx: 254)
	R5 <2> <- R2   (midx: 0)
	R4 <2> <- R6   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	R2 <4> <- POP   (midx: 254)
//Calculate.c,137 :: 		case 6:
	goto	45   (midx: 0)
83:   (midx: 0)
//Calculate.c,165 :: 		}
	R7 <2> <- R7   (midx: 0)
	R4 <2> <- R5   (midx: 0)
	R5 <2> <- R6   (midx: 0)
	R2 <4> <- R2   (midx: 0)
//Calculate.c,137 :: 		case 6:
45:   (midx: 0)
//Calculate.c,138 :: 		*p++ = '0'+n/1000000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <4> <- 1000000   (midx: 0)
	R3 <4> <-  R7 / R3   (midx: 6)
	R3 <4> <-  48 + R3   (midx: 6)
	[R2] <1> <- R3   (midx: 0)
   (midx: 0)
	R6 <4> <-  R2 + 1   (midx: 2)
   (midx: 0)
	R6 <4> <- R6   (midx: 0)
//Calculate.c,139 :: 		if ( --e == 0 ) break;
   (midx: 0)
	R3 <2> <-  R4 - 1   (midx: 1)
   (midx: 0)
	R2 <2> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R3 != 0) then goto 46   (midx: 5)
	R2 <4> <- R6   (midx: 0)
	goto	38   (midx: 0)
46:   (midx: 0)
//Calculate.c,140 :: 		n %= 1000000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <4> <- 1000000   (midx: 0)
   (midx: 0)
	R3 <4> <-  R7 mod R4   (midx: 6)
   (midx: 0)
	R4 <2> <- R3   (midx: 0)
//Calculate.c,141 :: 		if ( i ) *p++ = '.', i = 0;
   (midx: 0)
	if (!R5) then goto 84   (midx: 0)
	R3 <1> <- 46   (midx: 0)
	[R6] <1> <- R3   (midx: 0)
   (midx: 0)
	R5 <4> <-  R6 + 1   (midx: 2)
   (midx: 0)
	R5 <4> <- R5   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <2> <- 0   (midx: 0)
	R3 <2> <- PUSH(R3)   (midx: 254)
	R3 <4> <- R5   (midx: 0)
	R5 <2> <- POP   (midx: 254)
	goto	47   (midx: 0)
84:   (midx: 0)
	R5 <2> <- R5   (midx: 0)
	R3 <4> <- R6   (midx: 0)
47:   (midx: 0)
//Calculate.c,142 :: 		case 5:
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R7 <2> <- R2   (midx: 0)
	R2 <2> <- R5   (midx: 0)
	R6 <2> <- R4   (midx: 0)
	R4 <4> <- R3   (midx: 0)
	goto	48   (midx: 0)
85:   (midx: 0)
//Calculate.c,165 :: 		}
	R4 <4> <- R2   (midx: 0)
	R2 <2> <- R6   (midx: 0)
	R6 <2> <- R7   (midx: 0)
	R7 <2> <- R5   (midx: 0)
//Calculate.c,142 :: 		case 5:
48:   (midx: 0)
//Calculate.c,143 :: 		*p++ = '0'+n/100000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <4> <- 100000   (midx: 0)
	R3 <4> <-  R6 / R3   (midx: 6)
	R3 <4> <-  48 + R3   (midx: 6)
	[R4] <1> <- R3   (midx: 0)
   (midx: 0)
	R5 <4> <-  R4 + 1   (midx: 2)
   (midx: 0)
	R5 <4> <- R5   (midx: 0)
//Calculate.c,144 :: 		if ( --e == 0 ) break;
	R3 <2> <-  R7 - 1   (midx: 1)
	R7 <2> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R3 != 0) then goto 49   (midx: 5)
	R2 <4> <- R5   (midx: 0)
	goto	38   (midx: 0)
49:   (midx: 0)
//Calculate.c,145 :: 		n %= 100000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <4> <- 100000   (midx: 0)
   (midx: 0)
	R3 <4> <-  R6 mod R4   (midx: 6)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <2> <- R3   (midx: 0)
	R4 <2> <- PUSH(R4)   (midx: 254)
	R2 <2> <- R2   (midx: 0)
	R5 <4> <- R5   (midx: 0)
	R4 <2> <- R7   (midx: 0)
	R7 <2> <- POP   (midx: 254)
//Calculate.c,146 :: 		case 4:
	goto	50   (midx: 0)
86:   (midx: 0)
//Calculate.c,165 :: 		}
	R7 <2> <- R7   (midx: 0)
	R4 <2> <- R5   (midx: 0)
	R5 <4> <- R2   (midx: 0)
	R2 <2> <- R6   (midx: 0)
//Calculate.c,146 :: 		case 4:
50:   (midx: 0)
//Calculate.c,147 :: 		*p++ = '0'+n/10000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <2> <- 10000   (midx: 0)
	R3 <2> <-  R7 / R3   (midx: 5)
	R3 <2> <-  48 + R3   (midx: 5)
	[R5] <1> <- R3   (midx: 0)
	R5 <4> <-  R5 + 1   (midx: 2)
	R5 <4> <- R5   (midx: 0)
//Calculate.c,148 :: 		if ( --e == 0 ) break;
   (midx: 0)
	R3 <2> <-  R4 - 1   (midx: 1)
   (midx: 0)
	R6 <2> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R3 != 0) then goto 51   (midx: 5)
	R2 <4> <- R5   (midx: 0)
	goto	38   (midx: 0)
51:   (midx: 0)
//Calculate.c,149 :: 		n %= 10000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <2> <- 10000   (midx: 0)
	R7 <2> <-  R7 mod R4   (midx: 5)
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	R5 <4> <- PUSH(R5)   (midx: 254)
	R5 <2> <- R2   (midx: 0)
	R4 <2> <- R6   (midx: 0)
	R7 <2> <- R7   (midx: 0)
	R2 <4> <- POP   (midx: 254)
//Calculate.c,150 :: 		case 3:
	goto	52   (midx: 0)
87:   (midx: 0)
//Calculate.c,165 :: 		}
	R7 <2> <- R7   (midx: 0)
	R4 <2> <- R5   (midx: 0)
	R5 <2> <- R6   (midx: 0)
	R2 <4> <- R2   (midx: 0)
//Calculate.c,150 :: 		case 3:
52:   (midx: 0)
//Calculate.c,151 :: 		*p++ = '0'+n/1000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <2> <- 1000   (midx: 0)
	R3 <2> <-  R7 / R3   (midx: 5)
	R3 <2> <-  48 + R3   (midx: 5)
	[R2] <1> <- R3   (midx: 0)
   (midx: 0)
	R3 <4> <-  R2 + 1   (midx: 2)
   (midx: 0)
	R6 <4> <- R3   (midx: 0)
//Calculate.c,152 :: 		if ( --e == 0 ) break;
   (midx: 0)
	R3 <2> <-  R4 - 1   (midx: 1)
   (midx: 0)
	R2 <2> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R3 != 0) then goto 53   (midx: 5)
	R2 <4> <- R6   (midx: 0)
	goto	38   (midx: 0)
53:   (midx: 0)
//Calculate.c,153 :: 		n %= 1000;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <2> <- 1000   (midx: 0)
   (midx: 0)
	R4 <2> <-  R7 mod R4   (midx: 5)
   (midx: 0)
	R4 <2> <- R4   (midx: 0)
//Calculate.c,154 :: 		if ( i ) *p++ = '.', i = 0;
   (midx: 0)
	if (!R5) then goto 88   (midx: 0)
	R3 <1> <- 46   (midx: 0)
	[R6] <1> <- R3   (midx: 0)
   (midx: 0)
	R5 <4> <-  R6 + 1   (midx: 2)
   (midx: 0)
   (midx: 0)
	R5 <4> <- R5   (midx: 0)
	R3 <4> <- R5   (midx: 0)
	goto	54   (midx: 0)
88:   (midx: 0)
	R3 <4> <- R6   (midx: 0)
54:   (midx: 0)
//Calculate.c,155 :: 		case 2:
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R6 <2> <- R2   (midx: 0)
	R2 <2> <- R4   (midx: 0)
	R4 <4> <- R3   (midx: 0)
	goto	55   (midx: 0)
89:   (midx: 0)
//Calculate.c,165 :: 		}
	R4 <4> <- R2   (midx: 0)
	R2 <2> <- R7   (midx: 0)
	R6 <2> <- R5   (midx: 0)
//Calculate.c,155 :: 		case 2:
55:   (midx: 0)
//Calculate.c,156 :: 		*p++ = '0'+n/100;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <2> <- 100   (midx: 0)
	R3 <2> <-  R2 / R3   (midx: 5)
	R3 <2> <-  48 + R3   (midx: 5)
	[R4] <1> <- R3   (midx: 0)
   (midx: 0)
	R5 <4> <-  R4 + 1   (midx: 2)
   (midx: 0)
	R5 <4> <- R5   (midx: 0)
//Calculate.c,157 :: 		if ( --e == 0 ) break;
	R3 <2> <-  R6 - 1   (midx: 1)
	R6 <2> <- R3   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R3 != 0) then goto 56   (midx: 5)
	R2 <4> <- R5   (midx: 0)
	goto	38   (midx: 0)
56:   (midx: 0)
//Calculate.c,158 :: 		n %= 100;
   (midx: 0)
   (midx: 0)
	R4 <2> <- 100   (midx: 0)
	R3 <2> <-  R2 mod R4   (midx: 5)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R2 <2> <- R3   (midx: 0)
	R4 <2> <- R6   (midx: 0)
	R6 <2> <- R2   (midx: 0)
	R2 <4> <- R5   (midx: 0)
//Calculate.c,159 :: 		case 1:
	goto	57   (midx: 0)
90:   (midx: 0)
//Calculate.c,165 :: 		}
	R6 <2> <- R7   (midx: 0)
	R4 <2> <- R5   (midx: 0)
	R2 <4> <- R2   (midx: 0)
//Calculate.c,159 :: 		case 1:
57:   (midx: 0)
//Calculate.c,160 :: 		*p++ = '0'+n/10;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <2> <- 10   (midx: 0)
	R3 <2> <-  R6 / R3   (midx: 5)
	R3 <2> <-  48 + R3   (midx: 5)
	[R2] <1> <- R3   (midx: 0)
   (midx: 0)
	R3 <4> <-  R2 + 1   (midx: 2)
   (midx: 0)
	R5 <4> <- R3   (midx: 0)
//Calculate.c,161 :: 		if ( --e == 0 ) break;
   (midx: 0)
	R3 <2> <-  R4 - 1   (midx: 1)
   (midx: 0)
	if ( R3 != 0) then goto 58   (midx: 5)
	R2 <4> <- R5   (midx: 0)
	goto	38   (midx: 0)
58:   (midx: 0)
//Calculate.c,162 :: 		n %= 10;
   (midx: 0)
	R4 <2> <- 10   (midx: 0)
   (midx: 0)
	R4 <2> <-  R6 mod R4   (midx: 5)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R4 <2> <- R4   (midx: 0)
	R2 <4> <- R5   (midx: 0)
	R4 <2> <- R4   (midx: 0)
//Calculate.c,163 :: 		case 0:
	goto	59   (midx: 0)
91:   (midx: 0)
//Calculate.c,165 :: 		}
	R4 <2> <- R7   (midx: 0)
	R2 <4> <- R2   (midx: 0)
//Calculate.c,163 :: 		case 0:
59:   (midx: 0)
//Calculate.c,164 :: 		*p++ = '0'+n;
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <2> <-  48 + R4   (midx: 5)
	[R2] <1> <- R3   (midx: 0)
	R2 <4> <-  R2 + 1   (midx: 2)
	R2 <4> <- R2   (midx: 0)
//Calculate.c,165 :: 		}
	R2 <4> <- R2   (midx: 0)
	goto	38   (midx: 0)
37:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R6 = 9) then goto 39   (midx: 5)
	if ( R6 = 8) then goto 81   (midx: 5)
	if ( R6 = 7) then goto 82   (midx: 5)
	if ( R6 = 6) then goto 83   (midx: 5)
	if ( R6 = 5) then goto 85   (midx: 5)
	if ( R6 = 4) then goto 86   (midx: 5)
	if ( R6 = 3) then goto 87   (midx: 5)
	if ( R6 = 2) then goto 89   (midx: 5)
   (midx: 0)
	if ( R6 = 1) then goto 90   (midx: 5)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	if ( R6 = 0) then goto 91   (midx: 5)
	R2 <4> <- R2   (midx: 0)
38:   (midx: 0)
//Calculate.c,166 :: 		while ( p < r->str+fixlen )
   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <4> <- PUSH(R1)   (midx: 254)
	R1 <4> <- R2   (midx: 0)
	R2 <2> <- R0   (midx: 0)
	R0 <4> <- POP   (midx: 254)
60:   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R3 <4> <-  R0 + 2   (midx: 2)
	R3 <4> <-  R3 + R2   (midx: 2)
	if ( R1 >= R3) then goto 61   (midx: 2)
//Calculate.c,167 :: 		*p++ = ' ';
	R3 <1> <- 32   (midx: 0)
	[R1] <1> <- R3   (midx: 0)
	R1 <4> <-  R1 + 1   (midx: 2)
	R1 <4> <- R1   (midx: 0)
   (midx: 0)
	R2 <2> <- R2   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	R1 <4> <- R1   (midx: 0)
	goto	60   (midx: 0)
61:   (midx: 0)
//Calculate.c,168 :: 		*p = 0;
	R3 <1> <- 0   (midx: 0)
	[R1] <1> <- R3   (midx: 0)
//Calculate.c,169 :: 		r->len = p-r->str;
	R4 <4> <-  R0 + 1   (midx: 2)
   (midx: 0)
	R3 <4> <-  R0 + 2   (midx: 2)
   (midx: 0)
	R3 <4> <-  R1 - R3   (midx: 2)
	[R4] <1> <- R3   (midx: 0)
  end
   (midx: 0)
_Char_to_Str:
  begin   (midx: 0)
//Calculate.c,174 :: 		void Char_to_Str(unsigned char *p, unsigned char n)
_Char_to_Str:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <4> <- R0   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <1> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
//Calculate.c,176 :: 		*p++ = '0'+n/100;
	R2 <1> <- 100   (midx: 0)
	R2 <1> <-  R1 / R2   (midx: 0)
	R2 <2> <-  48 + R2   (midx: 0)
	[R0] <1> <- R2   (midx: 0)
   (midx: 0)
	R2 <4> <-  R0 + 1   (midx: 2)
   (midx: 0)
	R4 <4> <- R2   (midx: 0)
//Calculate.c,177 :: 		n %= 100;
	R2 <1> <- 100   (midx: 0)
   (midx: 0)
	R3 <1> <-  R1 mod R2   (midx: 0)
   (midx: 0)
	R0 <1> <- R3   (midx: 0)
//Calculate.c,178 :: 		*p++ = '0'+n/10;
	R2 <1> <- 10   (midx: 0)
	R2 <1> <-  R3 / R2   (midx: 0)
	R2 <2> <-  48 + R2   (midx: 0)
	[R4] <1> <- R2   (midx: 0)
   (midx: 0)
	R2 <4> <-  R4 + 1   (midx: 2)
   (midx: 0)
	R1 <4> <- R2   (midx: 0)
//Calculate.c,179 :: 		n %= 10;
	R3 <1> <- 10   (midx: 0)
   (midx: 0)
	R2 <1> <-  R0 mod R3   (midx: 0)
//Calculate.c,180 :: 		*p++ = '0'+n;
	R2 <2> <-  48 + R2   (midx: 0)
	[R1] <1> <- R2   (midx: 0)
   (midx: 0)
	R3 <4> <-  R1 + 1   (midx: 2)
//Calculate.c,181 :: 		*p = 0;
	R2 <1> <- 0   (midx: 0)
	[R3] <1> <- R2   (midx: 0)
  end
   (midx: 0)
_Char_to_Hex:
  begin   (midx: 0)
//Calculate.c,186 :: 		void Char_to_Hex(unsigned char *p, unsigned char n)
_Char_to_Hex:
  begin   (midx: 0)
   (midx: 0)
   (midx: 0)
	R0 <4> <- R0   (midx: 0)
   (midx: 0)
   (midx: 0)
   (midx: 0)
	R1 <1> <- R1   (midx: 0)
   (midx: 0)
   (midx: 0)
//Calculate.c,188 :: 		if(n/16>9)
	R2 <1> <-  R1 shr 4   (midx: 0)
	if ( R2 <= 9) then goto 62   (midx: 0)
//Calculate.c,189 :: 		*p++ = 'A'+(n/16-10);
	R2 <1> <-  R1 shr 4   (midx: 0)
	R2 <2> <-  R2 - 10   (midx: 0)
	R2 <2> <-  65 + R2   (midx: 5)
	[R0] <1> <- R2   (midx: 0)
	R0 <4> <-  R0 + 1   (midx: 2)
	R0 <4> <- R0   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	goto	63   (midx: 0)
62:   (midx: 0)
//Calculate.c,191 :: 		*p++ = '0'+n/16;
	R2 <1> <-  R1 shr 4   (midx: 0)
	R2 <2> <-  48 + R2   (midx: 0)
	[R0] <1> <- R2   (midx: 0)
	R0 <4> <-  R0 + 1   (midx: 2)
   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	R0 <4> <- R0   (midx: 0)
63:   (midx: 0)
//Calculate.c,192 :: 		n %= 16;
   (midx: 0)
	R2 <1> <-  R1 & 15   (midx: 0)
	R1 <1> <- R2   (midx: 0)
//Calculate.c,193 :: 		if(n>9)
	if ( R2 <= 9) then goto 64   (midx: 0)
//Calculate.c,194 :: 		*p++ = 'A'+(n-10);
   (midx: 0)
	R2 <2> <-  R1 - 10   (midx: 0)
	R2 <2> <-  65 + R2   (midx: 5)
	[R0] <1> <- R2   (midx: 0)
	R0 <4> <-  R0 + 1   (midx: 2)
	R0 <4> <- R0   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	goto	65   (midx: 0)
64:   (midx: 0)
//Calculate.c,196 :: 		*p++ = '0'+n;
   (midx: 0)
   (midx: 0)
	R2 <2> <-  48 + R1   (midx: 0)
	[R0] <1> <- R2   (midx: 0)
	R0 <4> <-  R0 + 1   (midx: 2)
   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	R0 <4> <- R0   (midx: 0)
65:   (midx: 0)
//Calculate.c,197 :: 		*p++ = ' ';
   (midx: 0)
	R2 <1> <- 32   (midx: 0)
	[R0] <1> <- R2   (midx: 0)
   (midx: 0)
	R3 <4> <-  R0 + 1   (midx: 2)
//Calculate.c,198 :: 		*p = 0;
	R2 <1> <- 0   (midx: 0)
	[R3] <1> <- R2   (midx: 0)
  end
   (midx: 0)
