CCS PCM C Compiler, Version 4.066, 42283               18-Nov-11 22:34

               Filename: main.lst

               ROM used: 201 words (20%)
                         Largest free fragment is 823
               RAM used: 13 (20%) at main() level
                         13 (20%) worst case
               Stack:    1 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   004
0003:  NOP
0004:  CALL   3FF
0005:  BSF    03.5
0006:  MOVWF  10
0007:  MOVLW  00
0008:  MOVWF  0A
0009:  GOTO   057
.................... /* main.c 
....................  
.................... 	09/11/2011 by Robert Trescott Jr. 
.................... 	(C)2011 Analogic 
....................  
.................... 	History: 
.................... 		09/11/11 - original work 
.................... 		11/18/11 - modified to add an extra channel on port GP1 
....................  
.................... */ 
....................  
.................... // compiler and hardware special settings 
.................... #case 
....................  
.................... #include <12F675.h> 
.................... //////// Standard Header file for the PIC12F675 device //////////////// 
.................... #device PIC12F675 
.................... #list 
....................  
....................  
.................... #fuses INTRC_IO,PUT,NOWDT,BROWNOUT,CPD,PROTECT 
....................  
.................... #use delay (clock=4000000) 
*
000C:  MOVLW  2C
000D:  MOVWF  04
000E:  MOVF   00,W
000F:  BTFSC  03.2
0010:  GOTO   01F
0011:  MOVLW  01
0012:  MOVWF  21
0013:  CLRF   20
0014:  DECFSZ 20,F
0015:  GOTO   014
0016:  DECFSZ 21,F
0017:  GOTO   013
0018:  MOVLW  4A
0019:  MOVWF  20
001A:  DECFSZ 20,F
001B:  GOTO   01A
001C:  GOTO   01D
001D:  DECFSZ 00,F
001E:  GOTO   011
.................... #include "PIC12F629.inc" 
.................... #list	 
....................  
....................  
.................... #define	true			1 
.................... #define	false			0 
....................  
.................... #define MAX_CHANS		3 
.................... #define PREAMBLE		0xE5 
....................  
....................  
.................... // "little-endian" ex. 0xA8 0x31 0x52 0x4F in memory = int32 4F5231A8 
.................... typedef union {		 
.................... 	struct { 
.................... 		int8 byte; 
.................... 	}; 
.................... 	struct { 
.................... 		int8 pre		: 5;	// bit 0 
.................... 		int8 ch3		: 1; 
.................... 		int8 ch2		: 1; 
.................... 		int8 ch1		: 1;	// bit 7 
.................... 	}; 
.................... } u_IN; 
....................  
....................  
.................... static int16	chan[MAX_CHANS]; 
*
0074:  CLRF   25
0075:  CLRF   26
0076:  CLRF   27
0077:  CLRF   28
0078:  CLRF   29
0079:  CLRF   2A
.................... static u_IN 	in; 
007A:  CLRF   2B
....................  
.................... #use rs232(baud=1200, xmit=PIN_A1,rcv=PIN_A0) 
*
0025:  MOVF   04,W
0026:  MOVWF  21
0027:  BSF    03.5
0028:  BSF    05.0
0029:  BCF    03.5
002A:  BTFSC  05.0
002B:  GOTO   02A
002C:  MOVLW  08
002D:  MOVWF  20
002E:  CLRF   2C
002F:  BSF    20.7
0030:  GOTO   041
0031:  BCF    20.7
0032:  GOTO   041
0033:  BCF    03.0
0034:  BTFSC  05.0
0035:  BSF    03.0
0036:  RRF    2C,F
0037:  BSF    20.6
0038:  GOTO   041
0039:  BCF    20.6
003A:  DECFSZ 20,F
003B:  GOTO   033
003C:  MOVF   21,W
003D:  MOVWF  04
003E:  MOVF   2C,W
003F:  MOVWF  21
0040:  GOTO   056
0041:  MOVLW  01
0042:  MOVWF  04
0043:  MOVLW  00
0044:  BTFSC  20.7
0045:  MOVLW  55
0046:  MOVWF  21
0047:  DECFSZ 21,F
0048:  GOTO   047
0049:  DECFSZ 04,F
004A:  GOTO   043
004B:  MOVLW  0D
004C:  BTFSC  20.7
004D:  MOVLW  03
004E:  MOVWF  21
004F:  DECFSZ 21,F
0050:  GOTO   04F
0051:  BTFSC  20.7
0052:  GOTO   031
0053:  BTFSC  20.6
0054:  GOTO   039
0055:  GOTO   033
0056:  GOTO   07F (RETURN)
....................  
....................  
.................... void initialize() 
.................... {	 
.................... 	delay_ms(50); 
*
000A:  MOVLW  32
000B:  MOVWF  2C
.................... 	set_tris_a(0xC9);		// set io direction including GP1 as an output 
*
001F:  MOVLW  C9
0020:  BSF    03.5
0021:  MOVWF  05
.................... //	set_tris_a(0xCB);		// set io direction 
.................... 	GPIO = 0;				// keep relays low 
0022:  BCF    03.5
0023:  CLRF   05
.................... } 
0024:  GOTO   07C (RETURN)
....................  
.................... #zero_ram 
.................... void main() 
.................... {	 
*
0057:  MOVF   03,W
0058:  ANDLW  1F
0059:  MOVWF  03
005A:  MOVLW  3F
005B:  MOVWF  20
005C:  MOVLW  21
005D:  MOVWF  04
005E:  BCF    03.7
005F:  CLRF   00
0060:  INCF   04,F
0061:  DECFSZ 20,F
0062:  GOTO   05F
0063:  CLRF   20
0064:  CLRF   04
0065:  MOVLW  1F
0066:  ANDWF  03,F
0067:  BSF    03.5
0068:  BCF    05.1
0069:  BCF    03.5
006A:  BSF    05.1
006B:  BCF    1F.6
006C:  BSF    03.5
006D:  BCF    1F.0
006E:  BCF    1F.1
006F:  BCF    1F.2
0070:  BCF    1F.3
0071:  MOVLW  07
0072:  BCF    03.5
0073:  MOVWF  19
.................... 	initialize(); 
*
007B:  GOTO   00A
.................... 		 
.................... 	for(;;){ 
.................... 		if (kbhit()){ 
007C:  BTFSC  05.0
007D:  GOTO   0C2
.................... 			in.byte = getc(); 
007E:  GOTO   025
007F:  MOVF   21,W
0080:  MOVWF  2B
.................... 			if ((in.byte & 0x1F) == 0x05){ 
0081:  MOVF   2B,W
0082:  ANDLW  1F
0083:  SUBLW  05
0084:  BTFSS  03.2
0085:  GOTO   0C1
.................... 				if (in.ch1 && !in.ch2){ 
0086:  BTFSS  2B.7
0087:  GOTO   097
0088:  BTFSC  2B.6
0089:  GOTO   097
.................... 					GPIO4 = in.ch1; 
008A:  BTFSS  2B.7
008B:  BCF    05.4
008C:  BTFSC  2B.7
008D:  BSF    05.4
.................... 					GPIO5 = in.ch2; 
008E:  BTFSS  2B.6
008F:  BCF    05.5
0090:  BTFSC  2B.6
0091:  BSF    05.5
.................... 					GPIO2 = in.ch3; 
0092:  BTFSS  2B.5
0093:  BCF    05.2
0094:  BTFSC  2B.5
0095:  BSF    05.2
.................... 				} else if (!in.ch1 && in.ch2){ 
0096:  GOTO   0C1
0097:  BTFSC  2B.7
0098:  GOTO   0A8
0099:  BTFSS  2B.6
009A:  GOTO   0A8
.................... 					GPIO4 = in.ch1; 
009B:  BTFSS  2B.7
009C:  BCF    05.4
009D:  BTFSC  2B.7
009E:  BSF    05.4
.................... 					GPIO5 = in.ch2; 
009F:  BTFSS  2B.6
00A0:  BCF    05.5
00A1:  BTFSC  2B.6
00A2:  BSF    05.5
.................... 					GPIO2 = in.ch3; 
00A3:  BTFSS  2B.5
00A4:  BCF    05.2
00A5:  BTFSC  2B.5
00A6:  BSF    05.2
.................... 				} else if (in.ch1 && in.ch2){ 
00A7:  GOTO   0C1
00A8:  BTFSS  2B.7
00A9:  GOTO   0B4
00AA:  BTFSS  2B.6
00AB:  GOTO   0B4
.................... 					GPIO4 = false; 
00AC:  BCF    05.4
.................... 					GPIO5 = false; 
00AD:  BCF    05.5
.................... 					GPIO1 = true; 
00AE:  BSF    05.1
.................... 					GPIO2 = in.ch3; 
00AF:  BTFSS  2B.5
00B0:  BCF    05.2
00B1:  BTFSC  2B.5
00B2:  BSF    05.2
.................... 				} else { 
00B3:  GOTO   0C1
.................... 					GPIO4 = in.ch1; 
00B4:  BTFSS  2B.7
00B5:  BCF    05.4
00B6:  BTFSC  2B.7
00B7:  BSF    05.4
.................... 					GPIO5 = in.ch2; 
00B8:  BTFSS  2B.6
00B9:  BCF    05.5
00BA:  BTFSC  2B.6
00BB:  BSF    05.5
.................... 					GPIO2 = in.ch3; 
00BC:  BTFSS  2B.5
00BD:  BCF    05.2
00BE:  BTFSC  2B.5
00BF:  BSF    05.2
.................... 					GPIO1 = false; 
00C0:  BCF    05.1
.................... 				} 
.................... 			} 
.................... 		} else { 
00C1:  GOTO   0C7
.................... 			delay_us(500); 
00C2:  MOVLW  A6
00C3:  MOVWF  20
00C4:  DECFSZ 20,F
00C5:  GOTO   0C4
00C6:  NOP
.................... 		} 
.................... 	} 
00C7:  GOTO   07C
.................... } 
....................  
00C8:  SLEEP

Configuration Fuses:
   Word  1: 3064   NOWDT CPD PROTECT MCLR PUT INTRC_IO BROWNOUT BANDGAP_HIGH
